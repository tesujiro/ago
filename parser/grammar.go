// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys         int
	token       ast.Token
	rule        ast.Rule
	rules       []ast.Rule
	pattern     ast.Pattern
	stmt        ast.Stmt
	stmts       []ast.Stmt
	stmt_if     ast.Stmt
	stmt_regexp ast.Stmt
	expr        ast.Expr
	exprs       []ast.Expr
	opt_exprs   []ast.Expr
	ident_args  []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57379
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57374
	CONTINUE   = 57375
	DELETE     = 57365
	DIVEQ      = 57364
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57376
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57377
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57378
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -79
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
		'$':        9,
		'(':        10,
		')':        10,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (131x)
		43:    1,  // '+' (128x)
		45:    2,  // '-' (128x)
		57346: 3,  // IDENT (128x)
		33:    4,  // '!' (122x)
		36:    5,  // '$' (122x)
		57350: 6,  // FALSE (122x)
		57376: 7,  // FUNC (122x)
		57351: 8,  // NIL (122x)
		57347: 9,  // NUMBER (122x)
		57348: 10, // STRING (122x)
		57349: 11, // TRUE (122x)
		57371: 12, // IF (82x)
		57370: 13, // REGEXP (82x)
		125:   14, // '}' (81x)
		57374: 15, // BREAK (81x)
		57375: 16, // CONTINUE (81x)
		57365: 17, // DELETE (81x)
		57373: 18, // FOR (81x)
		57369: 19, // PRINT (81x)
		57377: 20, // RETURN (81x)
		10:    21, // '\n' (68x)
		59:    22, // ';' (59x)
		123:   23, // '{' (58x)
		41:    24, // ')' (50x)
		44:    25, // ',' (48x)
		37:    26, // '%' (45x)
		42:    27, // '*' (45x)
		47:    28, // '/' (45x)
		60:    29, // '<' (45x)
		62:    30, // '>' (45x)
		91:    31, // '[' (45x)
		57356: 32, // ANDAND (45x)
		57364: 33, // DIVEQ (45x)
		57352: 34, // EQEQ (45x)
		57354: 35, // GE (45x)
		57355: 36, // LE (45x)
		57362: 37, // MINUSEQ (45x)
		57360: 38, // MINUSMINUS (45x)
		57363: 39, // MULEQ (45x)
		57353: 40, // NEQ (45x)
		57357: 41, // OROR (45x)
		57361: 42, // PLUSEQ (45x)
		57359: 43, // PLUSPLUS (45x)
		57381: 44, // expr (44x)
		61:    45, // '=' (37x)
		93:    46, // ']' (37x)
		126:   47, // '~' (35x)
		57382: 48, // exprs (14x)
		57344: 49, // $end (12x)
		57367: 50, // BEGIN (12x)
		57368: 51, // END (12x)
		57392: 52, // stmt (8x)
		57393: 53, // stmt_if (8x)
		57394: 54, // stmt_regexp (8x)
		57395: 55, // stmts (8x)
		57372: 56, // ELSE (4x)
		57384: 57, // nls (4x)
		57386: 58, // opt_nls (4x)
		57385: 59, // opt_exprs (3x)
		57383: 60, // ident_args (2x)
		57387: 61, // opt_semi (2x)
		57391: 62, // semi (2x)
		57380: 63, // action (1x)
		57366: 64, // IN (1x)
		57388: 65, // pattern (1x)
		57389: 66, // program (1x)
		57390: 67, // rule (1x)
		57379: 68, // $default (0x)
		57345: 69, // error (0x)
		57358: 70, // LEN (0x)
		57378: 71, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"IDENT",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"REGEXP",
		"'}'",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"FOR",
		"PRINT",
		"RETURN",
		"'\\n'",
		"';'",
		"'{'",
		"')'",
		"','",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"expr",
		"'='",
		"']'",
		"'~'",
		"exprs",
		"$end",
		"BEGIN",
		"END",
		"stmt",
		"stmt_if",
		"stmt_regexp",
		"stmts",
		"ELSE",
		"nls",
		"opt_nls",
		"opt_exprs",
		"ident_args",
		"opt_semi",
		"semi",
		"action",
		"IN",
		"pattern",
		"program",
		"rule",
		"$default",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {66, 0},
		2:  {66, 2},
		3:  {67, 2},
		4:  {65, 0},
		5:  {65, 5},
		6:  {65, 1},
		7:  {65, 1},
		8:  {65, 1},
		9:  {63, 5},
		10: {55, 0},
		11: {55, 4},
		12: {52, 3},
		13: {52, 3},
		14: {52, 1},
		15: {52, 2},
		16: {52, 1},
		17: {52, 1},
		18: {52, 2},
		19: {52, 1},
		20: {52, 4},
		21: {52, 5},
		22: {52, 1},
		23: {52, 1},
		24: {52, 9},
		25: {52, 2},
		26: {53, 5},
		27: {53, 7},
		28: {53, 5},
		29: {54, 3},
		30: {54, 1},
		31: {59, 0},
		32: {59, 1},
		33: {48, 1},
		34: {48, 4},
		35: {44, 1},
		36: {44, 1},
		37: {44, 1},
		38: {44, 1},
		39: {44, 1},
		40: {44, 2},
		41: {44, 1},
		42: {44, 4},
		43: {44, 7},
		44: {44, 4},
		45: {44, 4},
		46: {44, 2},
		47: {44, 2},
		48: {44, 3},
		49: {44, 3},
		50: {44, 3},
		51: {44, 3},
		52: {44, 3},
		53: {44, 3},
		54: {44, 3},
		55: {44, 3},
		56: {44, 3},
		57: {44, 3},
		58: {44, 3},
		59: {44, 3},
		60: {44, 2},
		61: {44, 2},
		62: {44, 2},
		63: {44, 3},
		64: {44, 3},
		65: {44, 3},
		66: {44, 3},
		67: {44, 3},
		68: {44, 3},
		69: {60, 0},
		70: {60, 1},
		71: {60, 4},
		72: {57, 1},
		73: {57, 2},
		74: {58, 0},
		75: {58, 1},
		76: {62, 1},
		77: {61, 0},
		78: {61, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [153][]uint16{
		// 0
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 23: 78, 49: 78, 78, 78, 66: 80},
		{97, 94, 95, 87, 96, 92, 90, 83, 91, 88, 93, 89, 23: 75, 44: 86, 49: 79, 84, 85, 65: 82, 67: 81},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 23: 77, 49: 77, 77, 77},
		{23: 227, 63: 226},
		{100, 3: 222},
		// 5
		{23: 73},
		{23: 72},
		{129, 144, 145, 23: 71, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{183, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 45: 44, 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 45: 43, 43, 43},
		// 10
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 45: 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 45: 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 45: 40, 40, 40},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 221},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 45: 38, 38, 38},
		// 15
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 220},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 219},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 218},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 98},
		{129, 144, 145, 24: 217, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		// 20
		{100},
		{3: 102, 24: 10, 10, 60: 101},
		{24: 103, 104},
		{24: 9, 9},
		{23: 110},
		// 25
		{3: 5, 21: 106, 57: 107, 105},
		{3: 109},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 23: 7, 49: 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 108, 23: 4, 49: 4, 4, 4},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 23: 6, 49: 6, 6, 6},
		// 30
		{24: 8, 8},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 111},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 125, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 214, 61: 213, 215},
		{129, 144, 145, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 25: 46, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 209, 47: 210},
		// 35
		{25: 170, 45: 207},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 206},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 44: 167, 48: 205},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 56: 196},
		// 40
		{180, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 23: 178, 44: 179},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 44: 167, 48: 166, 59: 177},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 126},
		// 45
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 45: 36, 36, 36},
		{129, 144, 145, 23: 127, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 175},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 167, 48: 173},
		// 50
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 24: 48, 44: 167, 48: 166, 59: 168},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 45: 33, 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 45: 32, 32, 32},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 165},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 164},
		// 55
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 163},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 162},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 161},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 160},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 159},
		// 60
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 158},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 157},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 156},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 155},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 154},
		// 65
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 153},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 152},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 151},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 150},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 149},
		// 70
		{129, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 128, 11, 135, 11, 11, 11, 133, 11, 134, 11, 11, 132, 11, 45: 11, 11, 11},
		{129, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 128, 12, 135, 12, 12, 12, 133, 12, 134, 12, 12, 132, 12, 45: 12, 12, 12},
		{129, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 128, 13, 135, 13, 13, 13, 133, 13, 134, 13, 13, 132, 13, 45: 13, 13, 13},
		{129, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 148, 146, 147, 14, 14, 128, 14, 135, 14, 14, 14, 133, 14, 134, 14, 14, 132, 14, 45: 14, 14, 14},
		{129, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 148, 146, 147, 15, 15, 128, 15, 135, 15, 15, 15, 133, 15, 134, 15, 15, 132, 15, 45: 15, 15, 15},
		// 75
		{129, 144, 145, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 148, 146, 147, 140, 138, 128, 20, 135, 136, 139, 141, 133, 131, 134, 137, 20, 132, 130, 45: 20, 20, 20},
		{129, 144, 145, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 21, 132, 130, 45: 21, 21, 21},
		{129, 144, 145, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 148, 146, 147, 22, 22, 128, 22, 135, 22, 22, 22, 133, 131, 134, 22, 22, 132, 130, 45: 22, 22, 22},
		{129, 144, 145, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 148, 146, 147, 23, 23, 128, 23, 135, 23, 23, 23, 133, 131, 134, 23, 23, 132, 130, 45: 23, 23, 23},
		{129, 144, 145, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 148, 146, 147, 24, 24, 128, 24, 135, 24, 24, 24, 133, 131, 134, 24, 24, 132, 130, 45: 24, 24, 24},
		// 80
		{129, 144, 145, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 148, 146, 147, 25, 25, 128, 25, 135, 25, 25, 25, 133, 131, 134, 25, 25, 132, 130, 45: 25, 25, 25},
		{129, 144, 145, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 148, 146, 147, 140, 138, 128, 26, 135, 26, 139, 141, 133, 131, 134, 26, 26, 132, 130, 45: 26, 26, 26},
		{129, 144, 145, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 148, 146, 147, 140, 138, 128, 27, 135, 27, 139, 141, 133, 131, 134, 27, 27, 132, 130, 45: 27, 27, 27},
		{129, 144, 145, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 28, 28, 28},
		{129, 144, 145, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 29, 29, 29},
		// 85
		{129, 144, 145, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 30, 30, 30},
		{129, 144, 145, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 31, 31, 31},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 24: 47, 170},
		{129, 144, 145, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 24: 46, 46, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 46: 46},
		{24: 169},
		// 90
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 45: 34, 34, 34},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21: 106, 57: 107, 171},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 172},
		{129, 144, 145, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 24: 45, 45, 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130, 45: 45, 45},
		{25: 170, 46: 174},
		// 95
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 45: 37, 37, 37},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 176, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 56: 53},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 194},
		// 100
		{129, 144, 145, 23: 191, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{97, 94, 95, 181, 96, 92, 90, 99, 91, 88, 93, 89, 44: 98},
		{183, 44, 44, 24: 44, 26: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 64: 182},
		{3: 186},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 24: 48, 44: 167, 48: 166, 59: 184},
		// 105
		{24: 185},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 45: 35, 35, 35},
		{24: 187},
		{23: 188},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 189},
		// 110
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 190, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 192},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 193, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 115
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 195, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{12: 197, 23: 198},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 201},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 199},
		// 120
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 200, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 56: 51},
		{129, 144, 145, 23: 202, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 203},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 204, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		// 125
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 56: 52},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 25: 170},
		{129, 144, 145, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 167, 48: 208},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 25: 170},
		// 130
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 44: 212},
		{13: 211},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{129, 144, 145, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 26: 148, 146, 147, 140, 138, 128, 143, 135, 136, 139, 141, 133, 131, 134, 137, 142, 132, 130},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 106, 57: 107, 216},
		// 135
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 23: 3, 49: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 23: 1, 49: 1, 1, 1},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 45: 16, 16, 16},
		{129, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 128, 17, 135, 17, 17, 17, 133, 17, 134, 17, 17, 132, 17, 45: 17, 17, 17},
		// 140
		{129, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 128, 18, 135, 18, 18, 18, 133, 18, 134, 18, 18, 132, 18, 45: 18, 18, 18},
		{129, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 128, 19, 135, 19, 19, 19, 133, 19, 134, 19, 19, 132, 19, 45: 19, 19, 19},
		{129, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 128, 39, 135, 39, 39, 39, 133, 39, 134, 39, 39, 132, 39, 45: 39, 39, 39},
		{223},
		{3: 102, 24: 10, 10, 60: 224},
		// 145
		{24: 225, 104},
		{23: 74},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 23: 76, 49: 76, 76, 76},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 55: 228},
		{97, 94, 95, 87, 96, 92, 90, 99, 91, 88, 93, 89, 123, 124, 229, 120, 121, 115, 119, 117, 122, 44: 113, 48: 114, 52: 112, 118, 116},
		// 150
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 21: 2, 214, 2, 49: 2, 2, 2, 61: 230, 215},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 21: 106, 23: 5, 49: 5, 5, 5, 57: 107, 231},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 23: 70, 49: 70, 70, 70},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 69

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 5:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 6:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 7:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 9:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 10:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 11:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 12:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 13:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 14:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 15:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_regexp
		}
	case 17:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 18:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 19:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 20:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 21:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 22:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 23:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 24:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
		}
	case 26:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 27:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 28:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 29:
		{
			yyVAL.stmt_regexp = &ast.MatchStmt{Expr: yyS[yypt-2].expr, RegExp: yyS[yypt-0].token.Literal}
		}
	case 30:
		{
			yyVAL.stmt_regexp = &ast.MatchStmt{Expr: defaultExpr, RegExp: yyS[yypt-0].token.Literal}
		}
	case 31:
		{
			yyVAL.opt_exprs = []ast.Expr{}
		}
	case 32:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 33:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 35:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 36:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 37:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 38:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 39:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 40:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 42:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 43:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 44:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 45:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 47:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 48:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 66:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 67:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.ident_args = []string{}
		}
	case 70:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 71:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
