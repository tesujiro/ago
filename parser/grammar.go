// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	stmt_if    ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	opt_exprs  []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57381
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57380
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -82
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		'+':        7,
		'-':        7,
		PLUSPLUS:   7,
		MINUSMINUS: 7,
		'*':        8,
		'/':        8,
		'%':        8,
		UNARY:      9,
		'$':        10,
		'(':        11,
		')':        11,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (147x)
		43:    1,  // '+' (144x)
		45:    2,  // '-' (144x)
		57346: 3,  // IDENT (144x)
		57370: 4,  // REGEXP (140x)
		33:    5,  // '!' (138x)
		36:    6,  // '$' (138x)
		57350: 7,  // FALSE (138x)
		57378: 8,  // FUNC (138x)
		57351: 9,  // NIL (138x)
		57347: 10, // NUMBER (138x)
		57348: 11, // STRING (138x)
		57349: 12, // TRUE (138x)
		57371: 13, // IF (87x)
		125:   14, // '}' (86x)
		57376: 15, // BREAK (86x)
		57377: 16, // CONTINUE (86x)
		57365: 17, // DELETE (86x)
		57373: 18, // FOR (86x)
		57369: 19, // PRINT (86x)
		57379: 20, // RETURN (86x)
		57374: 21, // WHILE (86x)
		10:    22, // '\n' (77x)
		59:    23, // ';' (67x)
		123:   24, // '{' (67x)
		57344: 25, // $end (58x)
		57367: 26, // BEGIN (58x)
		57368: 27, // END (58x)
		41:    28, // ')' (52x)
		44:    29, // ',' (51x)
		37:    30, // '%' (49x)
		42:    31, // '*' (49x)
		47:    32, // '/' (49x)
		60:    33, // '<' (49x)
		62:    34, // '>' (49x)
		91:    35, // '[' (49x)
		126:   36, // '~' (49x)
		57356: 37, // ANDAND (49x)
		57364: 38, // DIVEQ (49x)
		57352: 39, // EQEQ (49x)
		57354: 40, // GE (49x)
		57355: 41, // LE (49x)
		57362: 42, // MINUSEQ (49x)
		57360: 43, // MINUSMINUS (49x)
		57363: 44, // MULEQ (49x)
		57353: 45, // NEQ (49x)
		57357: 46, // OROR (49x)
		57361: 47, // PLUSEQ (49x)
		57359: 48, // PLUSPLUS (49x)
		57383: 49, // expr (47x)
		61:    50, // '=' (39x)
		93:    51, // ']' (39x)
		57384: 52, // exprs (16x)
		57394: 53, // stmt (10x)
		57395: 54, // stmt_if (10x)
		57396: 55, // stmts (10x)
		57386: 56, // nls (5x)
		57388: 57, // opt_nls (5x)
		57372: 58, // ELSE (4x)
		57387: 59, // opt_exprs (3x)
		57389: 60, // opt_semi (3x)
		57393: 61, // semi (3x)
		57382: 62, // action (2x)
		57385: 63, // ident_args (2x)
		57366: 64, // IN (1x)
		57390: 65, // pattern (1x)
		57391: 66, // program (1x)
		57392: 67, // rule (1x)
		57381: 68, // $default (0x)
		57375: 69, // DO (0x)
		57345: 70, // error (0x)
		57358: 71, // LEN (0x)
		57380: 72, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"'}'",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"FOR",
		"PRINT",
		"RETURN",
		"WHILE",
		"'\\n'",
		"';'",
		"'{'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"'~'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"expr",
		"'='",
		"']'",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"nls",
		"opt_nls",
		"ELSE",
		"opt_exprs",
		"opt_semi",
		"semi",
		"action",
		"ident_args",
		"IN",
		"pattern",
		"program",
		"rule",
		"$default",
		"DO",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {66, 0},
		2:  {66, 2},
		3:  {67, 2},
		4:  {67, 3},
		5:  {67, 1},
		6:  {65, 5},
		7:  {65, 1},
		8:  {65, 1},
		9:  {65, 1},
		10: {65, 3},
		11: {62, 5},
		12: {55, 0},
		13: {55, 4},
		14: {53, 3},
		15: {53, 3},
		16: {53, 1},
		17: {53, 2},
		18: {53, 1},
		19: {53, 2},
		20: {53, 1},
		21: {53, 4},
		22: {53, 5},
		23: {53, 4},
		24: {53, 5},
		25: {53, 1},
		26: {53, 1},
		27: {53, 9},
		28: {53, 2},
		29: {54, 5},
		30: {54, 7},
		31: {54, 5},
		32: {59, 0},
		33: {59, 1},
		34: {52, 1},
		35: {52, 4},
		36: {49, 1},
		37: {49, 1},
		38: {49, 1},
		39: {49, 1},
		40: {49, 1},
		41: {49, 2},
		42: {49, 1},
		43: {49, 4},
		44: {49, 3},
		45: {49, 1},
		46: {49, 7},
		47: {49, 4},
		48: {49, 4},
		49: {49, 2},
		50: {49, 2},
		51: {49, 3},
		52: {49, 3},
		53: {49, 3},
		54: {49, 3},
		55: {49, 3},
		56: {49, 3},
		57: {49, 3},
		58: {49, 3},
		59: {49, 3},
		60: {49, 3},
		61: {49, 3},
		62: {49, 3},
		63: {49, 2},
		64: {49, 2},
		65: {49, 2},
		66: {49, 3},
		67: {49, 3},
		68: {49, 3},
		69: {49, 3},
		70: {49, 3},
		71: {49, 3},
		72: {63, 0},
		73: {63, 1},
		74: {63, 4},
		75: {56, 1},
		76: {56, 2},
		77: {57, 0},
		78: {57, 1},
		79: {61, 1},
		80: {60, 0},
		81: {60, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [166][]uint16{
		// 0
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 24: 81, 81, 81, 81, 66: 83},
		{103, 100, 101, 93, 91, 102, 98, 96, 87, 97, 94, 99, 95, 24: 92, 82, 88, 89, 49: 90, 62: 86, 65: 85, 67: 84},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 24: 80, 80, 80, 80},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22: 2, 227, 92, 2, 2, 2, 60: 246, 228, 245},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 24: 77, 77, 77, 77},
		// 5
		{107, 3: 241},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 22: 75, 75, 75, 75, 75, 75},
		{74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 22: 74, 74, 74, 74, 74, 74},
		{136, 151, 152, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 22: 73, 73, 73, 73, 73, 73, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 22: 37, 37, 37, 37, 37, 37, 29: 239, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 10
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 235},
		{198, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 50: 46, 46},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 50: 45, 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 50: 44, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 50: 43, 43},
		// 15
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 50: 42, 42},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 234},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 50: 40, 40},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 233},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 232},
		// 20
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 231},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 104},
		{136, 151, 152, 28: 230, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 50: 37, 37},
		{107},
		// 25
		{3: 109, 28: 10, 10, 63: 108},
		{28: 110, 111},
		{28: 9, 9},
		{24: 117},
		{3: 5, 22: 113, 56: 114, 112},
		// 30
		{3: 116},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24: 7, 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 115, 24: 4, 4, 4, 4},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 24: 6, 6, 6, 6},
		{28: 8, 8},
		// 35
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 118},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 131, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 227, 60: 226, 228},
		{136, 151, 152, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 29: 48, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 224},
		{29: 177, 50: 222},
		// 40
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 221},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 49: 174, 52: 220},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 58: 211},
		{195, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 24: 193, 49: 194},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 24: 186, 49: 187},
		// 45
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 49: 174, 52: 173, 59: 185},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 132},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 50: 36, 36},
		// 50
		{136, 151, 152, 24: 133, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 183},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 174, 52: 181},
		{4: 180},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 28: 50, 49: 174, 52: 173, 59: 175},
		// 55
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 50: 33, 33},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 50: 32, 32},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 172},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 171},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 170},
		// 60
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 169},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 168},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 167},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 166},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 165},
		// 65
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 164},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 163},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 162},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 161},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 160},
		// 70
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 159},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 158},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 157},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 156},
		{136, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 134, 11, 11, 142, 11, 11, 11, 140, 11, 141, 11, 11, 139, 11, 50: 11, 11},
		// 75
		{136, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 134, 12, 12, 142, 12, 12, 12, 140, 12, 141, 12, 12, 139, 12, 50: 12, 12},
		{136, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 134, 13, 13, 142, 13, 13, 13, 140, 13, 141, 13, 13, 139, 13, 50: 13, 13},
		{136, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 155, 153, 154, 14, 14, 134, 14, 14, 142, 14, 14, 14, 140, 14, 141, 14, 14, 139, 14, 50: 14, 14},
		{136, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 155, 153, 154, 15, 15, 134, 15, 15, 142, 15, 15, 15, 140, 15, 141, 15, 15, 139, 15, 50: 15, 15},
		{136, 151, 152, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 155, 153, 154, 147, 145, 134, 135, 20, 142, 143, 146, 148, 140, 138, 141, 144, 20, 139, 137, 50: 20, 20},
		// 80
		{136, 151, 152, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 21, 139, 137, 50: 21, 21},
		{136, 151, 152, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 155, 153, 154, 22, 22, 134, 22, 22, 142, 22, 22, 22, 140, 138, 141, 22, 22, 139, 137, 50: 22, 22},
		{136, 151, 152, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 155, 153, 154, 23, 23, 134, 23, 23, 142, 23, 23, 23, 140, 138, 141, 23, 23, 139, 137, 50: 23, 23},
		{136, 151, 152, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 155, 153, 154, 24, 24, 134, 24, 24, 142, 24, 24, 24, 140, 138, 141, 24, 24, 139, 137, 50: 24, 24},
		{136, 151, 152, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 155, 153, 154, 25, 25, 134, 25, 25, 142, 25, 25, 25, 140, 138, 141, 25, 25, 139, 137, 50: 25, 25},
		// 85
		{136, 151, 152, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 155, 153, 154, 147, 145, 134, 26, 26, 142, 26, 146, 148, 140, 138, 141, 26, 26, 139, 137, 50: 26, 26},
		{136, 151, 152, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 155, 153, 154, 147, 145, 134, 27, 27, 142, 27, 146, 148, 140, 138, 141, 27, 27, 139, 137, 50: 27, 27},
		{136, 151, 152, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 28, 28},
		{136, 151, 152, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 29, 29},
		{136, 151, 152, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 30, 30},
		// 90
		{136, 151, 152, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 31, 31},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 28: 49, 177},
		{136, 151, 152, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 28: 48, 48, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 51: 48},
		{28: 176},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 50: 34, 34},
		// 95
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22: 113, 56: 114, 178},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 179},
		{136, 151, 152, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 28: 47, 47, 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137, 50: 47, 47},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 50: 38, 38},
		{29: 177, 51: 182},
		// 100
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 50: 39, 39},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 184, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 58: 53},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 191},
		// 105
		{136, 151, 152, 24: 188, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 189},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 190, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 192, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		// 110
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 209},
		{136, 151, 152, 24: 206, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{103, 100, 101, 196, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 104},
		{198, 46, 46, 28: 46, 30: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 64: 197},
		// 115
		{3: 201},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 28: 50, 49: 174, 52: 173, 59: 199},
		{28: 200},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 50: 35, 35},
		{28: 202},
		// 120
		{24: 203},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 204},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 205, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 207},
		// 125
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 208, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 210, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{13: 212, 24: 213},
		// 130
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 216},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 214},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 215, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 58: 51},
		{136, 151, 152, 24: 217, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		// 135
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 55: 218},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 219, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 58: 52},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 29: 177},
		{136, 151, 152, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		// 140
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 174, 52: 223},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 29: 177},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 49: 225},
		{136, 151, 152, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 30: 155, 153, 154, 147, 145, 134, 135, 150, 142, 143, 146, 148, 140, 138, 141, 144, 149, 139, 137},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 113, 56: 114, 229},
		// 145
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 24: 3, 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24: 1, 1, 1, 1},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 50: 16, 16},
		{136, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 134, 17, 17, 142, 17, 17, 17, 140, 17, 141, 17, 17, 139, 17, 50: 17, 17},
		// 150
		{136, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 134, 18, 18, 142, 18, 18, 18, 140, 18, 141, 18, 18, 139, 18, 50: 18, 18},
		{136, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 134, 19, 19, 142, 19, 19, 19, 140, 19, 141, 19, 19, 139, 19, 50: 19, 19},
		{136, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 134, 41, 41, 142, 41, 41, 41, 140, 41, 141, 41, 41, 139, 41, 50: 41, 41},
		{103, 100, 101, 93, 105, 102, 98, 96, 106, 97, 94, 99, 95, 130, 236, 127, 128, 122, 125, 123, 129, 126, 49: 120, 52: 121, 119, 124},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 22: 2, 227, 2, 2, 2, 2, 60: 237, 228},
		// 155
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22: 113, 24: 5, 5, 5, 5, 56: 114, 238},
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 24: 71, 71, 71, 71},
		{4: 240},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 22: 72, 72, 72, 72, 72, 72},
		{242},
		// 160
		{3: 109, 28: 10, 10, 63: 243},
		{28: 244, 111},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 22: 76, 76, 76, 76, 76, 76},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 24: 79, 79, 79, 79},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 22: 113, 24: 5, 5, 5, 5, 56: 114, 247},
		// 165
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 24: 78, 78, 78, 78},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 70

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 14:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 15:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 20:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 21:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 25:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 26:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 27:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 28:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
		}
	case 29:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 30:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 31:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 32:
		{
			yyVAL.opt_exprs = []ast.Expr{}
		}
	case 33:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 34:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 36:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 37:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 38:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 39:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 40:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 41:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 43:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 44:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 45:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 46:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 47:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 48:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 49:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 50:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 51:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 66:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 67:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.ident_args = []string{}
		}
	case 73:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 74:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
