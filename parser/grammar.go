// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57384
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57382
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	EXIT       = 57380
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NEXT       = 57381
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57383
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -99
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		'?':        1,
		':':        1,
		OROR:       2,
		ANDAND:     3,
		IDENT:      4,
		'~':        5,
		EQEQ:       6,
		NEQ:        6,
		'>':        7,
		'<':        7,
		GE:         7,
		LE:         7,
		CONCAT_OP:  8,
		'+':        9,
		'-':        9,
		'*':        10,
		'/':        10,
		'%':        10,
		'!':        11,
		UNARY:      11,
		PLUSPLUS:   12,
		MINUSMINUS: 12,
		'$':        13,
		'(':        14,
		')':        14,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (136x)
		43:    1,  // '+' (132x)
		45:    2,  // '-' (132x)
		57360: 3,  // MINUSMINUS (132x)
		57359: 4,  // PLUSPLUS (132x)
		59:    5,  // ';' (110x)
		125:   6,  // '}' (102x)
		57346: 7,  // IDENT (80x)
		57370: 8,  // REGEXP (76x)
		33:    9,  // '!' (74x)
		36:    10, // '$' (74x)
		57350: 11, // FALSE (74x)
		57378: 12, // FUNC (74x)
		57351: 13, // NIL (74x)
		57347: 14, // NUMBER (74x)
		57348: 15, // STRING (74x)
		57349: 16, // TRUE (74x)
		123:   17, // '{' (73x)
		37:    18, // '%' (58x)
		41:    19, // ')' (58x)
		42:    20, // '*' (58x)
		44:    21, // ',' (58x)
		47:    22, // '/' (58x)
		60:    23, // '<' (58x)
		62:    24, // '>' (58x)
		63:    25, // '?' (58x)
		57356: 26, // ANDAND (58x)
		57352: 27, // EQEQ (58x)
		57354: 28, // GE (58x)
		57355: 29, // LE (58x)
		57353: 30, // NEQ (58x)
		57357: 31, // OROR (58x)
		57386: 32, // expr (47x)
		57400: 33, // simp_expr (47x)
		57405: 34, // variable (47x)
		61:    35, // '=' (46x)
		91:    36, // '[' (44x)
		93:    37, // ']' (44x)
		126:   38, // '~' (44x)
		57364: 39, // DIVEQ (43x)
		57362: 40, // MINUSEQ (43x)
		57363: 41, // MULEQ (43x)
		57361: 42, // PLUSEQ (43x)
		58:    43, // ':' (42x)
		57371: 44, // IF (24x)
		57374: 45, // WHILE (24x)
		57376: 46, // BREAK (23x)
		57377: 47, // CONTINUE (23x)
		57365: 48, // DELETE (23x)
		57375: 49, // DO (23x)
		57380: 50, // EXIT (23x)
		57373: 51, // FOR (23x)
		57381: 52, // NEXT (23x)
		57369: 53, // PRINT (23x)
		57379: 54, // RETURN (23x)
		57399: 55, // semi (17x)
		57404: 56, // term (15x)
		57395: 57, // opt_term (14x)
		57394: 58, // opt_stmts (12x)
		57403: 59, // stmts (12x)
		57344: 60, // $end (11x)
		57367: 61, // BEGIN (11x)
		57368: 62, // END (11x)
		57387: 63, // exprs (9x)
		10:    64, // '\n' (7x)
		57372: 65, // ELSE (4x)
		57389: 66, // nls (3x)
		57390: 67, // opt_expr (3x)
		57391: 68, // opt_exprs (3x)
		57392: 69, // opt_nls (3x)
		57401: 70, // stmt (3x)
		57402: 71, // stmt_if (3x)
		57388: 72, // ident_args (2x)
		57385: 73, // action (1x)
		57366: 74, // IN (1x)
		57393: 75, // opt_stmt (1x)
		57396: 76, // pattern (1x)
		57397: 77, // program (1x)
		57398: 78, // rule (1x)
		57384: 79, // $default (0x)
		57382: 80, // CONCAT_OP (0x)
		57345: 81, // error (0x)
		57358: 82, // LEN (0x)
		57383: 83, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"';'",
		"'}'",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'{'",
		"'%'",
		"')'",
		"'*'",
		"','",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"expr",
		"simp_expr",
		"variable",
		"'='",
		"'['",
		"']'",
		"'~'",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"':'",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"EXIT",
		"FOR",
		"NEXT",
		"PRINT",
		"RETURN",
		"semi",
		"term",
		"opt_term",
		"opt_stmts",
		"stmts",
		"$end",
		"BEGIN",
		"END",
		"exprs",
		"'\\n'",
		"ELSE",
		"nls",
		"opt_expr",
		"opt_exprs",
		"opt_nls",
		"stmt",
		"stmt_if",
		"ident_args",
		"action",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {77, 0},
		2:  {77, 2},
		3:  {78, 3},
		4:  {78, 2},
		5:  {76, 0},
		6:  {76, 5},
		7:  {76, 1},
		8:  {76, 1},
		9:  {76, 1},
		10: {76, 3},
		11: {73, 3},
		12: {58, 0},
		13: {58, 2},
		14: {59, 2},
		15: {59, 4},
		16: {70, 3},
		17: {70, 3},
		18: {70, 1},
		19: {70, 2},
		20: {70, 1},
		21: {70, 2},
		22: {70, 1},
		23: {70, 4},
		24: {70, 5},
		25: {70, 9},
		26: {70, 4},
		27: {70, 5},
		28: {70, 8},
		29: {70, 1},
		30: {70, 1},
		31: {70, 1},
		32: {70, 9},
		33: {70, 2},
		34: {70, 2},
		35: {71, 5},
		36: {71, 7},
		37: {71, 5},
		38: {68, 0},
		39: {68, 1},
		40: {63, 1},
		41: {63, 4},
		42: {32, 1},
		43: {32, 7},
		44: {32, 3},
		45: {32, 3},
		46: {32, 3},
		47: {32, 3},
		48: {32, 3},
		49: {32, 3},
		50: {32, 3},
		51: {32, 3},
		52: {32, 3},
		53: {32, 3},
		54: {32, 3},
		55: {32, 3},
		56: {33, 1},
		57: {33, 1},
		58: {33, 1},
		59: {33, 1},
		60: {33, 1},
		61: {33, 1},
		62: {33, 3},
		63: {33, 1},
		64: {33, 5},
		65: {33, 4},
		66: {33, 4},
		67: {33, 2},
		68: {33, 2},
		69: {33, 2},
		70: {33, 2},
		71: {33, 2},
		72: {33, 2},
		73: {33, 2},
		74: {33, 3},
		75: {33, 3},
		76: {33, 3},
		77: {33, 3},
		78: {33, 3},
		79: {33, 3},
		80: {34, 1},
		81: {34, 2},
		82: {34, 4},
		83: {72, 0},
		84: {72, 1},
		85: {72, 4},
		86: {75, 0},
		87: {75, 1},
		88: {67, 0},
		89: {67, 1},
		90: {57, 0},
		91: {57, 1},
		92: {56, 1},
		93: {56, 2},
		94: {55, 1},
		95: {69, 0},
		96: {69, 1},
		97: {66, 1},
		98: {66, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [201][]uint16{
		// 0
		{98, 98, 98, 98, 98, 98, 7: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 60: 98, 98, 98, 77: 100},
		{121, 118, 119, 117, 116, 94, 7: 115, 107, 120, 122, 112, 103, 113, 110, 114, 111, 94, 32: 106, 108, 109, 60: 99, 104, 105, 76: 102, 78: 101},
		{97, 97, 97, 97, 97, 97, 7: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 60: 97, 97, 97},
		{5: 182, 17: 296, 55: 181, 295, 73: 294},
		{169, 7: 290},
		// 5
		{5: 92, 17: 92},
		{5: 91, 17: 91},
		{135, 138, 139, 137, 136, 90, 17: 90, 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{36, 36, 36, 36, 36, 36, 17: 36, 36, 20: 36, 288, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36: 36, 38: 36},
		{57, 57, 57, 57, 57, 57, 57, 17: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 35: 57, 284, 57, 283, 57, 57, 57, 57, 57},
		// 10
		{43, 43, 43, 43, 43, 43, 43, 17: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 35: 43, 43, 43, 43, 268, 266, 267, 265, 43},
		{42, 42, 42, 42, 42, 42, 42, 17: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 35: 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 17: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 35: 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 17: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 35: 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 17: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 35: 39, 39, 39, 39, 39, 39, 39, 39, 39},
		// 15
		{38, 38, 38, 38, 38, 38, 38, 17: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 35: 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{231, 19, 19, 19, 19, 19, 19, 17: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 35: 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 282, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 281, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 280, 108, 109},
		// 20
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 279, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 278, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 228, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 124, 108, 109},
		{169},
		// 25
		{135, 18, 18, 18, 18, 18, 18, 17: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 35: 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{36, 36, 36, 36, 36, 36, 36, 17: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 35: 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 168, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 167, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 166, 108, 109},
		// 30
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 165, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 164, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 163, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 162, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 161, 108, 109},
		// 35
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 158, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 19: 61, 32: 149, 108, 109, 63: 148, 68: 150},
		{31, 31, 31, 31, 31, 31, 31, 17: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 35: 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{29, 29, 29, 29, 29, 29, 29, 17: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 35: 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 147, 108, 109},
		// 40
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 146, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 145, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 144, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 143, 108, 109},
		{135, 20, 20, 137, 136, 20, 20, 17: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 35: 20, 20, 20, 20, 20, 20, 20, 20, 20},
		// 45
		{135, 21, 21, 137, 136, 21, 21, 17: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 35: 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{135, 22, 22, 137, 136, 22, 22, 17: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 35: 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{135, 23, 23, 137, 136, 23, 23, 17: 23, 142, 23, 140, 23, 141, 23, 23, 23, 23, 23, 23, 23, 23, 23, 35: 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{135, 24, 24, 137, 136, 24, 24, 17: 24, 142, 24, 140, 24, 141, 24, 24, 24, 24, 24, 24, 24, 24, 24, 35: 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{5: 60, 60, 19: 60, 21: 152},
		// 50
		{135, 138, 139, 137, 136, 59, 59, 18: 142, 59, 140, 59, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 37: 59},
		{19: 151},
		{33, 33, 33, 33, 33, 33, 33, 17: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 35: 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{4, 4, 4, 4, 4, 7: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 64: 155, 66: 154, 69: 153},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 157, 108, 109},
		// 55
		{3, 3, 3, 3, 3, 7: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 44: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 64: 156},
		{2, 2, 2, 2, 2, 7: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 44: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 64: 2},
		{1, 1, 1, 1, 1, 7: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 44: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 64: 1},
		{135, 138, 139, 137, 136, 58, 58, 18: 142, 58, 140, 58, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 58, 37: 58},
		{135, 138, 139, 137, 136, 18: 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 43: 159},
		// 60
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 160, 108, 109},
		{135, 138, 139, 137, 136, 35, 35, 17: 35, 142, 35, 140, 35, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{135, 138, 139, 137, 136, 44, 44, 17: 44, 142, 44, 140, 44, 141, 130, 128, 44, 44, 126, 129, 131, 127, 44, 35: 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{135, 138, 139, 137, 136, 45, 45, 17: 45, 142, 45, 140, 45, 141, 130, 128, 45, 133, 126, 129, 131, 127, 45, 35: 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{135, 138, 139, 137, 136, 46, 46, 17: 46, 142, 46, 140, 46, 141, 46, 46, 46, 46, 46, 46, 46, 46, 46, 35: 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 65
		{135, 138, 139, 137, 136, 47, 47, 17: 47, 142, 47, 140, 47, 141, 47, 47, 47, 47, 47, 47, 47, 47, 47, 35: 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{135, 138, 139, 137, 136, 48, 48, 17: 48, 142, 48, 140, 48, 141, 48, 48, 48, 48, 48, 48, 48, 48, 48, 35: 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{135, 138, 139, 137, 136, 49, 49, 17: 49, 142, 49, 140, 49, 141, 49, 49, 49, 49, 49, 49, 49, 49, 49, 35: 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{135, 138, 139, 137, 136, 50, 50, 17: 50, 142, 50, 140, 50, 141, 130, 128, 50, 50, 50, 129, 131, 50, 50, 35: 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{135, 138, 139, 137, 136, 51, 51, 17: 51, 142, 51, 140, 51, 141, 130, 128, 51, 51, 51, 129, 131, 51, 51, 35: 51, 51, 51, 51, 51, 51, 51, 51, 51},
		// 70
		{7: 171, 19: 16, 21: 16, 72: 170},
		{19: 172, 21: 173},
		{19: 15, 21: 15},
		{17: 176},
		{7: 4, 64: 155, 66: 154, 69: 174},
		// 75
		{7: 175},
		{19: 14, 21: 14},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 179, 177},
		{5: 182, 9, 55: 275, 180, 274},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 188, 108, 186, 44: 200, 193, 195, 196, 189, 194, 199, 192, 197, 190, 198, 63: 187, 70: 185, 191},
		// 80
		{6: 184},
		{8, 8, 8, 8, 8, 182, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 44: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 183, 60: 8, 8, 8},
		{7, 7, 7, 7, 7, 7, 7: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 44: 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 60: 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 44: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 60: 5, 5, 5, 64: 5},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 44: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 60: 6, 6, 6},
		// 85
		{56, 56, 56, 56, 56, 56, 56, 17: 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 35: 56, 56, 56, 56, 56, 56, 56, 56, 56},
		{5: 85, 85},
		{43, 43, 43, 43, 43, 43, 43, 17: 43, 43, 20: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 35: 264, 43, 38: 43, 268, 266, 267, 265},
		{21: 152, 35: 262},
		{135, 138, 139, 137, 136, 81, 81, 18: 142, 20: 140, 59, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 59},
		// 90
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 261, 108, 109},
		{121, 118, 119, 117, 116, 79, 79, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 149, 108, 109, 63: 260},
		{5: 77, 77, 65: 251},
		{225, 118, 119, 117, 116, 13, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 223, 32: 222, 108, 186, 44: 200, 193, 195, 196, 189, 194, 199, 192, 197, 190, 198, 63: 187, 70: 226, 191, 75: 224},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 215, 32: 216, 108, 109},
		// 95
		{17: 208},
		{5: 70, 70},
		{5: 69, 69},
		{5: 68, 68},
		{121, 118, 119, 117, 116, 61, 61, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 149, 108, 109, 63: 148, 68: 207},
		// 100
		{121, 118, 119, 117, 116, 11, 11, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 206, 108, 109, 67: 205},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 201, 108, 109},
		{135, 138, 139, 137, 136, 17: 202, 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 203, 177},
		{6: 204},
		// 105
		{5: 64, 64, 65: 64},
		{5: 65, 65},
		{135, 138, 139, 137, 136, 10, 10, 17: 10, 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{5: 66, 66},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 209, 177},
		// 110
		{6: 210},
		{45: 211},
		{212},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 213, 108, 109},
		{135, 138, 139, 137, 136, 18: 142, 214, 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		// 115
		{5: 71, 71},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 220, 177},
		{135, 138, 139, 137, 136, 17: 217, 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 218, 177},
		{6: 219},
		// 120
		{5: 72, 72},
		{6: 221},
		{5: 73, 73},
		{135, 138, 139, 137, 136, 81, 17: 248, 142, 20: 140, 59, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 59},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 246, 177},
		// 125
		{5: 239},
		{121, 118, 119, 117, 116, 7: 227, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 228, 108, 109},
		{5: 12},
		{231, 19, 19, 19, 19, 18: 19, 19, 19, 22: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 36: 19, 38: 19, 19, 19, 19, 19, 74: 230},
		{135, 138, 139, 137, 136, 18: 142, 229, 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		// 130
		{25, 25, 25, 25, 25, 25, 25, 17: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 35: 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{7: 234},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 19: 61, 32: 149, 108, 109, 63: 148, 68: 232},
		{19: 233},
		{34, 34, 34, 34, 34, 34, 34, 17: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35: 34, 34, 34, 34, 34, 34, 34, 34, 34},
		// 135
		{19: 235},
		{17: 236},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 237, 177},
		{6: 238},
		{5: 67, 67},
		// 140
		{121, 118, 119, 117, 116, 11, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 206, 108, 109, 67: 240},
		{5: 241},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 11, 32: 206, 108, 109, 67: 242},
		{17: 243},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 244, 177},
		// 145
		{6: 245},
		{5: 74, 74},
		{6: 247},
		{5: 76, 76},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 249, 177},
		// 150
		{6: 250},
		{5: 75, 75},
		{17: 253, 44: 252},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 256, 108, 109},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 254, 177},
		// 155
		{6: 255},
		{5: 62, 62, 65: 62},
		{135, 138, 139, 137, 136, 17: 257, 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 258, 177},
		{6: 259},
		// 160
		{5: 63, 63, 65: 63},
		{5: 78, 78, 21: 152},
		{135, 138, 139, 137, 136, 80, 80, 18: 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 149, 108, 109, 63: 263},
		{5: 82, 82, 21: 152},
		// 165
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 273, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 272, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 271, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 270, 108, 109},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 269, 108, 109},
		// 170
		{135, 138, 139, 137, 136, 52, 52, 17: 52, 142, 52, 140, 52, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{135, 138, 139, 137, 136, 53, 53, 17: 53, 142, 53, 140, 53, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 53, 53, 53, 53, 53, 53, 53, 53, 53},
		{135, 138, 139, 137, 136, 54, 54, 17: 54, 142, 54, 140, 54, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{135, 138, 139, 137, 136, 55, 55, 17: 55, 142, 55, 140, 55, 141, 130, 128, 134, 133, 126, 129, 131, 127, 132, 35: 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{135, 138, 139, 137, 136, 83, 83, 18: 142, 20: 140, 22: 141, 130, 128, 134, 133, 126, 129, 131, 127, 132},
		// 175
		{6: 86},
		{4, 4, 4, 4, 4, 7, 7, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 44: 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 64: 155, 66: 154, 69: 276},
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 188, 108, 186, 44: 200, 193, 195, 196, 189, 194, 199, 192, 197, 190, 198, 63: 187, 70: 277, 191},
		{5: 84, 84},
		{135, 26, 26, 137, 136, 26, 26, 17: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 35: 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 180
		{135, 27, 27, 137, 136, 27, 27, 17: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 35: 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{135, 28, 28, 137, 136, 28, 28, 17: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 35: 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{135, 30, 30, 30, 30, 30, 30, 17: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 35: 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{135, 32, 32, 32, 32, 32, 32, 17: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 35: 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{8: 287},
		// 185
		{121, 118, 119, 117, 116, 7: 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 32: 149, 108, 109, 63: 285},
		{21: 152, 37: 286},
		{17, 17, 17, 17, 17, 17, 17, 17: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 35: 17, 17, 17, 17, 17, 17, 17, 17, 17},
		{37, 37, 37, 37, 37, 37, 37, 17: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 35: 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{8: 289},
		// 190
		{5: 89, 17: 89},
		{291},
		{7: 171, 19: 16, 21: 16, 72: 292},
		{19: 293, 21: 173},
		{5: 93, 17: 93},
		// 195
		{9, 9, 9, 9, 9, 182, 7: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 55: 181, 180, 299, 60: 9, 9, 9},
		{95, 95, 95, 95, 95, 182, 7: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 55: 183, 60: 95, 95, 95},
		{9, 9, 9, 9, 9, 182, 87, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 44: 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 181, 180, 178, 297, 177},
		{6: 298},
		{88, 88, 88, 88, 88, 88, 7: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 60: 88, 88, 88},
		// 200
		{96, 96, 96, 96, 96, 96, 7: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 60: 96, 96, 96},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 81

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: yyS[yypt-1].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 17:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 18:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 21:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 22:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 25:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 27:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.NextStmt{}
		}
	case 32:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 33:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 34:
		{
			yyVAL.stmt = &ast.ExitStmt{Expr: yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 36:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 37:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 39:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 40:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 42:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 43:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 57:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 58:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 59:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 60:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 61:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 62:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 63:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 64:
		{
			yyVAL.expr = &ast.TriOpExpr{Cond: yyS[yypt-4].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 66:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 67:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 68:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 69:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 70:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 71:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 78:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 79:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 80:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 81:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 82:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 83:
		{
			yyVAL.ident_args = []string{}
		}
	case 84:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 85:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 86:
		{
			yyVAL.stmt = nil
		}
	case 87:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 88:
		{
			yyVAL.expr = nil
		}
	case 89:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
