// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57382
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57380
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57381
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -92
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		CONCAT_OP:  7,
		'+':        8,
		'-':        8,
		'*':        9,
		'/':        9,
		'%':        9,
		'!':        10,
		UNARY:      10,
		PLUSPLUS:   11,
		MINUSMINUS: 11,
		'$':        12,
		'(':        13,
		')':        13,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (166x)
		43:    1,  // '+' (162x)
		45:    2,  // '-' (162x)
		57360: 3,  // MINUSMINUS (162x)
		57359: 4,  // PLUSPLUS (162x)
		57346: 5,  // IDENT (160x)
		57370: 6,  // REGEXP (156x)
		33:    7,  // '!' (154x)
		36:    8,  // '$' (154x)
		57350: 9,  // FALSE (154x)
		57378: 10, // FUNC (154x)
		57351: 11, // NIL (154x)
		57347: 12, // NUMBER (154x)
		57348: 13, // STRING (154x)
		57349: 14, // TRUE (154x)
		57371: 15, // IF (99x)
		57374: 16, // WHILE (99x)
		57376: 17, // BREAK (98x)
		57377: 18, // CONTINUE (98x)
		57365: 19, // DELETE (98x)
		57375: 20, // DO (98x)
		57373: 21, // FOR (98x)
		57369: 22, // PRINT (98x)
		57379: 23, // RETURN (98x)
		125:   24, // '}' (97x)
		10:    25, // '\n' (84x)
		59:    26, // ';' (81x)
		123:   27, // '{' (76x)
		57344: 28, // $end (62x)
		57367: 29, // BEGIN (62x)
		57368: 30, // END (62x)
		41:    31, // ')' (57x)
		44:    32, // ',' (57x)
		37:    33, // '%' (56x)
		42:    34, // '*' (56x)
		47:    35, // '/' (56x)
		60:    36, // '<' (56x)
		62:    37, // '>' (56x)
		91:    38, // '[' (56x)
		57356: 39, // ANDAND (56x)
		57352: 40, // EQEQ (56x)
		57354: 41, // GE (56x)
		57355: 42, // LE (56x)
		57353: 43, // NEQ (56x)
		57357: 44, // OROR (56x)
		57384: 45, // expr (54x)
		57397: 46, // simp_expr (54x)
		57401: 47, // variable (54x)
		61:    48, // '=' (45x)
		93:    49, // ']' (43x)
		126:   50, // '~' (43x)
		57364: 51, // DIVEQ (42x)
		57362: 52, // MINUSEQ (42x)
		57363: 53, // MULEQ (42x)
		57361: 54, // PLUSEQ (42x)
		57385: 55, // exprs (19x)
		57398: 56, // stmt (13x)
		57399: 57, // stmt_if (13x)
		57400: 58, // stmts (12x)
		57387: 59, // nls (5x)
		57390: 60, // opt_nls (5x)
		57372: 61, // ELSE (4x)
		57389: 62, // opt_exprs (3x)
		57391: 63, // opt_semi (3x)
		57396: 64, // semi (3x)
		57383: 65, // action (2x)
		57386: 66, // ident_args (2x)
		57388: 67, // opt_expr (2x)
		57366: 68, // IN (1x)
		57392: 69, // opt_stmt (1x)
		57393: 70, // pattern (1x)
		57394: 71, // program (1x)
		57395: 72, // rule (1x)
		57382: 73, // $default (0x)
		57380: 74, // CONCAT_OP (0x)
		57345: 75, // error (0x)
		57358: 76, // LEN (0x)
		57381: 77, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"'}'",
		"'\\n'",
		"';'",
		"'{'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"expr",
		"simp_expr",
		"variable",
		"'='",
		"']'",
		"'~'",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"nls",
		"opt_nls",
		"ELSE",
		"opt_exprs",
		"opt_semi",
		"semi",
		"action",
		"ident_args",
		"opt_expr",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {71, 0},
		2:  {71, 2},
		3:  {72, 2},
		4:  {72, 3},
		5:  {72, 1},
		6:  {70, 5},
		7:  {70, 1},
		8:  {70, 1},
		9:  {70, 1},
		10: {70, 3},
		11: {65, 5},
		12: {58, 0},
		13: {58, 4},
		14: {56, 3},
		15: {56, 3},
		16: {56, 1},
		17: {56, 2},
		18: {56, 1},
		19: {56, 2},
		20: {56, 1},
		21: {56, 4},
		22: {56, 5},
		23: {56, 9},
		24: {56, 4},
		25: {56, 5},
		26: {56, 8},
		27: {56, 1},
		28: {56, 1},
		29: {56, 9},
		30: {56, 2},
		31: {57, 5},
		32: {57, 7},
		33: {57, 5},
		34: {62, 0},
		35: {62, 1},
		36: {55, 1},
		37: {55, 4},
		38: {45, 1},
		39: {45, 7},
		40: {45, 3},
		41: {45, 3},
		42: {45, 3},
		43: {45, 3},
		44: {45, 3},
		45: {45, 3},
		46: {45, 3},
		47: {45, 3},
		48: {45, 3},
		49: {45, 3},
		50: {45, 3},
		51: {45, 3},
		52: {46, 1},
		53: {46, 1},
		54: {46, 1},
		55: {46, 1},
		56: {46, 1},
		57: {46, 1},
		58: {46, 3},
		59: {46, 1},
		60: {46, 4},
		61: {46, 4},
		62: {46, 2},
		63: {46, 2},
		64: {46, 2},
		65: {46, 2},
		66: {46, 2},
		67: {46, 2},
		68: {46, 2},
		69: {46, 3},
		70: {46, 3},
		71: {46, 3},
		72: {46, 3},
		73: {46, 3},
		74: {46, 3},
		75: {47, 1},
		76: {47, 2},
		77: {47, 4},
		78: {66, 0},
		79: {66, 1},
		80: {66, 4},
		81: {59, 1},
		82: {59, 2},
		83: {69, 0},
		84: {69, 1},
		85: {67, 0},
		86: {67, 1},
		87: {60, 0},
		88: {60, 1},
		89: {64, 1},
		90: {63, 0},
		91: {63, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [191][]uint16{
		// 0
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 27: 91, 91, 91, 91, 71: 93},
		{116, 113, 114, 112, 111, 110, 101, 115, 117, 107, 97, 108, 105, 109, 106, 27: 102, 92, 98, 99, 45: 100, 103, 104, 65: 96, 70: 95, 72: 94},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 27: 90, 90, 90, 90},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25: 2, 260, 102, 2, 2, 2, 63: 281, 261, 280},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 27: 87, 87, 87, 87},
		// 5
		{163, 5: 276},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 25: 85, 85, 85, 85, 85, 85},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 25: 84, 84, 84, 84, 84, 84},
		{129, 132, 133, 131, 130, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 25: 83, 83, 83, 83, 83, 83, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 25: 33, 33, 33, 33, 33, 33, 32: 274, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 50: 33},
		// 10
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 270},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 48: 54, 54, 268, 54, 54, 54, 54},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48: 40, 40, 40, 253, 251, 252, 250},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 48: 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 48: 38, 38, 38, 38, 38, 38, 38},
		// 15
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 48: 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 48: 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 48: 35, 35, 35, 35, 35, 35, 35},
		{215, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 48: 17, 17, 17, 17, 17, 17, 17},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 267, 103, 104},
		// 20
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 266, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 265, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 264, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 263, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 212, 103, 104},
		// 25
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 119, 103, 104},
		{163},
		{129, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 137, 16, 16, 16, 16, 16, 16, 48: 16, 16, 16, 16, 16, 16, 16},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 48: 33, 33, 33, 33, 33, 33, 33},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 162, 103, 104},
		// 30
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 161, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 160, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 159, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 158, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 157, 103, 104},
		// 35
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 156, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 155, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 31: 58, 45: 138, 103, 104, 55: 152, 62: 153},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 48: 29, 29, 29, 29, 29, 29, 29},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 48: 27, 27, 27, 27, 27, 27, 27},
		// 40
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 151, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 150, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 149, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 148, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 147, 103, 104},
		// 45
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 138, 103, 104, 55: 139},
		{129, 132, 133, 131, 130, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 31: 56, 56, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 49: 56},
		{32: 140, 49: 141},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 143, 59: 144, 142},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 48: 15, 15, 15, 15, 15, 15, 15},
		// 50
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 146, 103, 104},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 27: 11, 11, 11, 11},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 145, 27: 4, 4, 4, 4},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 27: 10, 10, 10, 10},
		{129, 132, 133, 131, 130, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 31: 55, 55, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 55, 55},
		// 55
		{129, 18, 18, 131, 130, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 137, 18, 18, 18, 18, 18, 18, 48: 18, 18, 18, 18, 18, 18, 18},
		{129, 19, 19, 131, 130, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 137, 19, 19, 19, 19, 19, 19, 48: 19, 19, 19, 19, 19, 19, 19},
		{129, 20, 20, 131, 130, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 137, 20, 20, 20, 20, 20, 20, 48: 20, 20, 20, 20, 20, 20, 20},
		{129, 21, 21, 131, 130, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 136, 134, 135, 21, 21, 137, 21, 21, 21, 21, 21, 21, 48: 21, 21, 21, 21, 21, 21, 21},
		{129, 22, 22, 131, 130, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 136, 134, 135, 22, 22, 137, 22, 22, 22, 22, 22, 22, 48: 22, 22, 22, 22, 22, 22, 22},
		// 60
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 31: 57, 140},
		{31: 154},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 48: 31, 31, 31, 31, 31, 31, 31},
		{129, 132, 133, 131, 130, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 136, 134, 135, 125, 123, 137, 41, 121, 124, 126, 122, 41, 48: 41, 41, 41, 41, 41, 41, 41},
		{129, 132, 133, 131, 130, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 42, 48: 42, 42, 42, 42, 42, 42, 42},
		// 65
		{129, 132, 133, 131, 130, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 136, 134, 135, 43, 43, 137, 43, 43, 43, 43, 43, 43, 48: 43, 43, 43, 43, 43, 43, 43},
		{129, 132, 133, 131, 130, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 136, 134, 135, 44, 44, 137, 44, 44, 44, 44, 44, 44, 48: 44, 44, 44, 44, 44, 44, 44},
		{129, 132, 133, 131, 130, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 136, 134, 135, 45, 45, 137, 45, 45, 45, 45, 45, 45, 48: 45, 45, 45, 45, 45, 45, 45},
		{129, 132, 133, 131, 130, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 136, 134, 135, 46, 46, 137, 46, 46, 46, 46, 46, 46, 48: 46, 46, 46, 46, 46, 46, 46},
		{129, 132, 133, 131, 130, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 136, 134, 135, 125, 123, 137, 47, 47, 124, 126, 47, 47, 48: 47, 47, 47, 47, 47, 47, 47},
		// 70
		{129, 132, 133, 131, 130, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 136, 134, 135, 125, 123, 137, 48, 48, 124, 126, 48, 48, 48: 48, 48, 48, 48, 48, 48, 48},
		{5: 165, 31: 14, 14, 66: 164},
		{31: 166, 167},
		{31: 13, 13},
		{27: 170},
		// 75
		{5: 5, 25: 143, 59: 144, 168},
		{5: 169},
		{31: 12, 12},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 171},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 186, 45: 175, 103, 173, 55: 174, 172, 178},
		// 80
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 260, 63: 259, 261},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 32: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 48: 249, 50: 40, 253, 251, 252, 250},
		{32: 140, 48: 247},
		{129, 132, 133, 131, 130, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 32: 56, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 56},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 246, 103, 104},
		// 85
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 45: 138, 103, 104, 55: 245},
		{72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 61: 236},
		{209, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 26: 9, 207, 45: 206, 103, 173, 55: 174, 210, 178, 69: 208},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 27: 199, 45: 200, 103, 104},
		{27: 192},
		// 90
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 45: 138, 103, 104, 55: 152, 62: 191},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 187, 103, 104},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 48: 53, 53, 53, 53, 53, 53, 53},
		// 95
		{129, 132, 133, 131, 130, 27: 188, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 189},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 190, 45: 175, 103, 173, 55: 174, 172, 178},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61: 61},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		// 100
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 193},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 194, 45: 175, 103, 173, 55: 174, 172, 178},
		{16: 195},
		{196},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 197, 103, 104},
		// 105
		{129, 132, 133, 131, 130, 31: 198, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 204},
		{129, 132, 133, 131, 130, 27: 201, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 202},
		// 110
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 203, 45: 175, 103, 173, 55: 174, 172, 178},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 205, 45: 175, 103, 173, 55: 174, 172, 178},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		{129, 132, 133, 131, 130, 26: 76, 233, 32: 56, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 56},
		// 115
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 231},
		{26: 223},
		{116, 113, 114, 112, 111, 211, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 212, 103, 104},
		{26: 8},
		{215, 17, 17, 17, 17, 31: 17, 33: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 50: 17, 17, 17, 17, 17, 68: 214},
		// 120
		{129, 132, 133, 131, 130, 31: 213, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 48: 23, 23, 23, 23, 23, 23, 23},
		{5: 218},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 31: 58, 45: 138, 103, 104, 55: 152, 62: 216},
		{31: 217},
		// 125
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 48: 32, 32, 32, 32, 32, 32, 32},
		{31: 219},
		{27: 220},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 221},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 222, 45: 175, 103, 173, 55: 174, 172, 178},
		// 130
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 26: 7, 45: 225, 103, 104, 67: 224},
		{26: 226},
		{129, 132, 133, 131, 130, 26: 6, 6, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 27: 7, 45: 225, 103, 104, 67: 227},
		// 135
		{27: 228},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 229},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 230, 45: 175, 103, 173, 55: 174, 172, 178},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 232, 45: 175, 103, 173, 55: 174, 172, 178},
		// 140
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 234},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 235, 45: 175, 103, 173, 55: 174, 172, 178},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70},
		{15: 237, 27: 238},
		// 145
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 241, 103, 104},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 239},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 240, 45: 175, 103, 173, 55: 174, 172, 178},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 61: 59},
		{129, 132, 133, 131, 130, 27: 242, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		// 150
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 58: 243},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 244, 45: 175, 103, 173, 55: 174, 172, 178},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 61: 60},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 32: 140},
		{129, 132, 133, 131, 130, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		// 155
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 138, 103, 104, 55: 248},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 32: 140},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 258, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 257, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 256, 103, 104},
		// 160
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 255, 103, 104},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 45: 254, 103, 104},
		{129, 132, 133, 131, 130, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 49, 49, 49, 49, 49, 49, 49},
		{129, 132, 133, 131, 130, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 50, 50, 50, 50, 50, 50, 50},
		{129, 132, 133, 131, 130, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 51, 51, 51, 51, 51, 51, 51},
		// 165
		{129, 132, 133, 131, 130, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127, 48: 52, 52, 52, 52, 52, 52, 52},
		{129, 132, 133, 131, 130, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 33: 136, 134, 135, 125, 123, 137, 128, 121, 124, 126, 122, 127},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 143, 59: 144, 262},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 27: 3, 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27: 1, 1, 1, 1},
		// 170
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79},
		{129, 24, 24, 131, 130, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 137, 24, 24, 24, 24, 24, 24, 48: 24, 24, 24, 24, 24, 24, 24},
		{129, 25, 25, 131, 130, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 137, 25, 25, 25, 25, 25, 25, 48: 25, 25, 25, 25, 25, 25, 25},
		{129, 26, 26, 131, 130, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 137, 26, 26, 26, 26, 26, 26, 48: 26, 26, 26, 26, 26, 26, 26},
		{129, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 137, 28, 28, 28, 28, 28, 28, 48: 28, 28, 28, 28, 28, 28, 28},
		// 175
		{129, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 137, 30, 30, 30, 30, 30, 30, 48: 30, 30, 30, 30, 30, 30, 30},
		{6: 269},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 48: 34, 34, 34, 34, 34, 34, 34},
		{116, 113, 114, 112, 111, 110, 120, 115, 117, 107, 118, 108, 105, 109, 106, 185, 180, 182, 183, 176, 181, 179, 177, 184, 271, 45: 175, 103, 173, 55: 174, 172, 178},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25: 2, 260, 2, 2, 2, 2, 63: 272, 261},
		// 180
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 143, 27: 5, 5, 5, 5, 59: 144, 273},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 27: 81, 81, 81, 81},
		{6: 275},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 25: 82, 82, 82, 82, 82, 82},
		{277},
		// 185
		{5: 165, 31: 14, 14, 66: 278},
		{31: 279, 167},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 25: 86, 86, 86, 86, 86, 86},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 27: 89, 89, 89, 89},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 143, 27: 5, 5, 5, 5, 59: 144, 282},
		// 190
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 27: 88, 88, 88, 88},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 75

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 14:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 15:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 20:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 21:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 23:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 26:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 28:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 31:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 32:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 33:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 34:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 35:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 38:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 39:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 40:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 53:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 54:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 55:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 56:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 57:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 58:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 59:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 60:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 61:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 62:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 63:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 64:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 65:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 66:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 67:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 76:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 78:
		{
			yyVAL.ident_args = []string{}
		}
	case 79:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 80:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 83:
		{
			yyVAL.stmt = nil
		}
	case 84:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 85:
		{
			yyVAL.expr = nil
		}
	case 86:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
