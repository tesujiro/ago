// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57386
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57368
	BREAK      = 57377
	CONCAT_OP  = 57383
	CONTINUE   = 57378
	DELETE     = 57366
	DIVEQ      = 57364
	DO         = 57376
	ELSE       = 57373
	END        = 57369
	EQEQ       = 57352
	EXIT       = 57381
	FALSE      = 57350
	FOR        = 57374
	FUNC       = 57379
	GE         = 57354
	IDENT      = 57346
	IF         = 57372
	IN         = 57367
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MODEQ      = 57365
	MULEQ      = 57363
	NEQ        = 57353
	NEXT       = 57382
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57370
	REGEXP     = 57371
	RETURN     = 57380
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57385
	WHILE      = 57375
	yyErrCode  = 57345
	vars       = 57384

	yyMaxDepth = 200
	yyTabOfs   = -104
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		MODEQ:      0,
		'?':        1,
		':':        1,
		IN:         2,
		OROR:       3,
		ANDAND:     4,
		',':        5,
		vars:       5,
		'~':        6,
		EQEQ:       7,
		NEQ:        7,
		'>':        8,
		'<':        8,
		GE:         8,
		LE:         8,
		CONCAT_OP:  9,
		STRING:     10,
		NUMBER:     10,
		'+':        11,
		'-':        11,
		'*':        12,
		'/':        12,
		'%':        12,
		'!':        13,
		UNARY:      13,
		PLUSPLUS:   14,
		MINUSMINUS: 14,
		'$':        15,
		'[':        16,
		'(':        17,
		')':        17,
	}

	yyXLAT = map[int]int{
		57346: 0,  // IDENT (126x)
		40:    1,  // '(' (125x)
		33:    2,  // '!' (119x)
		36:    3,  // '$' (119x)
		57350: 4,  // FALSE (119x)
		57379: 5,  // FUNC (119x)
		57360: 6,  // MINUSMINUS (119x)
		57351: 7,  // NIL (119x)
		57347: 8,  // NUMBER (119x)
		57359: 9,  // PLUSPLUS (119x)
		57348: 10, // STRING (119x)
		57349: 11, // TRUE (119x)
		43:    12, // '+' (118x)
		45:    13, // '-' (118x)
		59:    14, // ';' (118x)
		57371: 15, // REGEXP (118x)
		125:   16, // '}' (110x)
		123:   17, // '{' (83x)
		41:    18, // ')' (66x)
		44:    19, // ',' (65x)
		63:    20, // '?' (65x)
		57356: 21, // ANDAND (65x)
		57357: 22, // OROR (65x)
		93:    23, // ']' (52x)
		58:    24, // ':' (50x)
		57393: 25, // non_post_simp_expr (50x)
		57404: 26, // simple_variable (50x)
		57409: 27, // variable (50x)
		57403: 28, // simp_expr (48x)
		37:    29, // '%' (42x)
		42:    30, // '*' (42x)
		47:    31, // '/' (42x)
		60:    32, // '<' (42x)
		62:    33, // '>' (42x)
		126:   34, // '~' (42x)
		57352: 35, // EQEQ (42x)
		57354: 36, // GE (42x)
		57367: 37, // IN (42x)
		57355: 38, // LE (42x)
		57353: 39, // NEQ (42x)
		61:    40, // '=' (41x)
		91:    41, // '[' (41x)
		57364: 42, // DIVEQ (39x)
		57362: 43, // MINUSEQ (39x)
		57365: 44, // MODEQ (39x)
		57363: 45, // MULEQ (39x)
		57361: 46, // PLUSEQ (39x)
		57388: 47, // common_expr (31x)
		57389: 48, // expr (31x)
		57402: 49, // semi (22x)
		57372: 50, // IF (21x)
		57375: 51, // WHILE (21x)
		57377: 52, // BREAK (20x)
		57378: 53, // CONTINUE (20x)
		57366: 54, // DELETE (20x)
		57376: 55, // DO (20x)
		57381: 56, // EXIT (20x)
		57374: 57, // FOR (20x)
		57382: 58, // NEXT (20x)
		57370: 59, // PRINT (20x)
		57380: 60, // RETURN (20x)
		57408: 61, // term (20x)
		57398: 62, // opt_term (19x)
		57344: 63, // $end (13x)
		57368: 64, // BEGIN (13x)
		57369: 65, // END (13x)
		57397: 66, // opt_stmts (12x)
		57407: 67, // stmts (12x)
		57390: 68, // exprs (6x)
		57373: 69, // ELSE (4x)
		57392: 70, // multi_val_expr (3x)
		57394: 71, // opt_expr (3x)
		57395: 72, // opt_exprs (3x)
		57405: 73, // stmt (3x)
		57406: 74, // stmt_if (3x)
		57410: 75, // variables (3x)
		57387: 76, // action (2x)
		57391: 77, // ident_args (2x)
		57396: 78, // opt_stmt (1x)
		57399: 79, // pattern (1x)
		57400: 80, // program (1x)
		57401: 81, // rule (1x)
		57386: 82, // $default (0x)
		57383: 83, // CONCAT_OP (0x)
		57345: 84, // error (0x)
		57358: 85, // LEN (0x)
		57385: 86, // UNARY (0x)
		57384: 87, // vars (0x)
	}

	yySymNames = []string{
		"IDENT",
		"'('",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"MINUSMINUS",
		"NIL",
		"NUMBER",
		"PLUSPLUS",
		"STRING",
		"TRUE",
		"'+'",
		"'-'",
		"';'",
		"REGEXP",
		"'}'",
		"'{'",
		"')'",
		"','",
		"'?'",
		"ANDAND",
		"OROR",
		"']'",
		"':'",
		"non_post_simp_expr",
		"simple_variable",
		"variable",
		"simp_expr",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'~'",
		"EQEQ",
		"GE",
		"IN",
		"LE",
		"NEQ",
		"'='",
		"'['",
		"DIVEQ",
		"MINUSEQ",
		"MODEQ",
		"MULEQ",
		"PLUSEQ",
		"common_expr",
		"expr",
		"semi",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"EXIT",
		"FOR",
		"NEXT",
		"PRINT",
		"RETURN",
		"term",
		"opt_term",
		"$end",
		"BEGIN",
		"END",
		"opt_stmts",
		"stmts",
		"exprs",
		"ELSE",
		"multi_val_expr",
		"opt_expr",
		"opt_exprs",
		"stmt",
		"stmt_if",
		"variables",
		"action",
		"ident_args",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
		"vars",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {80, 0},
		2:   {80, 2},
		3:   {81, 3},
		4:   {81, 2},
		5:   {81, 2},
		6:   {79, 5},
		7:   {79, 1},
		8:   {79, 1},
		9:   {79, 1},
		10:  {79, 3},
		11:  {76, 3},
		12:  {66, 0},
		13:  {66, 2},
		14:  {67, 2},
		15:  {67, 4},
		16:  {73, 1},
		17:  {73, 1},
		18:  {73, 2},
		19:  {73, 1},
		20:  {73, 2},
		21:  {73, 1},
		22:  {73, 4},
		23:  {73, 5},
		24:  {73, 9},
		25:  {73, 4},
		26:  {73, 5},
		27:  {73, 8},
		28:  {73, 1},
		29:  {73, 1},
		30:  {73, 1},
		31:  {73, 9},
		32:  {73, 2},
		33:  {73, 2},
		34:  {74, 5},
		35:  {74, 7},
		36:  {74, 5},
		37:  {70, 3},
		38:  {72, 0},
		39:  {72, 1},
		40:  {68, 1},
		41:  {68, 4},
		42:  {48, 3},
		43:  {48, 3},
		44:  {48, 3},
		45:  {48, 3},
		46:  {48, 3},
		47:  {48, 3},
		48:  {48, 5},
		49:  {48, 3},
		50:  {48, 3},
		51:  {48, 1},
		52:  {47, 1},
		53:  {47, 2},
		54:  {28, 1},
		55:  {28, 3},
		56:  {28, 3},
		57:  {28, 3},
		58:  {28, 3},
		59:  {28, 3},
		60:  {28, 3},
		61:  {28, 3},
		62:  {28, 3},
		63:  {28, 3},
		64:  {28, 3},
		65:  {28, 3},
		66:  {28, 3},
		67:  {28, 3},
		68:  {28, 1},
		69:  {28, 2},
		70:  {28, 2},
		71:  {25, 2},
		72:  {25, 4},
		73:  {25, 4},
		74:  {25, 7},
		75:  {25, 3},
		76:  {25, 2},
		77:  {25, 2},
		78:  {25, 1},
		79:  {25, 1},
		80:  {25, 1},
		81:  {25, 1},
		82:  {25, 1},
		83:  {25, 1},
		84:  {25, 2},
		85:  {25, 2},
		86:  {75, 1},
		87:  {75, 4},
		88:  {26, 4},
		89:  {26, 1},
		90:  {27, 1},
		91:  {27, 2},
		92:  {77, 0},
		93:  {77, 1},
		94:  {77, 4},
		95:  {78, 0},
		96:  {78, 1},
		97:  {71, 0},
		98:  {71, 1},
		99:  {62, 0},
		100: {62, 1},
		101: {61, 1},
		102: {61, 2},
		103: {49, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [214][]uint16{
		// 0
		{103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 15: 103, 17: 103, 63: 103, 103, 103, 80: 105},
		{120, 121, 119, 132, 126, 109, 123, 127, 124, 122, 128, 125, 129, 130, 15: 113, 17: 114, 25: 118, 131, 115, 117, 47: 116, 112, 63: 104, 110, 111, 76: 108, 79: 107, 81: 106},
		{102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 15: 102, 17: 102, 63: 102, 102, 102},
		{14: 144, 17: 114, 49: 143, 61: 316, 76: 315},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 17: 5, 49: 143, 61: 142, 314, 5, 5, 5},
		// 5
		{310, 136},
		{14: 97, 17: 97},
		{14: 96, 17: 96},
		{14: 95, 17: 95, 20: 177, 179, 178},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 17: 36, 19: 308, 36, 36, 36, 29: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 10
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 306, 148},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 170, 21, 174, 172, 175, 173, 171},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 53, 169, 53, 53, 53, 53, 53, 53, 53, 53, 53, 118, 131, 135, 305},
		{52, 52, 52, 52, 52, 52, 287, 52, 52, 286, 52, 52, 273, 274, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 29: 277, 275, 276, 282, 280, 285, 278, 281, 284, 283, 279},
		{50, 195, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 29: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 196, 50, 50, 50, 50, 50},
		// 15
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 304},
		{15, 237, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 29: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 234},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 303},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 302},
		// 20
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 29: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 29: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 29: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 29: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 29: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		// 25
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 301},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 272},
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 29: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 25: 133, 131, 135},
		{13, 195, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 29: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 196, 13, 13, 13, 13, 13},
		// 30
		{1: 136},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 29: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{138, 18: 12, 12, 77: 137},
		{18: 139, 140},
		{18: 11, 11},
		// 35
		{17: 147},
		{5, 14: 144, 49: 143, 61: 142, 141},
		{146},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 144, 4, 4, 4, 49: 145, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 63: 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 17: 3, 50: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 63: 3, 3, 3},
		// 40
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 50: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 63: 1, 1, 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 50: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 63: 2, 2, 2},
		{18: 10, 10},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 150, 148},
		{14: 144, 16: 5, 49: 269, 61: 142, 268},
		// 45
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 168, 117, 47: 116, 153, 50: 166, 159, 161, 162, 155, 160, 165, 158, 163, 156, 164, 70: 154, 73: 152, 157, 167},
		{16: 151},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 29: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{14: 90, 16: 90},
		{14: 88, 16: 88, 20: 177, 179, 178},
		// 50
		{14: 87, 16: 87},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 267},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 85, 169, 85, 25: 118, 131, 115, 117, 47: 116, 197, 68: 266},
		{14: 83, 16: 83, 69: 257},
		{120, 231, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 9, 169, 17: 229, 25: 118, 131, 168, 117, 47: 116, 228, 50: 166, 159, 161, 162, 155, 160, 165, 158, 163, 156, 164, 70: 154, 73: 232, 157, 167, 78: 230},
		// 55
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 17: 221, 25: 118, 131, 115, 117, 47: 116, 222},
		{17: 214},
		{14: 76, 16: 76},
		{14: 75, 16: 75},
		{14: 74, 16: 74},
		// 60
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 66, 169, 66, 25: 118, 131, 115, 117, 47: 116, 197, 68: 203, 72: 213},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 7, 169, 7, 25: 118, 131, 115, 117, 47: 116, 212, 71: 211},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 207},
		{19: 191, 40: 190},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 19: 18, 21, 21, 21, 29: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 170, 21, 174, 172, 175, 173, 171},
		// 65
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 29: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 189},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 188},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 187},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 186},
		// 70
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 185},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 176},
		{14: 57, 16: 57, 57, 57, 57, 177, 179, 178, 57, 57},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 182},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 181},
		// 75
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 180},
		{14: 54, 16: 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{14: 55, 16: 55, 55, 55, 55, 55, 179, 55, 55, 55},
		{20: 177, 179, 178, 24: 183},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 184},
		// 80
		{14: 56, 16: 56, 56, 56, 56, 177, 179, 178, 56, 56},
		{14: 58, 16: 58, 58, 58, 58, 177, 179, 178, 58, 58},
		{14: 59, 16: 59, 59, 59, 59, 177, 179, 178, 59, 59},
		{14: 60, 16: 60, 60, 60, 60, 177, 179, 178, 60, 60},
		{14: 61, 16: 61, 61, 61, 61, 177, 179, 178, 61, 61},
		// 85
		{14: 62, 16: 62, 62, 62, 62, 177, 179, 178, 62, 62},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 197, 68: 206},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 14: 144, 49: 143, 61: 142, 192},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 25: 193, 131, 194},
		{1: 195, 41: 196},
		// 90
		{1: 21, 19: 17, 40: 17, 21},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 18: 66, 25: 118, 131, 115, 117, 47: 116, 197, 68: 203, 72: 204},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 197, 68: 198},
		{14: 64, 16: 64, 18: 64, 64, 177, 179, 178, 64},
		{19: 199, 23: 200},
		// 95
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 49: 143, 61: 142, 201},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 29: 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 202},
		{14: 63, 16: 63, 18: 63, 63, 177, 179, 178, 63},
		{14: 65, 16: 65, 18: 65, 199},
		// 100
		{18: 205},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 29: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{14: 67, 16: 67, 19: 199},
		{17: 208, 20: 177, 179, 178},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 209, 148},
		// 105
		{16: 210},
		{14: 70, 16: 70, 69: 70},
		{14: 71, 16: 71},
		{14: 6, 16: 6, 6, 20: 177, 179, 178},
		{14: 72, 16: 72},
		// 110
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 215, 148},
		{16: 216},
		{51: 217},
		{1: 218},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 219},
		// 115
		{18: 220, 20: 177, 179, 178},
		{14: 77, 16: 77},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 226, 148},
		{17: 223, 20: 177, 179, 178},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 224, 148},
		// 120
		{16: 225},
		{14: 78, 16: 78},
		{16: 227},
		{14: 79, 16: 79},
		{14: 88, 17: 254, 20: 177, 179, 178},
		// 125
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 252, 148},
		{14: 245},
		{233, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 234},
		{14: 8},
		{15, 237, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15: 15, 18: 15, 20: 15, 15, 15, 29: 15, 15, 15, 15, 15, 15, 15, 15, 236, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		// 130
		{18: 235, 20: 177, 179, 178},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{240},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 18: 66, 25: 118, 131, 115, 117, 47: 116, 197, 68: 203, 72: 238},
		{18: 239},
		// 135
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 29: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{18: 241},
		{17: 242},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 243, 148},
		{16: 244},
		// 140
		{14: 73, 16: 73},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 7, 169, 25: 118, 131, 115, 117, 47: 116, 212, 71: 246},
		{14: 247},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 17: 7, 25: 118, 131, 115, 117, 47: 116, 212, 71: 248},
		{17: 249},
		// 145
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 250, 148},
		{16: 251},
		{14: 80, 16: 80},
		{16: 253},
		{14: 82, 16: 82},
		// 150
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 255, 148},
		{16: 256},
		{14: 81, 16: 81},
		{17: 259, 50: 258},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 115, 117, 47: 116, 262},
		// 155
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 260, 148},
		{16: 261},
		{14: 68, 16: 68, 69: 68},
		{17: 263, 20: 177, 179, 178},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 92, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 149, 66: 264, 148},
		// 160
		{16: 265},
		{14: 69, 16: 69, 69: 69},
		{14: 84, 16: 84, 19: 199},
		{14: 86, 16: 86, 20: 177, 179, 178},
		{16: 91},
		// 165
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 3, 49: 143, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 142, 270},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 168, 117, 47: 116, 153, 50: 166, 159, 161, 162, 155, 160, 165, 158, 163, 156, 164, 70: 154, 73: 271, 157, 167},
		{14: 89, 16: 89},
		{19, 19, 19, 19, 19, 19, 287, 19, 19, 286, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 29: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 300},
		// 170
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 299},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 298},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 297},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 296},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 295},
		// 175
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 294},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 293},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 292},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 291},
		{120, 121, 119, 132, 126, 134, 123, 127, 124, 122, 128, 125, 129, 130, 15: 169, 25: 118, 131, 135, 290},
		// 180
		{289},
		{15: 288},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 29: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 29: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 29: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		// 185
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 29: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{39, 39, 39, 39, 39, 39, 287, 39, 39, 286, 39, 39, 273, 274, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 29: 277, 275, 276, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 40, 40, 40, 287, 40, 40, 286, 40, 40, 273, 274, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 29: 277, 275, 276, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{41, 41, 41, 41, 41, 41, 287, 41, 41, 286, 41, 41, 273, 274, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 29: 277, 275, 276, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{42, 42, 42, 42, 42, 42, 287, 42, 42, 286, 42, 42, 273, 274, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 29: 277, 275, 276, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 190
		{43, 43, 43, 43, 43, 43, 287, 43, 43, 286, 43, 43, 273, 274, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 29: 277, 275, 276, 282, 280, 43, 43, 281, 43, 283, 43, 43, 43, 43, 43, 43, 43, 43},
		{44, 44, 44, 44, 44, 44, 287, 44, 44, 286, 44, 44, 273, 274, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 29: 277, 275, 276, 282, 280, 44, 44, 281, 44, 283, 44, 44, 44, 44, 44, 44, 44, 44},
		{45, 45, 45, 45, 45, 45, 287, 45, 45, 286, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 29: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{46, 46, 46, 46, 46, 46, 287, 46, 46, 286, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 29: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{47, 47, 47, 47, 47, 47, 287, 47, 47, 286, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 29: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 195
		{48, 48, 48, 48, 48, 48, 287, 48, 48, 286, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 29: 277, 275, 276, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{49, 49, 49, 49, 49, 49, 287, 49, 49, 286, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 29: 277, 275, 276, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{20, 20, 20, 20, 20, 20, 287, 20, 20, 286, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 29: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 29: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		// 200
		{33, 33, 33, 33, 33, 33, 287, 33, 33, 286, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 29: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{51, 51, 51, 51, 51, 51, 287, 51, 51, 286, 51, 51, 273, 274, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 29: 277, 275, 276, 282, 280, 285, 278, 281, 284, 283, 279},
		{16: 307},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 17: 93, 63: 93, 93, 93},
		{15: 309},
		// 205
		{14: 94, 17: 94},
		{1: 311},
		{138, 18: 12, 12, 77: 312},
		{18: 313, 140},
		{14: 98, 17: 98},
		// 210
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 15: 99, 17: 99, 63: 99, 99, 99},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 144, 5, 17: 5, 49: 143, 61: 142, 317, 5, 5, 5},
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 144, 100, 17: 100, 49: 145, 63: 100, 100, 100},
		{101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 101, 15: 101, 17: 101, 63: 101, 101, 101},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 84

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: yyS[yypt-1].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-1].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 21:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 24:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.NextStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.MapLoopStmt{KeyId: yyS[yypt-6].token.Literal, MapId: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.ExitStmt{Expr: yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 35:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 36:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 37:
		{
			yyVAL.expr = &ast.AssExpr{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 39:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 40:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 42:
		{
			yyVAL.expr = &ast.AssExpr{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "%=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.TriOpExpr{Cond: yyS[yypt-4].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 52:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-1].expr, Operator: "CAT", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 66:
		{
			yyVAL.expr = &ast.ContainKeyExpr{KeyExpr: yyS[yypt-2].expr, MapId: yyS[yypt-0].token.Literal}
		}
	case 67:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 68:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 69:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 70:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 71:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 73:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 74:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 75:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 76:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 77:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 78:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 79:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 80:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 81:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 82:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 83:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 84:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 85:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 86:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 87:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 88:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 89:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 90:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 91:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 92:
		{
			yyVAL.ident_args = []string{}
		}
	case 93:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 94:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 95:
		{
			yyVAL.stmt = nil
		}
	case 96:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 97:
		{
			yyVAL.expr = nil
		}
	case 98:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
