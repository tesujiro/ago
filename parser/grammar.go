// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys     int
	token   ast.Token
	rule    ast.Rule
	rules   []ast.Rule
	pattern ast.Pattern
	stmt    ast.Stmt
	stmts   []ast.Stmt
	stmt_if ast.Stmt
	expr    ast.Expr
	exprs   []ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57379
	yyEofCode  = 57344
	ANDAND     = 57366
	BEGIN      = 57349
	BREAK      = 57370
	CONTINUE   = 57371
	DIVEQ      = 57377
	ELSE       = 57365
	END        = 57350
	EQEQ       = 57360
	FALSE      = 57356
	FOR        = 57369
	FUNC       = 57358
	GE         = 57362
	IDENT      = 57346
	IF         = 57364
	LE         = 57363
	LEN        = 57368
	LEX_BEGIN  = 57351
	LEX_END    = 57352
	LEX_PRINT  = 57353
	LEX_REGEXP = 57354
	MINUSEQ    = 57375
	MINUSMINUS = 57373
	MULEQ      = 57376
	NEQ        = 57361
	NIL        = 57357
	NUMBER     = 57347
	OROR       = 57367
	PLUSEQ     = 57374
	PLUSPLUS   = 57372
	RETURN     = 57359
	STRING     = 57348
	TRUE       = 57355
	UNARY      = 57378
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -53
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
		'$':        9,
		'(':        10,
		')':        10,
	}

	yyXLAT = map[int]int{
		43:    0,  // '+' (87x)
		45:    1,  // '-' (87x)
		36:    2,  // '$' (83x)
		40:    3,  // '(' (83x)
		57346: 4,  // IDENT (83x)
		57347: 5,  // NUMBER (83x)
		57348: 6,  // STRING (83x)
		57364: 7,  // IF (52x)
		125:   8,  // '}' (51x)
		57353: 9,  // LEX_PRINT (51x)
		10:    10, // '\n' (45x)
		123:   11, // '{' (43x)
		59:    12, // ';' (37x)
		37:    13, // '%' (32x)
		42:    14, // '*' (32x)
		47:    15, // '/' (32x)
		60:    16, // '<' (32x)
		62:    17, // '>' (32x)
		57377: 18, // DIVEQ (32x)
		57360: 19, // EQEQ (32x)
		57362: 20, // GE (32x)
		57363: 21, // LE (32x)
		57375: 22, // MINUSEQ (32x)
		57373: 23, // MINUSMINUS (32x)
		57376: 24, // MULEQ (32x)
		57361: 25, // NEQ (32x)
		57374: 26, // PLUSEQ (32x)
		57372: 27, // PLUSPLUS (32x)
		44:    28, // ',' (30x)
		57381: 29, // expr (30x)
		61:    30, // '=' (27x)
		41:    31, // ')' (25x)
		57344: 32, // $end (12x)
		57351: 33, // LEX_BEGIN (12x)
		57352: 34, // LEX_END (12x)
		57382: 35, // exprs (6x)
		57365: 36, // ELSE (4x)
		57390: 37, // stmt (4x)
		57391: 38, // stmt_if (4x)
		57392: 39, // stmts (4x)
		57383: 40, // nls (3x)
		57384: 41, // opt_nls (3x)
		57385: 42, // opt_semi (2x)
		57389: 43, // semi (2x)
		57380: 44, // action (1x)
		57386: 45, // pattern (1x)
		57387: 46, // program (1x)
		57388: 47, // rule (1x)
		57379: 48, // $default (0x)
		57366: 49, // ANDAND (0x)
		57349: 50, // BEGIN (0x)
		57370: 51, // BREAK (0x)
		57371: 52, // CONTINUE (0x)
		57350: 53, // END (0x)
		57345: 54, // error (0x)
		57356: 55, // FALSE (0x)
		57369: 56, // FOR (0x)
		57358: 57, // FUNC (0x)
		57368: 58, // LEN (0x)
		57354: 59, // LEX_REGEXP (0x)
		57357: 60, // NIL (0x)
		57367: 61, // OROR (0x)
		57359: 62, // RETURN (0x)
		57355: 63, // TRUE (0x)
		57378: 64, // UNARY (0x)
	}

	yySymNames = []string{
		"'+'",
		"'-'",
		"'$'",
		"'('",
		"IDENT",
		"NUMBER",
		"STRING",
		"IF",
		"'}'",
		"LEX_PRINT",
		"'\\n'",
		"'{'",
		"';'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"PLUSEQ",
		"PLUSPLUS",
		"','",
		"expr",
		"'='",
		"')'",
		"$end",
		"LEX_BEGIN",
		"LEX_END",
		"exprs",
		"ELSE",
		"stmt",
		"stmt_if",
		"stmts",
		"nls",
		"opt_nls",
		"opt_semi",
		"semi",
		"action",
		"pattern",
		"program",
		"rule",
		"$default",
		"ANDAND",
		"BEGIN",
		"BREAK",
		"CONTINUE",
		"END",
		"error",
		"FALSE",
		"FOR",
		"FUNC",
		"LEN",
		"LEX_REGEXP",
		"NIL",
		"OROR",
		"RETURN",
		"TRUE",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {46, 0},
		2:  {46, 2},
		3:  {47, 2},
		4:  {45, 0},
		5:  {45, 1},
		6:  {45, 1},
		7:  {45, 1},
		8:  {44, 5},
		9:  {39, 0},
		10: {39, 4},
		11: {37, 3},
		12: {37, 3},
		13: {37, 1},
		14: {37, 1},
		15: {37, 2},
		16: {37, 1},
		17: {38, 5},
		18: {38, 7},
		19: {38, 5},
		20: {35, 1},
		21: {35, 4},
		22: {29, 1},
		23: {29, 1},
		24: {29, 2},
		25: {29, 1},
		26: {29, 2},
		27: {29, 2},
		28: {29, 2},
		29: {29, 2},
		30: {29, 3},
		31: {29, 3},
		32: {29, 3},
		33: {29, 3},
		34: {29, 3},
		35: {29, 3},
		36: {29, 3},
		37: {29, 3},
		38: {29, 3},
		39: {29, 3},
		40: {29, 3},
		41: {29, 3},
		42: {29, 3},
		43: {29, 3},
		44: {29, 3},
		45: {29, 3},
		46: {40, 1},
		47: {40, 2},
		48: {41, 0},
		49: {41, 1},
		50: {43, 1},
		51: {42, 0},
		52: {42, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [92][]uint16{
		// 0
		{52, 52, 52, 52, 52, 52, 52, 11: 52, 32: 52, 52, 52, 46: 54},
		{64, 65, 62, 66, 60, 61, 63, 11: 49, 29: 59, 32: 53, 57, 58, 45: 56, 47: 55},
		{51, 51, 51, 51, 51, 51, 51, 11: 51, 32: 51, 51, 51},
		{11: 105, 44: 104},
		{11: 48},
		// 5
		{11: 47},
		{81, 82, 11: 46, 13: 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 30: 31, 31},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30: 30, 30},
		{64, 65, 62, 66, 60, 61, 63, 29: 103},
		// 10
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 30: 28, 28},
		{64, 65, 62, 66, 60, 61, 63, 29: 102},
		{64, 65, 62, 66, 60, 61, 63, 29: 101},
		{64, 65, 62, 66, 60, 61, 63, 29: 67},
		{81, 82, 13: 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 31: 80},
		// 15
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 30: 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 30: 24, 24},
		{64, 65, 62, 66, 60, 61, 63, 29: 100},
		{64, 65, 62, 66, 60, 61, 63, 29: 99},
		{64, 65, 62, 66, 60, 61, 63, 29: 98},
		// 20
		{64, 65, 62, 66, 60, 61, 63, 29: 97},
		{64, 65, 62, 66, 60, 61, 63, 29: 96},
		{64, 65, 62, 66, 60, 61, 63, 29: 95},
		{64, 65, 62, 66, 60, 61, 63, 29: 94},
		{64, 65, 62, 66, 60, 61, 63, 29: 93},
		// 25
		{64, 65, 62, 66, 60, 61, 63, 29: 92},
		{64, 65, 62, 66, 60, 61, 63, 29: 91},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 30: 13, 13},
		{64, 65, 62, 66, 60, 61, 63, 29: 90},
		{64, 65, 62, 66, 60, 61, 63, 29: 89},
		// 30
		{64, 65, 62, 66, 60, 61, 63, 29: 88},
		{64, 65, 62, 66, 60, 61, 63, 29: 87},
		{64, 65, 62, 66, 60, 61, 63, 29: 86},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 73, 8, 8, 8, 71, 8, 72, 8, 70, 8, 8, 30: 8, 8},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 73, 9, 9, 9, 71, 9, 72, 9, 70, 9, 9, 30: 9, 9},
		// 35
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 73, 10, 10, 10, 71, 10, 72, 10, 70, 10, 10, 30: 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 85, 83, 84, 11, 11, 73, 11, 11, 11, 71, 11, 72, 11, 70, 11, 11, 30: 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 85, 83, 84, 12, 12, 73, 12, 12, 12, 71, 12, 72, 12, 70, 12, 12, 30: 12, 12},
		{81, 82, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 85, 83, 84, 14, 14, 73, 14, 14, 14, 71, 69, 72, 14, 70, 68, 14, 30: 14, 14},
		{81, 82, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 85, 83, 84, 15, 15, 73, 15, 15, 15, 71, 69, 72, 15, 70, 68, 15, 30: 15, 15},
		// 40
		{81, 82, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 85, 83, 84, 16, 16, 73, 16, 16, 16, 71, 69, 72, 16, 70, 68, 16, 30: 16, 16},
		{81, 82, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 85, 83, 84, 17, 17, 73, 17, 17, 17, 71, 69, 72, 17, 70, 68, 17, 30: 17, 17},
		{81, 82, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 85, 83, 84, 78, 76, 73, 18, 77, 79, 71, 69, 72, 18, 70, 68, 18, 30: 18, 18},
		{81, 82, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 85, 83, 84, 78, 76, 73, 19, 77, 79, 71, 69, 72, 19, 70, 68, 19, 30: 19, 19},
		{81, 82, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 20, 30: 20, 20},
		// 45
		{81, 82, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 21, 30: 21, 21},
		{81, 82, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 22, 30: 22, 22},
		{81, 82, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 23, 30: 23, 23},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 73, 26, 26, 26, 71, 26, 72, 26, 70, 26, 26, 30: 26, 26},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 73, 27, 27, 27, 71, 27, 72, 27, 70, 27, 27, 30: 27, 27},
		// 50
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 73, 29, 29, 29, 71, 29, 72, 29, 70, 29, 29, 30: 29, 29},
		{50, 50, 50, 50, 50, 50, 50, 11: 50, 32: 50, 50, 50},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 39: 106},
		{64, 65, 62, 66, 60, 61, 63, 113, 107, 111, 29: 109, 35: 110, 37: 108, 112},
		{2, 2, 2, 2, 2, 2, 2, 10: 2, 2, 140, 32: 2, 2, 2, 42: 143, 141},
		// 55
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 12: 140, 42: 139, 141},
		{81, 82, 40, 40, 40, 40, 40, 40, 40, 40, 40, 12: 40, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 33, 30: 137},
		{28: 129, 30: 135},
		{64, 65, 62, 66, 60, 61, 63, 39, 39, 39, 39, 12: 39, 29: 128, 35: 127},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 12: 37, 36: 118},
		// 60
		{64, 65, 62, 66, 60, 61, 63, 29: 114},
		{81, 82, 11: 115, 13: 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 39: 116},
		{64, 65, 62, 66, 60, 61, 63, 113, 117, 111, 29: 109, 35: 110, 37: 108, 112},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 12: 36, 36: 36},
		// 65
		{7: 119, 11: 120},
		{64, 65, 62, 66, 60, 61, 63, 29: 123},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 39: 121},
		{64, 65, 62, 66, 60, 61, 63, 113, 122, 111, 29: 109, 35: 110, 37: 108, 112},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 12: 34, 36: 34},
		// 70
		{81, 82, 11: 124, 13: 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 39: 125},
		{64, 65, 62, 66, 60, 61, 63, 113, 126, 111, 29: 109, 35: 110, 37: 108, 112},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 12: 35, 36: 35},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 12: 38, 28: 129},
		// 75
		{81, 82, 33, 33, 33, 33, 33, 33, 33, 33, 33, 12: 33, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 33},
		{5, 5, 5, 5, 5, 5, 5, 10: 131, 40: 132, 130},
		{64, 65, 62, 66, 60, 61, 63, 29: 134},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 32: 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 133, 4, 32: 4, 4, 4},
		// 80
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 32: 6, 6, 6},
		{81, 82, 32, 32, 32, 32, 32, 32, 32, 32, 32, 12: 32, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68, 32, 30: 32},
		{64, 65, 62, 66, 60, 61, 63, 29: 128, 35: 136},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 12: 41, 28: 129},
		{64, 65, 62, 66, 60, 61, 63, 29: 138},
		// 85
		{81, 82, 42, 42, 42, 42, 42, 42, 42, 42, 42, 12: 42, 85, 83, 84, 78, 76, 73, 74, 77, 79, 71, 69, 72, 75, 70, 68},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 131, 40: 132, 142},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 32: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 32: 1, 1, 1},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 90
		{5, 5, 5, 5, 5, 5, 5, 10: 131, 5, 32: 5, 5, 5, 40: 132, 144},
		{45, 45, 45, 45, 45, 45, 45, 11: 45, 32: 45, 45, 45},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 54

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 5:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 6:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 7:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 9:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 10:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 11:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 12:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 13:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 14:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 15:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 17:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 18:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 19:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 20:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 21:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 22:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 23:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 24:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 25:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 26:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 27:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 28:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 29:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 30:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 31:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 32:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 33:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 38:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
