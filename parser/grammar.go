// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57385
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57382
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	EXIT       = 57380
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NEXT       = 57381
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57384
	WHILE      = 57374
	yyErrCode  = 57345
	vars       = 57383

	yyMaxDepth = 200
	yyTabOfs   = -99
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		'?':        1,
		':':        1,
		OROR:       2,
		ANDAND:     3,
		IDENT:      4,
		',':        5,
		vars:       5,
		'~':        6,
		EQEQ:       7,
		NEQ:        7,
		'>':        8,
		'<':        8,
		GE:         8,
		LE:         8,
		CONCAT_OP:  9,
		'+':        10,
		'-':        10,
		'*':        11,
		'/':        11,
		'%':        11,
		'!':        12,
		UNARY:      12,
		PLUSPLUS:   13,
		MINUSMINUS: 13,
		'$':        14,
		'[':        15,
		'(':        16,
		')':        16,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (118x)
		43:    1,  // '+' (114x)
		45:    2,  // '-' (114x)
		57360: 3,  // MINUSMINUS (114x)
		57359: 4,  // PLUSPLUS (114x)
		59:    5,  // ';' (113x)
		125:   6,  // '}' (105x)
		57346: 7,  // IDENT (81x)
		123:   8,  // '{' (78x)
		33:    9,  // '!' (75x)
		36:    10, // '$' (75x)
		57350: 11, // FALSE (75x)
		57378: 12, // FUNC (75x)
		57351: 13, // NIL (75x)
		57347: 14, // NUMBER (75x)
		57348: 15, // STRING (75x)
		57349: 16, // TRUE (75x)
		57370: 17, // REGEXP (74x)
		41:    18, // ')' (61x)
		44:    19, // ',' (60x)
		63:    20, // '?' (60x)
		57356: 21, // ANDAND (60x)
		57357: 22, // OROR (60x)
		57391: 23, // non_post_simp_expr (48x)
		57406: 24, // variable (48x)
		93:    25, // ']' (47x)
		57401: 26, // simp_expr (46x)
		58:    27, // ':' (45x)
		37:    28, // '%' (39x)
		42:    29, // '*' (39x)
		47:    30, // '/' (39x)
		60:    31, // '<' (39x)
		61:    32, // '=' (39x)
		62:    33, // '>' (39x)
		91:    34, // '[' (39x)
		126:   35, // '~' (39x)
		57352: 36, // EQEQ (39x)
		57354: 37, // GE (39x)
		57355: 38, // LE (39x)
		57353: 39, // NEQ (39x)
		57364: 40, // DIVEQ (37x)
		57362: 41, // MINUSEQ (37x)
		57363: 42, // MULEQ (37x)
		57361: 43, // PLUSEQ (37x)
		57387: 44, // expr (30x)
		57400: 45, // semi (22x)
		57371: 46, // IF (21x)
		57374: 47, // WHILE (21x)
		57376: 48, // BREAK (20x)
		57377: 49, // CONTINUE (20x)
		57365: 50, // DELETE (20x)
		57375: 51, // DO (20x)
		57380: 52, // EXIT (20x)
		57373: 53, // FOR (20x)
		57381: 54, // NEXT (20x)
		57369: 55, // PRINT (20x)
		57379: 56, // RETURN (20x)
		57405: 57, // term (20x)
		57396: 58, // opt_term (19x)
		57344: 59, // $end (13x)
		57367: 60, // BEGIN (13x)
		57368: 61, // END (13x)
		57395: 62, // opt_stmts (12x)
		57404: 63, // stmts (12x)
		57388: 64, // exprs (6x)
		57372: 65, // ELSE (4x)
		57390: 66, // multi_val_expr (3x)
		57392: 67, // opt_expr (3x)
		57393: 68, // opt_exprs (3x)
		57402: 69, // stmt (3x)
		57403: 70, // stmt_if (3x)
		57407: 71, // variables (3x)
		57386: 72, // action (2x)
		57389: 73, // ident_args (2x)
		57366: 74, // IN (1x)
		57394: 75, // opt_stmt (1x)
		57397: 76, // pattern (1x)
		57398: 77, // program (1x)
		57399: 78, // rule (1x)
		57385: 79, // $default (0x)
		57382: 80, // CONCAT_OP (0x)
		57345: 81, // error (0x)
		57358: 82, // LEN (0x)
		57384: 83, // UNARY (0x)
		57383: 84, // vars (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"';'",
		"'}'",
		"IDENT",
		"'{'",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"REGEXP",
		"')'",
		"','",
		"'?'",
		"ANDAND",
		"OROR",
		"non_post_simp_expr",
		"variable",
		"']'",
		"simp_expr",
		"':'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'='",
		"'>'",
		"'['",
		"'~'",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"expr",
		"semi",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"EXIT",
		"FOR",
		"NEXT",
		"PRINT",
		"RETURN",
		"term",
		"opt_term",
		"$end",
		"BEGIN",
		"END",
		"opt_stmts",
		"stmts",
		"exprs",
		"ELSE",
		"multi_val_expr",
		"opt_expr",
		"opt_exprs",
		"stmt",
		"stmt_if",
		"variables",
		"action",
		"ident_args",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
		"vars",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {77, 0},
		2:  {77, 2},
		3:  {78, 3},
		4:  {78, 2},
		5:  {78, 2},
		6:  {76, 5},
		7:  {76, 1},
		8:  {76, 1},
		9:  {76, 1},
		10: {76, 3},
		11: {72, 3},
		12: {62, 0},
		13: {62, 2},
		14: {63, 2},
		15: {63, 4},
		16: {69, 1},
		17: {69, 1},
		18: {69, 2},
		19: {69, 1},
		20: {69, 2},
		21: {69, 1},
		22: {69, 4},
		23: {69, 5},
		24: {69, 9},
		25: {69, 4},
		26: {69, 5},
		27: {69, 8},
		28: {69, 1},
		29: {69, 1},
		30: {69, 1},
		31: {69, 9},
		32: {69, 2},
		33: {69, 2},
		34: {70, 5},
		35: {70, 7},
		36: {70, 5},
		37: {68, 0},
		38: {68, 1},
		39: {64, 1},
		40: {64, 4},
		41: {66, 3},
		42: {44, 1},
		43: {44, 3},
		44: {44, 3},
		45: {44, 3},
		46: {44, 3},
		47: {44, 3},
		48: {44, 5},
		49: {44, 3},
		50: {44, 3},
		51: {26, 1},
		52: {26, 3},
		53: {26, 3},
		54: {26, 3},
		55: {26, 3},
		56: {26, 3},
		57: {26, 3},
		58: {26, 3},
		59: {26, 3},
		60: {26, 3},
		61: {26, 3},
		62: {26, 3},
		63: {26, 3},
		64: {26, 1},
		65: {26, 2},
		66: {26, 2},
		67: {23, 2},
		68: {23, 4},
		69: {23, 4},
		70: {23, 7},
		71: {23, 3},
		72: {23, 2},
		73: {23, 2},
		74: {23, 1},
		75: {23, 1},
		76: {23, 1},
		77: {23, 1},
		78: {23, 1},
		79: {23, 2},
		80: {23, 2},
		81: {23, 1},
		82: {71, 1},
		83: {71, 4},
		84: {24, 4},
		85: {24, 1},
		86: {24, 2},
		87: {73, 0},
		88: {73, 1},
		89: {73, 4},
		90: {75, 0},
		91: {75, 1},
		92: {67, 0},
		93: {67, 1},
		94: {58, 0},
		95: {58, 1},
		96: {57, 1},
		97: {57, 2},
		98: {45, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [207][]uint16{
		// 0
		{98, 98, 98, 98, 98, 7: 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 59: 98, 98, 98, 77: 100},
		{115, 123, 124, 117, 116, 7: 114, 109, 113, 125, 120, 104, 121, 118, 122, 119, 108, 23: 112, 111, 26: 110, 44: 107, 59: 99, 105, 106, 72: 103, 76: 102, 78: 101},
		{97, 97, 97, 97, 97, 7: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 59: 97, 97, 97},
		{5: 137, 8: 109, 45: 136, 57: 304, 72: 303},
		{5, 5, 5, 5, 5, 137, 7: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 57: 135, 302, 5, 5, 5},
		// 5
		{129, 7: 298},
		{5: 92, 8: 92},
		{5: 91, 8: 91},
		{5: 90, 8: 90, 20: 169, 171, 170},
		{1: 35, 35, 35, 35, 35, 8: 35, 19: 296, 35, 35, 35, 28: 35, 35, 35, 35, 33: 35, 35: 35, 35, 35, 35, 35},
		// 10
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 294, 141},
		{1: 264, 265, 277, 276, 57, 57, 8: 57, 18: 57, 57, 57, 57, 57, 25: 57, 27: 57, 268, 266, 267, 273, 33: 271, 35: 275, 269, 272, 274, 270},
		{18, 18, 18, 18, 18, 18, 18, 8: 18, 18: 18, 18, 18, 18, 18, 25: 18, 27: 18, 18, 18, 18, 18, 163, 18, 18, 18, 18, 18, 18, 18, 167, 165, 166, 164},
		{186, 48, 48, 48, 48, 48, 48, 8: 48, 18: 48, 48, 48, 48, 48, 25: 48, 27: 48, 48, 48, 48, 48, 48, 48, 187, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 293},
		// 15
		{228, 14, 14, 14, 14, 14, 14, 8: 14, 18: 14, 14, 14, 14, 14, 25: 14, 27: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 225},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 292},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 291},
		{25, 25, 25, 25, 25, 25, 25, 8: 25, 18: 25, 25, 25, 25, 25, 25: 25, 27: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		// 20
		{24, 24, 24, 24, 24, 24, 24, 8: 24, 18: 24, 24, 24, 24, 24, 25: 24, 27: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 8: 23, 18: 23, 23, 23, 23, 23, 25: 23, 27: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 8: 22, 18: 22, 22, 22, 22, 22, 25: 22, 27: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 8: 21, 18: 21, 21, 21, 21, 21, 25: 21, 27: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 290},
		// 25
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 263},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 23: 126, 128},
		{186, 13, 13, 13, 13, 13, 13, 8: 13, 18: 13, 13, 13, 13, 13, 25: 13, 27: 13, 13, 13, 13, 13, 13, 13, 187, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		{129},
		{18, 18, 18, 18, 18, 18, 18, 8: 18, 18: 18, 18, 18, 18, 18, 25: 18, 27: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		// 30
		{7: 131, 18: 12, 12, 73: 130},
		{18: 132, 133},
		{18: 11, 11},
		{8: 140},
		{5: 137, 7: 5, 45: 136, 57: 135, 134},
		// 35
		{7: 139},
		{4, 4, 4, 4, 4, 137, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 45: 138, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 59: 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 7: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 46: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 59: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 46: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 59: 1, 1, 1},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 59: 2, 2, 2},
		// 40
		{18: 10, 10},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 143, 141},
		{5: 137, 5, 45: 260, 57: 135, 259},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 161, 26: 110, 44: 146, 46: 159, 152, 154, 155, 148, 153, 158, 151, 156, 149, 157, 66: 147, 69: 145, 150, 160},
		{6: 144},
		// 45
		{29, 29, 29, 29, 29, 29, 29, 8: 29, 18: 29, 29, 29, 29, 29, 25: 29, 27: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{5: 85, 85},
		{5: 83, 83, 20: 169, 171, 170},
		{5: 82, 82},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 258},
		// 50
		{115, 123, 124, 117, 116, 80, 80, 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 188, 64: 257},
		{5: 78, 78, 65: 248},
		{222, 123, 124, 117, 116, 9, 7: 114, 220, 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 161, 26: 110, 44: 219, 46: 159, 152, 154, 155, 148, 153, 158, 151, 156, 149, 157, 66: 147, 69: 223, 150, 160, 75: 221},
		{115, 123, 124, 117, 116, 7: 114, 212, 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 213},
		{8: 205},
		// 55
		{5: 71, 71},
		{5: 70, 70},
		{5: 69, 69},
		{115, 123, 124, 117, 116, 62, 62, 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 188, 64: 194, 68: 204},
		{115, 123, 124, 117, 116, 7, 7, 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 203, 67: 202},
		// 60
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 198},
		{19: 182, 32: 181},
		{18, 18, 18, 18, 18, 18, 18, 8: 18, 19: 17, 18, 18, 18, 28: 18, 18, 18, 18, 163, 18, 18, 18, 18, 18, 18, 18, 167, 165, 166, 164},
		{35, 35, 35, 35, 35, 35, 35, 8: 35, 18: 35, 35, 35, 35, 35, 25: 35, 27: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 180},
		// 65
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 179},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 178},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 177},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 168},
		{5: 52, 52, 8: 52, 18: 52, 52, 169, 171, 170, 25: 52, 27: 52},
		// 70
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 174},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 173},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 172},
		{5: 49, 49, 8: 49, 18: 49, 49, 49, 49, 49, 25: 49, 27: 49},
		{5: 50, 50, 8: 50, 18: 50, 50, 50, 171, 50, 25: 50, 27: 50},
		// 75
		{20: 169, 171, 170, 27: 175},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 176},
		{5: 51, 51, 8: 51, 18: 51, 51, 169, 171, 170, 25: 51, 27: 51},
		{5: 53, 53, 8: 53, 18: 53, 53, 169, 171, 170, 25: 53, 27: 53},
		{5: 54, 54, 8: 54, 18: 54, 54, 169, 171, 170, 25: 54, 27: 54},
		// 80
		{5: 55, 55, 8: 55, 18: 55, 55, 169, 171, 170, 25: 55, 27: 55},
		{5: 56, 56, 8: 56, 18: 56, 56, 169, 171, 170, 25: 56, 27: 56},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 188, 64: 197},
		{5, 5, 5, 5, 5, 137, 7: 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 57: 135, 183},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 23: 184, 185},
		// 85
		{186, 34: 187},
		{18, 19: 16, 32: 16, 34: 18},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 62, 23: 112, 111, 26: 110, 44: 188, 64: 194, 68: 195},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 188, 64: 189},
		{5: 60, 60, 18: 60, 60, 169, 171, 170, 25: 60},
		// 90
		{19: 190, 25: 191},
		{5, 5, 5, 5, 5, 137, 7: 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 57: 135, 192},
		{15, 15, 15, 15, 15, 15, 15, 8: 15, 18: 15, 15, 15, 15, 15, 25: 15, 27: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 193},
		{5: 59, 59, 18: 59, 59, 169, 171, 170, 25: 59},
		// 95
		{5: 61, 61, 18: 61, 190},
		{18: 196},
		{30, 30, 30, 30, 30, 30, 30, 8: 30, 18: 30, 30, 30, 30, 30, 25: 30, 27: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{5: 58, 58, 19: 190},
		{8: 199, 20: 169, 171, 170},
		// 100
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 200, 141},
		{6: 201},
		{5: 65, 65, 65: 65},
		{5: 66, 66},
		{5: 6, 6, 8: 6, 20: 169, 171, 170},
		// 105
		{5: 67, 67},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 206, 141},
		{6: 207},
		{47: 208},
		{209},
		// 110
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 210},
		{18: 211, 20: 169, 171, 170},
		{5: 72, 72},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 217, 141},
		{8: 214, 20: 169, 171, 170},
		// 115
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 215, 141},
		{6: 216},
		{5: 73, 73},
		{6: 218},
		{5: 74, 74},
		// 120
		{5: 83, 8: 245, 20: 169, 171, 170},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 243, 141},
		{5: 236},
		{115, 123, 124, 117, 116, 7: 224, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 225},
		{5: 8},
		// 125
		{228, 14, 14, 14, 14, 18: 14, 20: 14, 14, 14, 28: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 74: 227},
		{18: 226, 20: 169, 171, 170},
		{28, 28, 28, 28, 28, 28, 28, 8: 28, 18: 28, 28, 28, 28, 28, 25: 28, 27: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{7: 231},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 62, 23: 112, 111, 26: 110, 44: 188, 64: 194, 68: 229},
		// 130
		{18: 230},
		{31, 31, 31, 31, 31, 31, 31, 8: 31, 18: 31, 31, 31, 31, 31, 25: 31, 27: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{18: 232},
		{8: 233},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 234, 141},
		// 135
		{6: 235},
		{5: 68, 68},
		{115, 123, 124, 117, 116, 7, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 203, 67: 237},
		{5: 238},
		{115, 123, 124, 117, 116, 7: 114, 7, 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 203, 67: 239},
		// 140
		{8: 240},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 241, 141},
		{6: 242},
		{5: 75, 75},
		{6: 244},
		// 145
		{5: 77, 77},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 246, 141},
		{6: 247},
		{5: 76, 76},
		{8: 250, 46: 249},
		// 150
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 111, 26: 110, 44: 253},
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 251, 141},
		{6: 252},
		{5: 63, 63, 65: 63},
		{8: 254, 20: 169, 171, 170},
		// 155
		{5, 5, 5, 5, 5, 137, 87, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 142, 62: 255, 141},
		{6: 256},
		{5: 64, 64, 65: 64},
		{5: 79, 79, 19: 190},
		{5: 81, 81, 20: 169, 171, 170},
		// 160
		{6: 86},
		{5, 5, 5, 5, 5, 137, 3, 5, 9: 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 135, 261},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 161, 26: 110, 44: 146, 46: 159, 152, 154, 155, 148, 153, 158, 151, 156, 149, 157, 66: 147, 69: 262, 150, 160},
		{5: 84, 84},
		{19, 19, 19, 277, 276, 19, 19, 8: 19, 18: 19, 19, 19, 19, 19, 25: 19, 27: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		// 165
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 289},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 288},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 287},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 286},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 285},
		// 170
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 284},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 283},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 282},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 281},
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 280},
		// 175
		{115, 123, 124, 117, 116, 7: 114, 9: 113, 125, 120, 127, 121, 118, 122, 119, 162, 23: 112, 128, 26: 279},
		{17: 278},
		{34, 34, 34, 34, 34, 34, 34, 8: 34, 18: 34, 34, 34, 34, 34, 25: 34, 27: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 8: 33, 18: 33, 33, 33, 33, 33, 25: 33, 27: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		{36, 36, 36, 36, 36, 36, 36, 8: 36, 18: 36, 36, 36, 36, 36, 25: 36, 27: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 180
		{37, 264, 265, 277, 276, 37, 37, 8: 37, 18: 37, 37, 37, 37, 37, 25: 37, 27: 37, 268, 266, 267, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{38, 264, 265, 277, 276, 38, 38, 8: 38, 18: 38, 38, 38, 38, 38, 25: 38, 27: 38, 268, 266, 267, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{39, 264, 265, 277, 276, 39, 39, 8: 39, 18: 39, 39, 39, 39, 39, 25: 39, 27: 39, 268, 266, 267, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 264, 265, 277, 276, 40, 40, 8: 40, 18: 40, 40, 40, 40, 40, 25: 40, 27: 40, 268, 266, 267, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{41, 264, 265, 277, 276, 41, 41, 8: 41, 18: 41, 41, 41, 41, 41, 25: 41, 27: 41, 268, 266, 267, 273, 41, 271, 41, 41, 41, 272, 274, 41, 41, 41, 41, 41},
		// 185
		{42, 264, 265, 277, 276, 42, 42, 8: 42, 18: 42, 42, 42, 42, 42, 25: 42, 27: 42, 268, 266, 267, 273, 42, 271, 42, 42, 42, 272, 274, 42, 42, 42, 42, 42},
		{43, 43, 43, 277, 276, 43, 43, 8: 43, 18: 43, 43, 43, 43, 43, 25: 43, 27: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{44, 44, 44, 277, 276, 44, 44, 8: 44, 18: 44, 44, 44, 44, 44, 25: 44, 27: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{45, 45, 45, 277, 276, 45, 45, 8: 45, 18: 45, 45, 45, 45, 45, 25: 45, 27: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{46, 46, 46, 277, 276, 46, 46, 8: 46, 18: 46, 46, 46, 46, 46, 25: 46, 27: 46, 268, 266, 267, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		// 190
		{47, 47, 47, 277, 276, 47, 47, 8: 47, 18: 47, 47, 47, 47, 47, 25: 47, 27: 47, 268, 266, 267, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{20, 20, 20, 277, 276, 20, 20, 8: 20, 18: 20, 20, 20, 20, 20, 25: 20, 27: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{26, 26, 26, 26, 26, 26, 26, 8: 26, 18: 26, 26, 26, 26, 26, 25: 26, 27: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{27, 27, 27, 27, 27, 27, 27, 8: 27, 18: 27, 27, 27, 27, 27, 25: 27, 27: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{32, 32, 32, 277, 276, 32, 32, 8: 32, 18: 32, 32, 32, 32, 32, 25: 32, 27: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		// 195
		{6: 295},
		{88, 88, 88, 88, 88, 88, 7: 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 59: 88, 88, 88},
		{17: 297},
		{5: 89, 8: 89},
		{299},
		// 200
		{7: 131, 18: 12, 12, 73: 300},
		{18: 301, 133},
		{5: 93, 8: 93},
		{94, 94, 94, 94, 94, 7: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 59: 94, 94, 94},
		{5, 5, 5, 5, 5, 137, 7: 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 136, 57: 135, 305, 5, 5, 5},
		// 205
		{95, 95, 95, 95, 95, 137, 7: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 45: 138, 59: 95, 95, 95},
		{96, 96, 96, 96, 96, 7: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 59: 96, 96, 96},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 81

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: yyS[yypt-1].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-1].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 21:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 24:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.NextStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.ExitStmt{Expr: yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 35:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 36:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 37:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 38:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 39:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 41:
		{
			yyVAL.expr = &ast.AssExpr{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 42:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 43:
		{
			yyVAL.expr = &ast.AssExpr{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.TriOpExpr{Cond: yyS[yypt-4].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 64:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 65:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 66:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 67:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 69:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 70:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 71:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 73:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 74:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 75:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 76:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 77:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 78:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 79:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 80:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 81:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 82:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 83:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 84:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 85:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 86:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 87:
		{
			yyVAL.ident_args = []string{}
		}
	case 88:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 89:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 90:
		{
			yyVAL.stmt = nil
		}
	case 91:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 92:
		{
			yyVAL.expr = nil
		}
	case 93:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
