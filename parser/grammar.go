// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	opt_stmt   ast.Stmt
	stmts      []ast.Stmt
	stmt_if    ast.Stmt
	expr       ast.Expr
	opt_expr   ast.Expr
	exprs      []ast.Expr
	opt_exprs  []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57381
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57380
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -90
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		'+':        7,
		'-':        7,
		'*':        8,
		'/':        8,
		'%':        8,
		'!':        9,
		UNARY:      9,
		PLUSPLUS:   10,
		MINUSMINUS: 10,
		'$':        11,
		'(':        12,
		')':        12,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (163x)
		43:    1,  // '+' (159x)
		45:    2,  // '-' (159x)
		57360: 3,  // MINUSMINUS (159x)
		57359: 4,  // PLUSPLUS (159x)
		57346: 5,  // IDENT (157x)
		57370: 6,  // REGEXP (153x)
		33:    7,  // '!' (151x)
		36:    8,  // '$' (151x)
		57350: 9,  // FALSE (151x)
		57378: 10, // FUNC (151x)
		57351: 11, // NIL (151x)
		57347: 12, // NUMBER (151x)
		57348: 13, // STRING (151x)
		57349: 14, // TRUE (151x)
		57371: 15, // IF (96x)
		57374: 16, // WHILE (96x)
		57376: 17, // BREAK (95x)
		57377: 18, // CONTINUE (95x)
		57365: 19, // DELETE (95x)
		57375: 20, // DO (95x)
		57373: 21, // FOR (95x)
		57369: 22, // PRINT (95x)
		57379: 23, // RETURN (95x)
		125:   24, // '}' (94x)
		10:    25, // '\n' (81x)
		59:    26, // ';' (78x)
		123:   27, // '{' (73x)
		57344: 28, // $end (60x)
		57367: 29, // BEGIN (60x)
		57368: 30, // END (60x)
		41:    31, // ')' (55x)
		44:    32, // ',' (54x)
		57383: 33, // expr (54x)
		37:    34, // '%' (53x)
		42:    35, // '*' (53x)
		47:    36, // '/' (53x)
		60:    37, // '<' (53x)
		62:    38, // '>' (53x)
		91:    39, // '[' (53x)
		126:   40, // '~' (53x)
		57356: 41, // ANDAND (53x)
		57364: 42, // DIVEQ (53x)
		57352: 43, // EQEQ (53x)
		57354: 44, // GE (53x)
		57355: 45, // LE (53x)
		57362: 46, // MINUSEQ (53x)
		57363: 47, // MULEQ (53x)
		57353: 48, // NEQ (53x)
		57357: 49, // OROR (53x)
		57361: 50, // PLUSEQ (53x)
		61:    51, // '=' (42x)
		93:    52, // ']' (41x)
		57384: 53, // exprs (19x)
		57396: 54, // stmt (13x)
		57397: 55, // stmt_if (13x)
		57398: 56, // stmts (12x)
		57386: 57, // nls (5x)
		57389: 58, // opt_nls (5x)
		57372: 59, // ELSE (4x)
		57388: 60, // opt_exprs (3x)
		57390: 61, // opt_semi (3x)
		57395: 62, // semi (3x)
		57382: 63, // action (2x)
		57385: 64, // ident_args (2x)
		57387: 65, // opt_expr (2x)
		57366: 66, // IN (1x)
		57391: 67, // opt_stmt (1x)
		57392: 68, // pattern (1x)
		57393: 69, // program (1x)
		57394: 70, // rule (1x)
		57381: 71, // $default (0x)
		57345: 72, // error (0x)
		57358: 73, // LEN (0x)
		57380: 74, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"'}'",
		"'\\n'",
		"';'",
		"'{'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"expr",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"'~'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"'='",
		"']'",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"nls",
		"opt_nls",
		"ELSE",
		"opt_exprs",
		"opt_semi",
		"semi",
		"action",
		"ident_args",
		"opt_expr",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {69, 0},
		2:  {69, 2},
		3:  {70, 2},
		4:  {70, 3},
		5:  {70, 1},
		6:  {68, 5},
		7:  {68, 1},
		8:  {68, 1},
		9:  {68, 1},
		10: {68, 3},
		11: {63, 5},
		12: {56, 0},
		13: {56, 4},
		14: {54, 3},
		15: {54, 3},
		16: {54, 1},
		17: {54, 2},
		18: {54, 1},
		19: {54, 2},
		20: {54, 1},
		21: {54, 4},
		22: {54, 5},
		23: {54, 9},
		24: {54, 4},
		25: {54, 5},
		26: {54, 8},
		27: {54, 1},
		28: {54, 1},
		29: {54, 9},
		30: {54, 2},
		31: {55, 5},
		32: {55, 7},
		33: {55, 5},
		34: {60, 0},
		35: {60, 1},
		36: {53, 1},
		37: {53, 4},
		38: {33, 1},
		39: {33, 1},
		40: {33, 1},
		41: {33, 1},
		42: {33, 1},
		43: {33, 2},
		44: {33, 1},
		45: {33, 4},
		46: {33, 3},
		47: {33, 1},
		48: {33, 7},
		49: {33, 4},
		50: {33, 4},
		51: {33, 2},
		52: {33, 2},
		53: {33, 2},
		54: {33, 2},
		55: {33, 3},
		56: {33, 3},
		57: {33, 3},
		58: {33, 3},
		59: {33, 3},
		60: {33, 3},
		61: {33, 3},
		62: {33, 3},
		63: {33, 3},
		64: {33, 3},
		65: {33, 3},
		66: {33, 3},
		67: {33, 2},
		68: {33, 2},
		69: {33, 2},
		70: {33, 3},
		71: {33, 3},
		72: {33, 3},
		73: {33, 3},
		74: {33, 3},
		75: {33, 3},
		76: {64, 0},
		77: {64, 1},
		78: {64, 4},
		79: {57, 1},
		80: {57, 2},
		81: {67, 0},
		82: {67, 1},
		83: {65, 0},
		84: {65, 1},
		85: {58, 0},
		86: {58, 1},
		87: {62, 1},
		88: {61, 0},
		89: {61, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [188][]uint16{
		// 0
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 27: 89, 89, 89, 89, 69: 91},
		{113, 110, 111, 109, 108, 101, 99, 112, 106, 104, 95, 105, 102, 107, 103, 27: 100, 90, 96, 97, 33: 98, 63: 94, 68: 93, 70: 92},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 27: 88, 88, 88, 88},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25: 2, 255, 100, 2, 2, 2, 61: 276, 256, 275},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 27: 85, 85, 85, 85},
		// 5
		{117, 5: 271},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 25: 83, 83, 83, 83, 83, 83},
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 25: 82, 82, 82, 82, 82, 82},
		{147, 162, 163, 149, 148, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 25: 81, 81, 81, 81, 81, 81, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 25: 43, 43, 43, 43, 43, 43, 32: 269, 34: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		// 10
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 265},
		{218, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 34: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
		{51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 34: 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
		{50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 34: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 34: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		// 15
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 264},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 34: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 263},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 262},
		// 20
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 261},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 260},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 259},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 114},
		{147, 162, 163, 149, 148, 31: 258, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		// 25
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 34: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{117},
		{5: 119, 31: 14, 14, 64: 118},
		{31: 120, 121},
		{31: 13, 13},
		// 30
		{27: 127},
		{5: 5, 25: 123, 57: 124, 122},
		{5: 126},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 27: 11, 11, 11, 11},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 125, 27: 4, 4, 4, 4},
		// 35
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 27: 10, 10, 10, 10},
		{31: 12, 12},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 128},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 142, 33: 130, 53: 131, 129, 134},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 255, 61: 254, 256},
		// 40
		{147, 162, 163, 149, 148, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 32: 54, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 236},
		{32: 188, 51: 252},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 251},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 33: 185, 53: 250},
		{70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 59: 241},
		// 45
		{214, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 26: 9, 212, 33: 211, 53: 131, 215, 134, 67: 213},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 27: 204, 33: 205},
		{27: 197},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		// 50
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 33: 185, 53: 184, 60: 196},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 143},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 34: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		{147, 162, 163, 149, 148, 27: 144, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 194},
		// 55
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 185, 53: 192},
		{6: 191},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 31: 56, 33: 185, 53: 184, 60: 186},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 34: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 34: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		// 60
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 183},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 182},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 181},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 180},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 179},
		// 65
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 178},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 177},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 176},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 175},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 174},
		// 70
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 173},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 172},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 171},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 170},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 169},
		// 75
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 168},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 167},
		{147, 15, 15, 149, 148, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 34: 15, 15, 15, 15, 15, 145, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{147, 16, 16, 149, 148, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 34: 16, 16, 16, 16, 16, 145, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16},
		{147, 17, 17, 149, 148, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 34: 17, 17, 17, 17, 17, 145, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17},
		// 80
		{147, 18, 18, 149, 148, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 34: 166, 164, 165, 18, 18, 145, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{147, 19, 19, 149, 148, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 34: 166, 164, 165, 19, 19, 145, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{147, 162, 163, 149, 148, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 34: 166, 164, 165, 158, 156, 145, 146, 24, 24, 154, 157, 159, 24, 24, 155, 24, 24, 24, 24},
		{147, 162, 163, 149, 148, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 34: 166, 164, 165, 158, 156, 145, 146, 161, 25, 154, 157, 159, 25, 25, 155, 25, 25, 25, 25},
		{147, 162, 163, 149, 148, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 34: 166, 164, 165, 26, 26, 145, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		// 85
		{147, 162, 163, 149, 148, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 34: 166, 164, 165, 27, 27, 145, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		{147, 162, 163, 149, 148, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 34: 166, 164, 165, 28, 28, 145, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{147, 162, 163, 149, 148, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 34: 166, 164, 165, 29, 29, 145, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{147, 162, 163, 149, 148, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 34: 166, 164, 165, 158, 156, 145, 30, 30, 30, 30, 157, 159, 30, 30, 30, 30, 30, 30, 30},
		{147, 162, 163, 149, 148, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 34: 166, 164, 165, 158, 156, 145, 31, 31, 31, 31, 157, 159, 31, 31, 31, 31, 31, 31, 31},
		// 90
		{147, 162, 163, 149, 148, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 32, 32},
		{147, 162, 163, 149, 148, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 33, 33},
		{147, 162, 163, 149, 148, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 34, 34},
		{147, 162, 163, 149, 148, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 35, 35},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 31: 55, 188},
		// 95
		{147, 162, 163, 149, 148, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 31: 54, 54, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 52: 54},
		{31: 187},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 34: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 123, 57: 124, 189},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 190},
		// 100
		{147, 162, 163, 149, 148, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 31: 53, 53, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 53, 53},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 34: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{32: 188, 52: 193},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 34: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 195, 33: 130, 53: 131, 129, 134},
		// 105
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59: 59},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 198},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 199, 33: 130, 53: 131, 129, 134},
		{16: 200},
		// 110
		{201},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 202},
		{147, 162, 163, 149, 148, 31: 203, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 209},
		// 115
		{147, 162, 163, 149, 148, 27: 206, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 207},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 208, 33: 130, 53: 131, 129, 134},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 210, 33: 130, 53: 131, 129, 134},
		// 120
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{147, 162, 163, 149, 148, 26: 74, 237, 32: 54, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150, 236},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 234},
		{26: 226},
		{113, 110, 111, 109, 108, 216, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 114},
		// 125
		{26: 8},
		{218, 52, 52, 52, 52, 31: 52, 34: 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 66: 217},
		{5: 221},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 31: 56, 33: 185, 53: 184, 60: 219},
		{31: 220},
		// 130
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 34: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{31: 222},
		{27: 223},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 224},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 225, 33: 130, 53: 131, 129, 134},
		// 135
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 26: 7, 33: 228, 65: 227},
		{26: 229},
		{147, 162, 163, 149, 148, 26: 6, 6, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 27: 7, 33: 228, 65: 230},
		// 140
		{27: 231},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 232},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 233, 33: 130, 53: 131, 129, 134},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 235, 33: 130, 53: 131, 129, 134},
		// 145
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 240},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 238},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 239, 33: 130, 53: 131, 129, 134},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68},
		// 150
		{147, 162, 163, 149, 148, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{15: 242, 27: 243},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 246},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 244},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 245, 33: 130, 53: 131, 129, 134},
		// 155
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 59: 57},
		{147, 162, 163, 149, 148, 27: 247, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 56: 248},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 249, 33: 130, 53: 131, 129, 134},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 59: 58},
		// 160
		{71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 32: 188},
		{147, 162, 163, 149, 148, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 34: 166, 164, 165, 158, 156, 145, 146, 161, 153, 154, 157, 159, 151, 152, 155, 160, 150},
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 33: 185, 53: 253},
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 32: 188},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 123, 57: 124, 257},
		// 165
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 27: 3, 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 27: 1, 1, 1, 1},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 34: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{147, 21, 21, 149, 148, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 34: 21, 21, 21, 21, 21, 145, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 170
		{147, 22, 22, 149, 148, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 34: 22, 22, 22, 22, 22, 145, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{147, 23, 23, 149, 148, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 34: 23, 23, 23, 23, 23, 145, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{147, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 34: 37, 37, 37, 37, 37, 145, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{147, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 34: 39, 39, 39, 39, 39, 145, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{147, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 34: 47, 47, 47, 47, 47, 145, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 175
		{113, 110, 111, 109, 108, 101, 115, 112, 106, 104, 116, 105, 102, 107, 103, 141, 136, 138, 139, 132, 137, 135, 133, 140, 266, 33: 130, 53: 131, 129, 134},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 25: 2, 255, 2, 2, 2, 2, 61: 267, 256},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 123, 27: 5, 5, 5, 5, 57: 124, 268},
		{79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 27: 79, 79, 79, 79},
		{6: 270},
		// 180
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 25: 80, 80, 80, 80, 80, 80},
		{272},
		{5: 119, 31: 14, 14, 64: 273},
		{31: 274, 121},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 25: 84, 84, 84, 84, 84, 84},
		// 185
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 27: 87, 87, 87, 87},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 25: 123, 27: 5, 5, 5, 5, 57: 124, 277},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 27: 86, 86, 86, 86},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 72

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 14:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 15:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 20:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 21:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 23:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].opt_stmt, Expr2: yyS[yypt-5].opt_expr, Expr3: yyS[yypt-3].opt_expr, Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 26:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 28:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
		}
	case 31:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 32:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 33:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 34:
		{
			yyVAL.opt_exprs = []ast.Expr{}
		}
	case 35:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 38:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 39:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 40:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 41:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 42:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 43:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 45:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 46:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 47:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 48:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 49:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 50:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 51:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 52:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 53:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 54:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 55:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 66:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 67:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.ident_args = []string{}
		}
	case 77:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 78:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 81:
		{
			yyVAL.opt_stmt = nil
		}
	case 82:
		{
			yyVAL.opt_stmt = yyS[yypt-0].stmt
		}
	case 83:
		{
			yyVAL.opt_expr = nil
		}
	case 84:
		{
			yyVAL.opt_expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
