// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57382
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57380
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57381
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -94
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		CONCAT_OP:  7,
		'+':        8,
		'-':        8,
		'*':        9,
		'/':        9,
		'%':        9,
		'!':        10,
		UNARY:      10,
		PLUSPLUS:   11,
		MINUSMINUS: 11,
		'$':        12,
		'(':        13,
		')':        13,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (138x)
		43:    1,  // '+' (134x)
		45:    2,  // '-' (134x)
		57360: 3,  // MINUSMINUS (134x)
		57359: 4,  // PLUSPLUS (134x)
		57346: 5,  // IDENT (126x)
		57370: 6,  // REGEXP (122x)
		33:    7,  // '!' (120x)
		36:    8,  // '$' (120x)
		57350: 9,  // FALSE (120x)
		57378: 10, // FUNC (120x)
		57351: 11, // NIL (120x)
		57347: 12, // NUMBER (120x)
		57348: 13, // STRING (120x)
		57349: 14, // TRUE (120x)
		59:    15, // ';' (95x)
		125:   16, // '}' (95x)
		123:   17, // '{' (76x)
		10:    18, // '\n' (71x)
		57344: 19, // $end (62x)
		57367: 20, // BEGIN (62x)
		57368: 21, // END (62x)
		41:    22, // ')' (57x)
		44:    23, // ',' (57x)
		37:    24, // '%' (56x)
		42:    25, // '*' (56x)
		47:    26, // '/' (56x)
		60:    27, // '<' (56x)
		62:    28, // '>' (56x)
		57356: 29, // ANDAND (56x)
		57352: 30, // EQEQ (56x)
		57354: 31, // GE (56x)
		57355: 32, // LE (56x)
		57353: 33, // NEQ (56x)
		57357: 34, // OROR (56x)
		61:    35, // '=' (45x)
		57384: 36, // expr (44x)
		57398: 37, // simp_expr (44x)
		57402: 38, // variable (44x)
		91:    39, // '[' (43x)
		93:    40, // ']' (43x)
		126:   41, // '~' (43x)
		57364: 42, // DIVEQ (42x)
		57362: 43, // MINUSEQ (42x)
		57363: 44, // MULEQ (42x)
		57361: 45, // PLUSEQ (42x)
		57371: 46, // IF (23x)
		57374: 47, // WHILE (23x)
		57376: 48, // BREAK (22x)
		57377: 49, // CONTINUE (22x)
		57365: 50, // DELETE (22x)
		57375: 51, // DO (22x)
		57373: 52, // FOR (22x)
		57369: 53, // PRINT (22x)
		57379: 54, // RETURN (22x)
		57391: 55, // opt_semi (15x)
		57397: 56, // semi (15x)
		57393: 57, // opt_stmts (12x)
		57401: 58, // stmts (12x)
		57385: 59, // exprs (9x)
		57387: 60, // nls (6x)
		57390: 61, // opt_nls (6x)
		57372: 62, // ELSE (4x)
		57389: 63, // opt_exprs (3x)
		57399: 64, // stmt (3x)
		57400: 65, // stmt_if (3x)
		57383: 66, // action (2x)
		57386: 67, // ident_args (2x)
		57388: 68, // opt_expr (2x)
		57366: 69, // IN (1x)
		57392: 70, // opt_stmt (1x)
		57394: 71, // pattern (1x)
		57395: 72, // program (1x)
		57396: 73, // rule (1x)
		57382: 74, // $default (0x)
		57380: 75, // CONCAT_OP (0x)
		57345: 76, // error (0x)
		57358: 77, // LEN (0x)
		57381: 78, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"';'",
		"'}'",
		"'{'",
		"'\\n'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"'='",
		"expr",
		"simp_expr",
		"variable",
		"'['",
		"']'",
		"'~'",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"opt_semi",
		"semi",
		"opt_stmts",
		"stmts",
		"exprs",
		"nls",
		"opt_nls",
		"ELSE",
		"opt_exprs",
		"stmt",
		"stmt_if",
		"action",
		"ident_args",
		"opt_expr",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {72, 0},
		2:  {72, 2},
		3:  {73, 2},
		4:  {73, 3},
		5:  {73, 1},
		6:  {71, 5},
		7:  {71, 1},
		8:  {71, 1},
		9:  {71, 1},
		10: {71, 3},
		11: {66, 5},
		12: {57, 0},
		13: {57, 2},
		14: {58, 3},
		15: {58, 4},
		16: {64, 3},
		17: {64, 3},
		18: {64, 1},
		19: {64, 2},
		20: {64, 1},
		21: {64, 2},
		22: {64, 1},
		23: {64, 4},
		24: {64, 5},
		25: {64, 9},
		26: {64, 4},
		27: {64, 5},
		28: {64, 8},
		29: {64, 1},
		30: {64, 1},
		31: {64, 9},
		32: {64, 2},
		33: {65, 5},
		34: {65, 7},
		35: {65, 5},
		36: {63, 0},
		37: {63, 1},
		38: {59, 1},
		39: {59, 4},
		40: {36, 1},
		41: {36, 7},
		42: {36, 3},
		43: {36, 3},
		44: {36, 3},
		45: {36, 3},
		46: {36, 3},
		47: {36, 3},
		48: {36, 3},
		49: {36, 3},
		50: {36, 3},
		51: {36, 3},
		52: {36, 3},
		53: {36, 3},
		54: {37, 1},
		55: {37, 1},
		56: {37, 1},
		57: {37, 1},
		58: {37, 1},
		59: {37, 1},
		60: {37, 3},
		61: {37, 1},
		62: {37, 4},
		63: {37, 4},
		64: {37, 2},
		65: {37, 2},
		66: {37, 2},
		67: {37, 2},
		68: {37, 2},
		69: {37, 2},
		70: {37, 2},
		71: {37, 3},
		72: {37, 3},
		73: {37, 3},
		74: {37, 3},
		75: {37, 3},
		76: {37, 3},
		77: {38, 1},
		78: {38, 2},
		79: {38, 4},
		80: {67, 0},
		81: {67, 1},
		82: {67, 4},
		83: {60, 1},
		84: {60, 2},
		85: {70, 0},
		86: {70, 1},
		87: {68, 0},
		88: {68, 1},
		89: {61, 0},
		90: {61, 1},
		91: {56, 1},
		92: {55, 0},
		93: {55, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [196][]uint16{
		// 0
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 17: 93, 19: 93, 93, 93, 72: 95},
		{118, 115, 116, 114, 113, 112, 103, 117, 119, 109, 99, 110, 107, 111, 108, 17: 104, 19: 94, 100, 101, 36: 102, 105, 106, 66: 98, 71: 97, 73: 96},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 17: 92, 19: 92, 92, 92},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 17: 104, 2, 2, 2, 2, 55: 288, 174, 66: 287},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 17: 89, 19: 89, 89, 89},
		// 5
		{162, 5: 283},
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 17: 87, 87, 87, 87, 87},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 17: 86, 86, 86, 86, 86},
		{131, 134, 135, 133, 132, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 17: 85, 85, 85, 85, 85, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 17: 33, 33, 33, 33, 33, 23: 281, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39: 33, 41: 33},
		// 10
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 277, 170},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 39: 273, 54, 272, 54, 54, 54, 54},
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39: 40, 40, 40, 257, 255, 256, 254},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39: 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39: 38, 38, 38, 38, 38, 38, 38},
		// 15
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 39: 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 39: 36, 36, 36, 36, 36, 36, 36},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 39: 35, 35, 35, 35, 35, 35, 35},
		{219, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 39: 17, 17, 17, 17, 17, 17, 17},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 271, 105, 106},
		// 20
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 270, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 269, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 268, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 267, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 216, 105, 106},
		// 25
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 121, 105, 106},
		{162},
		{131, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 39: 16, 16, 16, 16, 16, 16, 16},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39: 33, 33, 33, 33, 33, 33, 33},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 161, 105, 106},
		// 30
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 160, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 159, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 158, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 157, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 156, 105, 106},
		// 35
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 155, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 154, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 22: 58, 36: 145, 105, 106, 59: 144, 63: 146},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 39: 29, 29, 29, 29, 29, 29, 29},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 39: 27, 27, 27, 27, 27, 27, 27},
		// 40
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 143, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 142, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 141, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 140, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 139, 105, 106},
		// 45
		{131, 18, 18, 133, 132, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 39: 18, 18, 18, 18, 18, 18, 18},
		{131, 19, 19, 133, 132, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 39: 19, 19, 19, 19, 19, 19, 19},
		{131, 20, 20, 133, 132, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 39: 20, 20, 20, 20, 20, 20, 20},
		{131, 21, 21, 133, 132, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 138, 136, 137, 21, 21, 21, 21, 21, 21, 21, 21, 21, 39: 21, 21, 21, 21, 21, 21, 21},
		{131, 22, 22, 133, 132, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 138, 136, 137, 22, 22, 22, 22, 22, 22, 22, 22, 22, 39: 22, 22, 22, 22, 22, 22, 22},
		// 50
		{15: 57, 57, 22: 57, 148},
		{131, 134, 135, 133, 132, 15: 56, 56, 22: 56, 56, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 40: 56},
		{22: 147},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 39: 31, 31, 31, 31, 31, 31, 31},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 150, 60: 151, 149},
		// 55
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 153, 105, 106},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 17: 11, 11, 11, 11, 11, 46: 11, 11, 11, 11, 11, 11, 11, 11, 11},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 17: 4, 152, 4, 4, 4, 46: 4, 4, 4, 4, 4, 4, 4, 4, 4},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 17: 10, 10, 10, 10, 10, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{131, 134, 135, 133, 132, 15: 55, 55, 22: 55, 55, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 55, 40: 55},
		// 60
		{131, 134, 135, 133, 132, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 138, 136, 137, 127, 125, 41, 123, 126, 128, 124, 41, 41, 39: 41, 41, 41, 41, 41, 41, 41},
		{131, 134, 135, 133, 132, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 42, 42, 39: 42, 42, 42, 42, 42, 42, 42},
		{131, 134, 135, 133, 132, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 138, 136, 137, 43, 43, 43, 43, 43, 43, 43, 43, 43, 39: 43, 43, 43, 43, 43, 43, 43},
		{131, 134, 135, 133, 132, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 138, 136, 137, 44, 44, 44, 44, 44, 44, 44, 44, 44, 39: 44, 44, 44, 44, 44, 44, 44},
		{131, 134, 135, 133, 132, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 138, 136, 137, 45, 45, 45, 45, 45, 45, 45, 45, 45, 39: 45, 45, 45, 45, 45, 45, 45},
		// 65
		{131, 134, 135, 133, 132, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 138, 136, 137, 46, 46, 46, 46, 46, 46, 46, 46, 46, 39: 46, 46, 46, 46, 46, 46, 46},
		{131, 134, 135, 133, 132, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 138, 136, 137, 127, 125, 47, 47, 126, 128, 47, 47, 47, 39: 47, 47, 47, 47, 47, 47, 47},
		{131, 134, 135, 133, 132, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 138, 136, 137, 127, 125, 48, 48, 126, 128, 48, 48, 48, 39: 48, 48, 48, 48, 48, 48, 48},
		{5: 164, 22: 14, 14, 67: 163},
		{22: 165, 166},
		// 70
		{22: 13, 13},
		{17: 169},
		{5: 5, 18: 150, 60: 151, 167},
		{5: 168},
		{22: 12, 12},
		// 75
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 172, 170},
		{15: 173, 2, 55: 263, 264},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 150, 46: 5, 5, 5, 5, 5, 5, 5, 5, 5, 60: 151, 176},
		{16: 175},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 16: 3, 3, 3, 3, 3, 3, 46: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 80
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 17: 1, 1, 1, 1, 1, 46: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 39: 53, 53, 53, 53, 53, 53, 53},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 180, 105, 178, 46: 190, 185, 187, 188, 181, 186, 184, 182, 189, 59: 179, 64: 177, 183},
		{15: 80, 80},
		{40, 40, 40, 40, 40, 15: 40, 40, 40, 23: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 253, 39: 40, 41: 40, 257, 255, 256, 254},
		// 85
		{23: 148, 35: 251},
		{131, 134, 135, 133, 132, 15: 76, 76, 23: 56, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 56},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 250, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 74, 74, 36: 145, 105, 106, 59: 249},
		{15: 72, 72, 62: 240},
		// 90
		{213, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 9, 17: 211, 36: 210, 105, 178, 46: 190, 185, 187, 188, 181, 186, 184, 182, 189, 59: 179, 64: 214, 183, 70: 212},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 17: 203, 36: 204, 105, 106},
		{17: 196},
		{15: 65, 65},
		{15: 64, 64},
		// 95
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 58, 58, 36: 145, 105, 106, 59: 144, 63: 195},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 191, 105, 106},
		{131, 134, 135, 133, 132, 17: 192, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 193, 170},
		{16: 194},
		// 100
		{15: 61, 61, 62: 61},
		{15: 62, 62},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 197, 170},
		{16: 198},
		{47: 199},
		// 105
		{200},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 201, 105, 106},
		{131, 134, 135, 133, 132, 22: 202, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{15: 66, 66},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 208, 170},
		// 110
		{131, 134, 135, 133, 132, 17: 205, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 206, 170},
		{16: 207},
		{15: 67, 67},
		{16: 209},
		// 115
		{15: 68, 68},
		{131, 134, 135, 133, 132, 15: 76, 17: 237, 23: 56, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 56},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 235, 170},
		{15: 227},
		{118, 115, 116, 114, 113, 215, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 216, 105, 106},
		// 120
		{15: 8},
		{219, 17, 17, 17, 17, 22: 17, 24: 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 39: 17, 41: 17, 17, 17, 17, 17, 69: 218},
		{131, 134, 135, 133, 132, 22: 217, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 39: 23, 23, 23, 23, 23, 23, 23},
		{5: 222},
		// 125
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 22: 58, 36: 145, 105, 106, 59: 144, 63: 220},
		{22: 221},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39: 32, 32, 32, 32, 32, 32, 32},
		{22: 223},
		{17: 224},
		// 130
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 225, 170},
		{16: 226},
		{15: 63, 63},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 7, 36: 229, 105, 106, 68: 228},
		{15: 230},
		// 135
		{131, 134, 135, 133, 132, 15: 6, 17: 6, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 17: 7, 36: 229, 105, 106, 68: 231},
		{17: 232},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 233, 170},
		{16: 234},
		// 140
		{15: 69, 69},
		{16: 236},
		{15: 71, 71},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 238, 170},
		{16: 239},
		// 145
		{15: 70, 70},
		{17: 242, 46: 241},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 245, 105, 106},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 243, 170},
		{16: 244},
		// 150
		{15: 59, 59, 62: 59},
		{131, 134, 135, 133, 132, 17: 246, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 82, 18: 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2, 171, 174, 247, 170},
		{16: 248},
		{15: 60, 60, 62: 60},
		// 155
		{15: 73, 73, 23: 148},
		{131, 134, 135, 133, 132, 15: 75, 75, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 145, 105, 106, 59: 252},
		{15: 77, 77, 23: 148},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 262, 105, 106},
		// 160
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 261, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 260, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 259, 105, 106},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 258, 105, 106},
		{131, 134, 135, 133, 132, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 49, 39: 49, 49, 49, 49, 49, 49, 49},
		// 165
		{131, 134, 135, 133, 132, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 50, 39: 50, 50, 50, 50, 50, 50, 50},
		{131, 134, 135, 133, 132, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 51, 39: 51, 51, 51, 51, 51, 51, 51},
		{131, 134, 135, 133, 132, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129, 52, 39: 52, 52, 52, 52, 52, 52, 52},
		{131, 134, 135, 133, 132, 15: 78, 78, 24: 138, 136, 137, 127, 125, 130, 123, 126, 128, 124, 129},
		{16: 81},
		// 170
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 16: 1, 18: 150, 46: 5, 5, 5, 5, 5, 5, 5, 5, 5, 60: 151, 265},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 180, 105, 178, 46: 190, 185, 187, 188, 181, 186, 184, 182, 189, 59: 179, 64: 266, 183},
		{15: 79, 79},
		{131, 24, 24, 133, 132, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 39: 24, 24, 24, 24, 24, 24, 24},
		{131, 25, 25, 133, 132, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 39: 25, 25, 25, 25, 25, 25, 25},
		// 175
		{131, 26, 26, 133, 132, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39: 26, 26, 26, 26, 26, 26, 26},
		{131, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 39: 28, 28, 28, 28, 28, 28, 28},
		{131, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 39: 30, 30, 30, 30, 30, 30, 30},
		{6: 276},
		{118, 115, 116, 114, 113, 112, 122, 117, 119, 109, 120, 110, 107, 111, 108, 36: 145, 105, 106, 59: 274},
		// 180
		{23: 148, 40: 275},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 39: 15, 15, 15, 15, 15, 15, 15},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39: 34, 34, 34, 34, 34, 34, 34},
		{16: 278},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 173, 17: 2, 2, 2, 2, 2, 55: 279, 174},
		// 185
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17: 5, 150, 5, 5, 5, 60: 151, 280},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 17: 83, 19: 83, 83, 83},
		{6: 282},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 17: 84, 84, 84, 84, 84},
		{284},
		// 190
		{5: 164, 22: 14, 14, 67: 285},
		{22: 286, 166},
		{88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 17: 88, 88, 88, 88, 88},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 17: 91, 19: 91, 91, 91},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17: 5, 150, 5, 5, 5, 60: 151, 289},
		// 195
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 17: 90, 19: 90, 90, 90},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 76

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 17:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 18:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 21:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 22:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 25:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 27:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 34:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 35:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 37:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 40:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 41:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 55:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 56:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 57:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 58:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 59:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 60:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 61:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 62:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 63:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 64:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 65:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 66:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 67:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 68:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 78:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 79:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 80:
		{
			yyVAL.ident_args = []string{}
		}
	case 81:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 82:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 85:
		{
			yyVAL.stmt = nil
		}
	case 86:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 87:
		{
			yyVAL.expr = nil
		}
	case 88:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
