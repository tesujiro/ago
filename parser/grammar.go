// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

type yySymType struct {
	yys     int
	token   ast.Token
	rule    ast.Rule
	rules   []ast.Rule
	pattern ast.Pattern
	stmt    ast.Stmt
	stmts   []ast.Stmt
	expr    ast.Expr
	exprs   []ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57378
	yyEofCode  = 57344
	ANDAND     = 57365
	BEGIN      = 57349
	BREAK      = 57369
	CONTINUE   = 57370
	DIVEQ      = 57376
	ELSE       = 57364
	END        = 57350
	EQEQ       = 57359
	FALSE      = 57355
	FOR        = 57368
	FUNC       = 57357
	GE         = 57361
	IDENT      = 57346
	IF         = 57363
	LE         = 57362
	LEN        = 57367
	LEX_BEGIN  = 57351
	LEX_END    = 57352
	LEX_PRINT  = 57353
	MINUSEQ    = 57374
	MINUSMINUS = 57372
	MULEQ      = 57375
	NEQ        = 57360
	NIL        = 57356
	NUMBER     = 57347
	OROR       = 57366
	PLUSEQ     = 57373
	PLUSPLUS   = 57371
	RETURN     = 57358
	STRING     = 57348
	TRUE       = 57354
	UNARY      = 57377
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -39
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
		'$':        9,
		'(':        10,
		')':        10,
	}

	yyXLAT = map[int]int{
		36:    0,  // '$' (54x)
		40:    1,  // '(' (54x)
		57346: 2,  // IDENT (54x)
		57347: 3,  // NUMBER (54x)
		57348: 4,  // STRING (54x)
		44:    5,  // ',' (32x)
		61:    6,  // '=' (32x)
		123:   7,  // '{' (32x)
		10:    8,  // '\n' (31x)
		125:   9,  // '}' (31x)
		59:    10, // ';' (23x)
		37:    11, // '%' (21x)
		42:    12, // '*' (21x)
		43:    13, // '+' (21x)
		45:    14, // '-' (21x)
		47:    15, // '/' (21x)
		60:    16, // '<' (21x)
		62:    17, // '>' (21x)
		57359: 18, // EQEQ (21x)
		57361: 19, // GE (21x)
		57362: 20, // LE (21x)
		57360: 21, // NEQ (21x)
		41:    22, // ')' (17x)
		57380: 23, // expr (17x)
		57344: 24, // $end (12x)
		57351: 25, // LEX_BEGIN (12x)
		57352: 26, // LEX_END (12x)
		57382: 27, // nls (3x)
		57383: 28, // opt_nls (3x)
		57381: 29, // exprs (2x)
		57384: 30, // opt_semi (2x)
		57388: 31, // semi (2x)
		57379: 32, // action (1x)
		57385: 33, // pattern (1x)
		57386: 34, // program (1x)
		57387: 35, // rule (1x)
		57389: 36, // stmt (1x)
		57390: 37, // stmts (1x)
		57378: 38, // $default (0x)
		57365: 39, // ANDAND (0x)
		57349: 40, // BEGIN (0x)
		57369: 41, // BREAK (0x)
		57370: 42, // CONTINUE (0x)
		57376: 43, // DIVEQ (0x)
		57364: 44, // ELSE (0x)
		57350: 45, // END (0x)
		57345: 46, // error (0x)
		57355: 47, // FALSE (0x)
		57368: 48, // FOR (0x)
		57357: 49, // FUNC (0x)
		57363: 50, // IF (0x)
		57367: 51, // LEN (0x)
		57353: 52, // LEX_PRINT (0x)
		57374: 53, // MINUSEQ (0x)
		57372: 54, // MINUSMINUS (0x)
		57375: 55, // MULEQ (0x)
		57356: 56, // NIL (0x)
		57366: 57, // OROR (0x)
		57373: 58, // PLUSEQ (0x)
		57371: 59, // PLUSPLUS (0x)
		57358: 60, // RETURN (0x)
		57354: 61, // TRUE (0x)
		57377: 62, // UNARY (0x)
	}

	yySymNames = []string{
		"'$'",
		"'('",
		"IDENT",
		"NUMBER",
		"STRING",
		"','",
		"'='",
		"'{'",
		"'\\n'",
		"'}'",
		"';'",
		"'%'",
		"'*'",
		"'+'",
		"'-'",
		"'/'",
		"'<'",
		"'>'",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"')'",
		"expr",
		"$end",
		"LEX_BEGIN",
		"LEX_END",
		"nls",
		"opt_nls",
		"exprs",
		"opt_semi",
		"semi",
		"action",
		"pattern",
		"program",
		"rule",
		"stmt",
		"stmts",
		"$default",
		"ANDAND",
		"BEGIN",
		"BREAK",
		"CONTINUE",
		"DIVEQ",
		"ELSE",
		"END",
		"error",
		"FALSE",
		"FOR",
		"FUNC",
		"IF",
		"LEN",
		"LEX_PRINT",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NIL",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"RETURN",
		"TRUE",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {34, 0},
		2:  {34, 2},
		3:  {35, 2},
		4:  {33, 0},
		5:  {33, 1},
		6:  {33, 1},
		7:  {33, 1},
		8:  {32, 5},
		9:  {37, 0},
		10: {37, 4},
		11: {36, 3},
		12: {36, 3},
		13: {36, 1},
		14: {29, 0},
		15: {29, 4},
		16: {23, 1},
		17: {23, 1},
		18: {23, 2},
		19: {23, 1},
		20: {23, 3},
		21: {23, 3},
		22: {23, 3},
		23: {23, 3},
		24: {23, 3},
		25: {23, 3},
		26: {23, 3},
		27: {23, 3},
		28: {23, 3},
		29: {23, 3},
		30: {23, 3},
		31: {23, 3},
		32: {27, 1},
		33: {27, 2},
		34: {28, 0},
		35: {28, 1},
		36: {31, 1},
		37: {30, 0},
		38: {30, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [60][]uint8{
		// 0
		{38, 38, 38, 38, 38, 7: 38, 24: 38, 38, 38, 34: 40},
		{48, 50, 46, 47, 49, 7: 35, 23: 45, 39, 43, 44, 33: 42, 35: 41},
		{37, 37, 37, 37, 37, 7: 37, 24: 37, 37, 37},
		{7: 77, 32: 76},
		{7: 34},
		// 5
		{7: 33},
		{7: 32, 11: 63, 61, 59, 60, 62, 56, 54, 52, 55, 57, 53},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{48, 50, 46, 47, 49, 23: 75},
		// 10
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{48, 50, 46, 47, 49, 23: 51},
		{11: 63, 61, 59, 60, 62, 56, 54, 52, 55, 57, 53, 58},
		{48, 50, 46, 47, 49, 23: 74},
		{48, 50, 46, 47, 49, 23: 73},
		// 15
		{48, 50, 46, 47, 49, 23: 72},
		{48, 50, 46, 47, 49, 23: 71},
		{48, 50, 46, 47, 49, 23: 70},
		{48, 50, 46, 47, 49, 23: 69},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13},
		// 20
		{48, 50, 46, 47, 49, 23: 68},
		{48, 50, 46, 47, 49, 23: 67},
		{48, 50, 46, 47, 49, 23: 66},
		{48, 50, 46, 47, 49, 23: 65},
		{48, 50, 46, 47, 49, 23: 64},
		// 25
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 63, 61, 11, 11, 62, 11, 11, 11, 11, 11, 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 63, 61, 12, 12, 62, 12, 12, 12, 12, 12, 12, 12},
		// 30
		{14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 63, 61, 59, 60, 62, 14, 14, 14, 14, 14, 14, 14},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 63, 61, 59, 60, 62, 15, 15, 15, 15, 15, 15, 15},
		{16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 63, 61, 59, 60, 62, 16, 16, 16, 16, 16, 16, 16},
		{17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 63, 61, 59, 60, 62, 17, 17, 17, 17, 17, 17, 17},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 63, 61, 59, 60, 62, 56, 54, 18, 55, 57, 18, 18},
		// 35
		{19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 63, 61, 59, 60, 62, 56, 54, 19, 55, 57, 19, 19},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		{36, 36, 36, 36, 36, 7: 36, 24: 36, 36, 36},
		{30, 30, 30, 30, 30, 30, 30, 9: 30, 37: 78},
		{48, 50, 46, 47, 49, 25, 25, 9: 79, 23: 81, 29: 82, 36: 80},
		// 40
		{2, 2, 2, 2, 2, 7: 2, 2, 10: 94, 24: 2, 2, 2, 30: 97, 95},
		{2, 2, 2, 2, 2, 2, 2, 8: 2, 2, 94, 30: 93, 95},
		{26, 26, 26, 26, 26, 26, 91, 8: 26, 26, 26, 63, 61, 59, 60, 62, 56, 54, 52, 55, 57, 53},
		{5: 84, 83},
		{25, 25, 25, 25, 25, 25, 25, 8: 25, 25, 25, 29: 90},
		// 45
		{5, 5, 5, 5, 5, 8: 86, 27: 87, 85},
		{48, 50, 46, 47, 49, 23: 89},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 24: 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 88, 4, 24: 4, 4, 4},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 24: 6, 6, 6},
		// 50
		{24, 24, 24, 24, 24, 24, 24, 8: 24, 24, 24, 63, 61, 59, 60, 62, 56, 54, 52, 55, 57, 53},
		{27, 27, 27, 27, 27, 84, 27, 8: 27, 27, 27},
		{48, 50, 46, 47, 49, 23: 92},
		{28, 28, 28, 28, 28, 28, 28, 8: 28, 28, 28, 63, 61, 59, 60, 62, 56, 54, 52, 55, 57, 53},
		{5, 5, 5, 5, 5, 5, 5, 8: 86, 5, 27: 87, 96},
		// 55
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 24: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 24: 1, 1, 1},
		{29, 29, 29, 29, 29, 29, 29, 9: 29},
		{5, 5, 5, 5, 5, 7: 5, 86, 24: 5, 5, 5, 87, 98},
		{31, 31, 31, 31, 31, 7: 31, 24: 31, 31, 31},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 46

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 5:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 6:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 7:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 9:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 10:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 11:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 12:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 13:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 14:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 15:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 16:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 17:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 18:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 20:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 21:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 22:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 23:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 24:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 25:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 26:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 27:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 28:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 29:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 30:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 31:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
