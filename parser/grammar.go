// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	opt_stmt   ast.Stmt
	stmts      []ast.Stmt
	stmt_if    ast.Stmt
	expr       ast.Expr
	opt_expr   ast.Expr
	exprs      []ast.Expr
	opt_exprs  []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57381
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57380
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -88
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		'+':        7,
		'-':        7,
		'*':        8,
		'/':        8,
		'%':        8,
		'!':        9,
		UNARY:      9,
		PLUSPLUS:   10,
		MINUSMINUS: 10,
		'$':        11,
		'(':        12,
		')':        12,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (159x)
		43:    1,  // '+' (155x)
		45:    2,  // '-' (155x)
		57346: 3,  // IDENT (153x)
		57370: 4,  // REGEXP (149x)
		33:    5,  // '!' (147x)
		36:    6,  // '$' (147x)
		57350: 7,  // FALSE (147x)
		57378: 8,  // FUNC (147x)
		57351: 9,  // NIL (147x)
		57347: 10, // NUMBER (147x)
		57348: 11, // STRING (147x)
		57349: 12, // TRUE (147x)
		57371: 13, // IF (94x)
		57374: 14, // WHILE (94x)
		57376: 15, // BREAK (93x)
		57377: 16, // CONTINUE (93x)
		57365: 17, // DELETE (93x)
		57375: 18, // DO (93x)
		57373: 19, // FOR (93x)
		57369: 20, // PRINT (93x)
		57379: 21, // RETURN (93x)
		125:   22, // '}' (92x)
		10:    23, // '\n' (79x)
		59:    24, // ';' (76x)
		123:   25, // '{' (71x)
		57344: 26, // $end (58x)
		57367: 27, // BEGIN (58x)
		57368: 28, // END (58x)
		41:    29, // ')' (53x)
		44:    30, // ',' (52x)
		57383: 31, // expr (52x)
		37:    32, // '%' (51x)
		42:    33, // '*' (51x)
		47:    34, // '/' (51x)
		60:    35, // '<' (51x)
		62:    36, // '>' (51x)
		91:    37, // '[' (51x)
		126:   38, // '~' (51x)
		57356: 39, // ANDAND (51x)
		57364: 40, // DIVEQ (51x)
		57352: 41, // EQEQ (51x)
		57354: 42, // GE (51x)
		57355: 43, // LE (51x)
		57362: 44, // MINUSEQ (51x)
		57360: 45, // MINUSMINUS (51x)
		57363: 46, // MULEQ (51x)
		57353: 47, // NEQ (51x)
		57357: 48, // OROR (51x)
		57361: 49, // PLUSEQ (51x)
		57359: 50, // PLUSPLUS (51x)
		61:    51, // '=' (40x)
		93:    52, // ']' (39x)
		57384: 53, // exprs (19x)
		57396: 54, // stmt (13x)
		57397: 55, // stmt_if (13x)
		57398: 56, // stmts (12x)
		57386: 57, // nls (5x)
		57389: 58, // opt_nls (5x)
		57372: 59, // ELSE (4x)
		57388: 60, // opt_exprs (3x)
		57390: 61, // opt_semi (3x)
		57395: 62, // semi (3x)
		57382: 63, // action (2x)
		57385: 64, // ident_args (2x)
		57387: 65, // opt_expr (2x)
		57366: 66, // IN (1x)
		57391: 67, // opt_stmt (1x)
		57392: 68, // pattern (1x)
		57393: 69, // program (1x)
		57394: 70, // rule (1x)
		57381: 71, // $default (0x)
		57345: 72, // error (0x)
		57358: 73, // LEN (0x)
		57380: 74, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"'}'",
		"'\\n'",
		"';'",
		"'{'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"expr",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'['",
		"'~'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"'='",
		"']'",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"nls",
		"opt_nls",
		"ELSE",
		"opt_exprs",
		"opt_semi",
		"semi",
		"action",
		"ident_args",
		"opt_expr",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {69, 0},
		2:  {69, 2},
		3:  {70, 2},
		4:  {70, 3},
		5:  {70, 1},
		6:  {68, 5},
		7:  {68, 1},
		8:  {68, 1},
		9:  {68, 1},
		10: {68, 3},
		11: {63, 5},
		12: {56, 0},
		13: {56, 4},
		14: {54, 3},
		15: {54, 3},
		16: {54, 1},
		17: {54, 2},
		18: {54, 1},
		19: {54, 2},
		20: {54, 1},
		21: {54, 4},
		22: {54, 5},
		23: {54, 9},
		24: {54, 4},
		25: {54, 5},
		26: {54, 8},
		27: {54, 1},
		28: {54, 1},
		29: {54, 9},
		30: {54, 2},
		31: {55, 5},
		32: {55, 7},
		33: {55, 5},
		34: {60, 0},
		35: {60, 1},
		36: {53, 1},
		37: {53, 4},
		38: {31, 1},
		39: {31, 1},
		40: {31, 1},
		41: {31, 1},
		42: {31, 1},
		43: {31, 2},
		44: {31, 1},
		45: {31, 4},
		46: {31, 3},
		47: {31, 1},
		48: {31, 7},
		49: {31, 4},
		50: {31, 4},
		51: {31, 2},
		52: {31, 2},
		53: {31, 3},
		54: {31, 3},
		55: {31, 3},
		56: {31, 3},
		57: {31, 3},
		58: {31, 3},
		59: {31, 3},
		60: {31, 3},
		61: {31, 3},
		62: {31, 3},
		63: {31, 3},
		64: {31, 3},
		65: {31, 2},
		66: {31, 2},
		67: {31, 2},
		68: {31, 3},
		69: {31, 3},
		70: {31, 3},
		71: {31, 3},
		72: {31, 3},
		73: {31, 3},
		74: {64, 0},
		75: {64, 1},
		76: {64, 4},
		77: {57, 1},
		78: {57, 2},
		79: {67, 0},
		80: {67, 1},
		81: {65, 0},
		82: {65, 1},
		83: {58, 0},
		84: {58, 1},
		85: {62, 1},
		86: {61, 0},
		87: {61, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [184][]uint16{
		// 0
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 25: 87, 87, 87, 87, 69: 89},
		{109, 106, 107, 99, 97, 108, 104, 102, 93, 103, 100, 105, 101, 25: 98, 88, 94, 95, 31: 96, 63: 92, 68: 91, 70: 90},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 25: 86, 86, 86, 86},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 23: 2, 251, 98, 2, 2, 2, 61: 270, 252, 269},
		{83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 83, 25: 83, 83, 83, 83},
		// 5
		{113, 3: 265},
		{81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 81, 23: 81, 81, 81, 81, 81, 81},
		{80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 80, 23: 80, 80, 80, 80, 80, 80},
		{143, 158, 159, 79, 79, 79, 79, 79, 79, 79, 79, 79, 79, 23: 79, 79, 79, 79, 79, 79, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 23: 41, 41, 41, 41, 41, 41, 30: 263, 32: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		// 10
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 259},
		{214, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 32: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 32: 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 32: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 32: 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		// 15
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 32: 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 258},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 32: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 257},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 256},
		// 20
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 255},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 110},
		{143, 158, 159, 29: 254, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 32: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41},
		{113},
		// 25
		{3: 115, 29: 14, 14, 64: 114},
		{29: 116, 117},
		{29: 13, 13},
		{25: 123},
		{3: 5, 23: 119, 57: 120, 118},
		// 30
		{3: 122},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 25: 11, 11, 11, 11},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 121, 25: 4, 4, 4, 4},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 25: 10, 10, 10, 10},
		{29: 12, 12},
		// 35
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 124},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 138, 31: 126, 53: 127, 125, 130},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 251, 61: 250, 252},
		{143, 158, 159, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 30: 52, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 232},
		{30: 184, 51: 248},
		// 40
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 247},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 70, 31: 181, 53: 246},
		{68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 68, 59: 237},
		{210, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 24: 9, 208, 31: 207, 53: 127, 211, 130, 67: 209},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 25: 200, 31: 201},
		// 45
		{25: 193},
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
		{60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 31: 181, 53: 180, 60: 192},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 139},
		// 50
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 32: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		{143, 158, 159, 25: 140, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 190},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 181, 53: 188},
		{4: 187},
		// 55
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 29: 54, 31: 181, 53: 180, 60: 182},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 32: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 32: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 179},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 178},
		// 60
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 177},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 176},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 175},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 174},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 173},
		// 65
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 172},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 171},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 170},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 169},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 168},
		// 70
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 167},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 166},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 165},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 164},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 163},
		// 75
		{143, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 32: 15, 15, 15, 15, 15, 141, 15, 15, 15, 15, 15, 15, 15, 145, 15, 15, 15, 15, 144, 15, 15},
		{143, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32: 16, 16, 16, 16, 16, 141, 16, 16, 16, 16, 16, 16, 16, 145, 16, 16, 16, 16, 144, 16, 16},
		{143, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 32: 17, 17, 17, 17, 17, 141, 17, 17, 17, 17, 17, 17, 17, 145, 17, 17, 17, 17, 144, 17, 17},
		{143, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 32: 162, 160, 161, 18, 18, 141, 18, 18, 18, 18, 18, 18, 18, 145, 18, 18, 18, 18, 144, 18, 18},
		{143, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 32: 162, 160, 161, 19, 19, 141, 19, 19, 19, 19, 19, 19, 19, 145, 19, 19, 19, 19, 144, 19, 19},
		// 80
		{143, 158, 159, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 32: 162, 160, 161, 154, 152, 141, 142, 24, 24, 150, 153, 155, 24, 145, 24, 151, 24, 24, 144, 24, 24},
		{143, 158, 159, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 32: 162, 160, 161, 154, 152, 141, 142, 157, 25, 150, 153, 155, 25, 145, 25, 151, 25, 25, 144, 25, 25},
		{143, 158, 159, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 32: 162, 160, 161, 26, 26, 141, 26, 26, 26, 26, 26, 26, 26, 145, 26, 26, 26, 26, 144, 26, 26},
		{143, 158, 159, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 32: 162, 160, 161, 27, 27, 141, 27, 27, 27, 27, 27, 27, 27, 145, 27, 27, 27, 27, 144, 27, 27},
		{143, 158, 159, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 32: 162, 160, 161, 28, 28, 141, 28, 28, 28, 28, 28, 28, 28, 145, 28, 28, 28, 28, 144, 28, 28},
		// 85
		{143, 158, 159, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 32: 162, 160, 161, 29, 29, 141, 29, 29, 29, 29, 29, 29, 29, 145, 29, 29, 29, 29, 144, 29, 29},
		{143, 158, 159, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 32: 162, 160, 161, 154, 152, 141, 30, 30, 30, 30, 153, 155, 30, 145, 30, 30, 30, 30, 144, 30, 30},
		{143, 158, 159, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32: 162, 160, 161, 154, 152, 141, 31, 31, 31, 31, 153, 155, 31, 145, 31, 31, 31, 31, 144, 31, 31},
		{143, 158, 159, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 32, 32},
		{143, 158, 159, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 33, 33},
		// 90
		{143, 158, 159, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 34, 34},
		{143, 158, 159, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 35, 35},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 29: 53, 184},
		{143, 158, 159, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 29: 52, 52, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 52: 52},
		{29: 183},
		// 95
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 32: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23: 119, 57: 120, 185},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 186},
		{143, 158, 159, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 29: 51, 51, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 51, 51},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 32: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42},
		// 100
		{30: 184, 52: 189},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 32: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 191, 31: 126, 53: 127, 125, 130},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 59: 57},
		{58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58},
		// 105
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 194},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 195, 31: 126, 53: 127, 125, 130},
		{14: 196},
		{197},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 198},
		// 110
		{143, 158, 159, 29: 199, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 205},
		{143, 158, 159, 25: 202, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 203},
		// 115
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 204, 31: 126, 53: 127, 125, 130},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 206, 31: 126, 53: 127, 125, 130},
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64},
		{143, 158, 159, 24: 72, 233, 30: 52, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144, 232},
		// 120
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 230},
		{24: 222},
		{109, 106, 107, 212, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 110},
		{24: 8},
		{214, 50, 50, 29: 50, 32: 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 66: 213},
		// 125
		{3: 217},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 29: 54, 31: 181, 53: 180, 60: 215},
		{29: 216},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 32: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{29: 218},
		// 130
		{25: 219},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 220},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 221, 31: 126, 53: 127, 125, 130},
		{59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 24: 7, 31: 224, 65: 223},
		// 135
		{24: 225},
		{143, 158, 159, 24: 6, 6, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 25: 7, 31: 224, 65: 226},
		{25: 227},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 228},
		// 140
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 229, 31: 126, 53: 127, 125, 130},
		{65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 231, 31: 126, 53: 127, 125, 130},
		{67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67, 67},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 236},
		// 145
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 234},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 235, 31: 126, 53: 127, 125, 130},
		{66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66},
		{143, 158, 159, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		{13: 238, 25: 239},
		// 150
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 242},
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 240},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 241, 31: 126, 53: 127, 125, 130},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 59: 55},
		{143, 158, 159, 25: 243, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		// 155
		{76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 76, 56: 244},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 245, 31: 126, 53: 127, 125, 130},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 59: 56},
		{69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 69, 30: 184},
		{143, 158, 159, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 32: 162, 160, 161, 154, 152, 141, 142, 157, 149, 150, 153, 155, 147, 145, 148, 151, 156, 146, 144},
		// 160
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 31: 181, 53: 249},
		{73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 73, 30: 184},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 119, 57: 120, 253},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 25: 3, 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 25: 1, 1, 1, 1},
		// 165
		{75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75, 75},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 32: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{143, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 32: 21, 21, 21, 21, 21, 141, 21, 21, 21, 21, 21, 21, 21, 145, 21, 21, 21, 21, 144, 21, 21},
		{143, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 32: 22, 22, 22, 22, 22, 141, 22, 22, 22, 22, 22, 22, 22, 145, 22, 22, 22, 22, 144, 22, 22},
		{143, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 32: 23, 23, 23, 23, 23, 141, 23, 23, 23, 23, 23, 23, 23, 145, 23, 23, 23, 23, 144, 23, 23},
		// 170
		{143, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 32: 45, 45, 45, 45, 45, 141, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		{109, 106, 107, 99, 111, 108, 104, 102, 112, 103, 100, 105, 101, 137, 132, 134, 135, 128, 133, 131, 129, 136, 260, 31: 126, 53: 127, 125, 130},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 23: 2, 251, 2, 2, 2, 2, 61: 261, 252},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23: 119, 25: 5, 5, 5, 5, 57: 120, 262},
		{77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 77, 25: 77, 77, 77, 77},
		// 175
		{4: 264},
		{78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 78, 23: 78, 78, 78, 78, 78, 78},
		{266},
		{3: 115, 29: 14, 14, 64: 267},
		{29: 268, 117},
		// 180
		{82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 82, 23: 82, 82, 82, 82, 82, 82},
		{85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 85, 25: 85, 85, 85, 85},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 23: 119, 25: 5, 5, 5, 5, 57: 120, 271},
		{84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 25: 84, 84, 84, 84},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 72

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 14:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 15:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 20:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 21:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 23:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].opt_stmt, Expr2: yyS[yypt-5].opt_expr, Expr3: yyS[yypt-3].opt_expr, Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 26:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 28:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].opt_exprs}
		}
	case 31:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 32:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 33:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 34:
		{
			yyVAL.opt_exprs = []ast.Expr{}
		}
	case 35:
		{
			yyVAL.opt_exprs = yyS[yypt-0].exprs
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 38:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 39:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 40:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 41:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 42:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 43:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 45:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 46:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 47:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 48:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 49:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 50:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].opt_exprs}
		}
	case 51:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 52:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 53:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 66:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 67:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 68:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.ident_args = []string{}
		}
	case 75:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 76:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 79:
		{
			yyVAL.opt_stmt = nil
		}
	case 80:
		{
			yyVAL.opt_stmt = yyS[yypt-0].stmt
		}
	case 81:
		{
			yyVAL.opt_expr = nil
		}
	case 82:
		{
			yyVAL.opt_expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
