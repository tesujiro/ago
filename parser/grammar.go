// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys     int
	token   ast.Token
	rule    ast.Rule
	rules   []ast.Rule
	pattern ast.Pattern
	stmt    ast.Stmt
	stmts   []ast.Stmt
	stmt_if ast.Stmt
	expr    ast.Expr
	exprs   []ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57379
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57374
	CONTINUE   = 57375
	DELETE     = 57365
	DIVEQ      = 57364
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57376
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57377
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57378
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -65
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
		'$':        9,
		'(':        10,
		')':        10,
	}

	yyXLAT = map[int]int{
		43:    0,  // '+' (110x)
		45:    1,  // '-' (110x)
		33:    2,  // '!' (105x)
		36:    3,  // '$' (105x)
		40:    4,  // '(' (105x)
		57350: 5,  // FALSE (105x)
		57346: 6,  // IDENT (105x)
		57351: 7,  // NIL (105x)
		57347: 8,  // NUMBER (105x)
		57348: 9,  // STRING (105x)
		57349: 10, // TRUE (105x)
		57371: 11, // IF (68x)
		125:   12, // '}' (67x)
		57374: 13, // BREAK (67x)
		57375: 14, // CONTINUE (67x)
		57365: 15, // DELETE (67x)
		57373: 16, // FOR (67x)
		57369: 17, // PRINT (67x)
		10:    18, // '\n' (57x)
		123:   19, // '{' (52x)
		59:    20, // ';' (49x)
		37:    21, // '%' (41x)
		42:    22, // '*' (41x)
		47:    23, // '/' (41x)
		60:    24, // '<' (41x)
		62:    25, // '>' (41x)
		57356: 26, // ANDAND (41x)
		57364: 27, // DIVEQ (41x)
		57352: 28, // EQEQ (41x)
		57354: 29, // GE (41x)
		57355: 30, // LE (41x)
		57362: 31, // MINUSEQ (41x)
		57360: 32, // MINUSMINUS (41x)
		57363: 33, // MULEQ (41x)
		57353: 34, // NEQ (41x)
		57357: 35, // OROR (41x)
		57361: 36, // PLUSEQ (41x)
		57359: 37, // PLUSPLUS (41x)
		44:    38, // ',' (38x)
		57381: 39, // expr (38x)
		61:    40, // '=' (34x)
		93:    41, // ']' (34x)
		41:    42, // ')' (32x)
		57344: 43, // $end (12x)
		57367: 44, // BEGIN (12x)
		57368: 45, // END (12x)
		57382: 46, // exprs (9x)
		57390: 47, // stmt (6x)
		57391: 48, // stmt_if (6x)
		57392: 49, // stmts (6x)
		57372: 50, // ELSE (4x)
		57383: 51, // nls (3x)
		57384: 52, // opt_nls (3x)
		57385: 53, // opt_semi (2x)
		57389: 54, // semi (2x)
		91:    55, // '[' (1x)
		57380: 56, // action (1x)
		57386: 57, // pattern (1x)
		57387: 58, // program (1x)
		57388: 59, // rule (1x)
		57379: 60, // $default (0x)
		57345: 61, // error (0x)
		57376: 62, // FUNC (0x)
		57366: 63, // IN (0x)
		57358: 64, // LEN (0x)
		57370: 65, // REGEXP (0x)
		57377: 66, // RETURN (0x)
		57378: 67, // UNARY (0x)
	}

	yySymNames = []string{
		"'+'",
		"'-'",
		"'!'",
		"'$'",
		"'('",
		"FALSE",
		"IDENT",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"'}'",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"FOR",
		"PRINT",
		"'\\n'",
		"'{'",
		"';'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"','",
		"expr",
		"'='",
		"']'",
		"')'",
		"$end",
		"BEGIN",
		"END",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"ELSE",
		"nls",
		"opt_nls",
		"opt_semi",
		"semi",
		"'['",
		"action",
		"pattern",
		"program",
		"rule",
		"$default",
		"error",
		"FUNC",
		"IN",
		"LEN",
		"REGEXP",
		"RETURN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {58, 0},
		2:  {58, 2},
		3:  {59, 2},
		4:  {57, 0},
		5:  {57, 1},
		6:  {57, 1},
		7:  {57, 1},
		8:  {56, 5},
		9:  {49, 0},
		10: {49, 4},
		11: {47, 3},
		12: {47, 3},
		13: {47, 1},
		14: {47, 2},
		15: {47, 1},
		16: {47, 2},
		17: {47, 1},
		18: {47, 4},
		19: {47, 5},
		20: {47, 1},
		21: {47, 1},
		22: {48, 5},
		23: {48, 7},
		24: {48, 5},
		25: {46, 1},
		26: {46, 4},
		27: {39, 1},
		28: {39, 1},
		29: {39, 1},
		30: {39, 1},
		31: {39, 1},
		32: {39, 2},
		33: {39, 1},
		34: {39, 4},
		35: {39, 2},
		36: {39, 2},
		37: {39, 2},
		38: {39, 2},
		39: {39, 2},
		40: {39, 3},
		41: {39, 3},
		42: {39, 3},
		43: {39, 3},
		44: {39, 3},
		45: {39, 3},
		46: {39, 3},
		47: {39, 3},
		48: {39, 3},
		49: {39, 3},
		50: {39, 3},
		51: {39, 3},
		52: {39, 3},
		53: {39, 3},
		54: {39, 3},
		55: {39, 3},
		56: {39, 3},
		57: {39, 3},
		58: {51, 1},
		59: {51, 2},
		60: {52, 0},
		61: {52, 1},
		62: {54, 1},
		63: {53, 0},
		64: {53, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [116][]uint16{
		// 0
		{64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 19: 64, 43: 64, 64, 64, 58: 66},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 19: 61, 39: 71, 43: 65, 69, 70, 57: 68, 59: 67},
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 19: 63, 43: 63, 63, 63},
		{19: 136, 56: 135},
		{19: 60},
		// 5
		{19: 59},
		{99, 100, 19: 58, 21: 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 40: 38, 38, 38, 55: 125},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 40: 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 40: 36, 36, 36},
		// 10
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 40: 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 40: 34, 34, 34},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 124},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 40: 32, 32, 32},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 123},
		// 15
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 122},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 121},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 83},
		{99, 100, 21: 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 42: 98},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 40: 27, 27, 27},
		// 20
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 40: 26, 26, 26},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 120},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 119},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 118},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 117},
		// 25
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 116},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 115},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 114},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 113},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 112},
		// 30
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 111},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 110},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 109},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 40: 13, 13, 13},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 108},
		// 35
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 107},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 106},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 105},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 104},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 89, 8, 8, 8, 87, 8, 88, 8, 8, 86, 8, 8, 40: 8, 8, 8},
		// 40
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 89, 9, 9, 9, 87, 9, 88, 9, 9, 86, 9, 9, 40: 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 89, 10, 10, 10, 87, 10, 88, 10, 10, 86, 10, 10, 40: 10, 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 103, 101, 102, 11, 11, 11, 89, 11, 11, 11, 87, 11, 88, 11, 11, 86, 11, 11, 40: 11, 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 103, 101, 102, 12, 12, 12, 89, 12, 12, 12, 87, 12, 88, 12, 12, 86, 12, 12, 40: 12, 12, 12},
		{99, 100, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 103, 101, 102, 94, 92, 14, 89, 90, 93, 95, 87, 85, 88, 91, 14, 86, 84, 14, 40: 14, 14, 14},
		// 45
		{99, 100, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 15, 86, 84, 15, 40: 15, 15, 15},
		{99, 100, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 103, 101, 102, 16, 16, 16, 89, 16, 16, 16, 87, 85, 88, 16, 16, 86, 84, 16, 40: 16, 16, 16},
		{99, 100, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 103, 101, 102, 17, 17, 17, 89, 17, 17, 17, 87, 85, 88, 17, 17, 86, 84, 17, 40: 17, 17, 17},
		{99, 100, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 103, 101, 102, 18, 18, 18, 89, 18, 18, 18, 87, 85, 88, 18, 18, 86, 84, 18, 40: 18, 18, 18},
		{99, 100, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 103, 101, 102, 19, 19, 19, 89, 19, 19, 19, 87, 85, 88, 19, 19, 86, 84, 19, 40: 19, 19, 19},
		// 50
		{99, 100, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 103, 101, 102, 94, 92, 20, 89, 20, 93, 95, 87, 85, 88, 20, 20, 86, 84, 20, 40: 20, 20, 20},
		{99, 100, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 103, 101, 102, 94, 92, 21, 89, 21, 93, 95, 87, 85, 88, 21, 21, 86, 84, 21, 40: 21, 21, 21},
		{99, 100, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 22, 40: 22, 22, 22},
		{99, 100, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 23, 40: 23, 23, 23},
		{99, 100, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 24, 40: 24, 24, 24},
		// 55
		{99, 100, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 25, 40: 25, 25, 25},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 89, 28, 28, 28, 87, 28, 88, 28, 28, 86, 28, 28, 40: 28, 28, 28},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 89, 29, 29, 29, 87, 29, 88, 29, 29, 86, 29, 29, 40: 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 89, 30, 30, 30, 87, 30, 88, 30, 30, 86, 30, 30, 40: 30, 30, 30},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 89, 33, 33, 33, 87, 33, 88, 33, 33, 86, 33, 33, 40: 33, 33, 33},
		// 60
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 126, 46: 127},
		{99, 100, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 20: 40, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 40, 41: 40},
		{38: 128, 41: 129},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 131, 51: 132, 130},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 40: 31, 31, 31},
		// 65
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 134},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 43: 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 133, 4, 43: 4, 4, 4},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 43: 6, 6, 6},
		{99, 100, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 20: 39, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 39, 40: 39, 39},
		// 70
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 19: 62, 43: 62, 62, 62},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 137},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 138, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 18: 2, 2, 176, 43: 2, 2, 2, 53: 179, 177},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 20: 176, 53: 175, 177},
		// 75
		{99, 100, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 20: 52, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84, 40, 40: 173},
		{38: 128, 40: 171},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 170},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 50, 50, 50, 50, 50, 50, 50, 50, 20: 50, 39: 126, 46: 169},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 20: 48, 50: 160},
		// 80
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 19: 153, 39: 154},
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 20: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 20: 44},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 149},
		{99, 100, 19: 150, 21: 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		// 85
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 151},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 152, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 20: 43, 50: 43},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 158},
		{99, 100, 19: 155, 21: 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		// 90
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 156},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 157, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 20: 46},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 159, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 20: 47},
		// 95
		{11: 161, 19: 162},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 165},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 163},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 164, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 20: 41, 50: 41},
		// 100
		{99, 100, 19: 166, 21: 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 49: 167},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 148, 168, 146, 147, 142, 145, 143, 39: 140, 46: 141, 139, 144},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 20: 42, 50: 42},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 20: 49, 38: 128},
		// 105
		{99, 100, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 20: 51, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 126, 46: 172},
		{53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 20: 53, 38: 128},
		{79, 80, 81, 77, 82, 75, 72, 76, 73, 78, 74, 39: 174},
		{99, 100, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 20: 54, 103, 101, 102, 94, 92, 97, 89, 90, 93, 95, 87, 85, 88, 91, 96, 86, 84},
		// 110
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 131, 51: 132, 178},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 43: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 43: 1, 1, 1},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 131, 5, 43: 5, 5, 5, 51: 132, 180},
		// 115
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 19: 57, 43: 57, 57, 57},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 61

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 5:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 6:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 7:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 9:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 10:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 11:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 12:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 13:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 14:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 15:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 16:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 17:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 18:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 19:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 20:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 21:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 22:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 23:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 24:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 25:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 26:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 27:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 28:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 29:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 30:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 31:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 32:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 33:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 34:
		{
			yyVAL.expr = &ast.ItemExpr{Literal: yyS[yypt-3].token.Literal, Index: yyS[yypt-1].exprs}
		}
	case 35:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 38:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 39:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 40:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
