// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57382
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57380
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57381
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -97
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		'~':        4,
		EQEQ:       5,
		NEQ:        5,
		'>':        6,
		'<':        6,
		GE:         6,
		LE:         6,
		CONCAT_OP:  7,
		'+':        8,
		'-':        8,
		'*':        9,
		'/':        9,
		'%':        9,
		'!':        10,
		UNARY:      10,
		PLUSPLUS:   11,
		MINUSMINUS: 11,
		'$':        12,
		'(':        13,
		')':        13,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (139x)
		43:    1,  // '+' (135x)
		45:    2,  // '-' (135x)
		57360: 3,  // MINUSMINUS (135x)
		57359: 4,  // PLUSPLUS (135x)
		57346: 5,  // IDENT (127x)
		57370: 6,  // REGEXP (123x)
		33:    7,  // '!' (121x)
		36:    8,  // '$' (121x)
		57350: 9,  // FALSE (121x)
		57378: 10, // FUNC (121x)
		57351: 11, // NIL (121x)
		57347: 12, // NUMBER (121x)
		57348: 13, // STRING (121x)
		57349: 14, // TRUE (121x)
		125:   15, // '}' (100x)
		10:    16, // '\n' (99x)
		59:    17, // ';' (95x)
		123:   18, // '{' (76x)
		57344: 19, // $end (62x)
		57367: 20, // BEGIN (62x)
		57368: 21, // END (62x)
		41:    22, // ')' (57x)
		44:    23, // ',' (57x)
		37:    24, // '%' (56x)
		42:    25, // '*' (56x)
		47:    26, // '/' (56x)
		60:    27, // '<' (56x)
		62:    28, // '>' (56x)
		57356: 29, // ANDAND (56x)
		57352: 30, // EQEQ (56x)
		57354: 31, // GE (56x)
		57355: 32, // LE (56x)
		57353: 33, // NEQ (56x)
		57357: 34, // OROR (56x)
		61:    35, // '=' (45x)
		57384: 36, // expr (44x)
		57398: 37, // simp_expr (44x)
		57403: 38, // variable (44x)
		91:    39, // '[' (43x)
		93:    40, // ']' (43x)
		126:   41, // '~' (43x)
		57364: 42, // DIVEQ (42x)
		57362: 43, // MINUSEQ (42x)
		57363: 44, // MULEQ (42x)
		57361: 45, // PLUSEQ (42x)
		57371: 46, // IF (25x)
		57374: 47, // WHILE (25x)
		57376: 48, // BREAK (24x)
		57377: 49, // CONTINUE (24x)
		57365: 50, // DELETE (24x)
		57375: 51, // DO (24x)
		57373: 52, // FOR (24x)
		57369: 53, // PRINT (24x)
		57379: 54, // RETURN (24x)
		57387: 55, // nls (19x)
		57393: 56, // opt_term (15x)
		57397: 57, // semi (15x)
		57402: 58, // term (15x)
		57392: 59, // opt_stmts (12x)
		57401: 60, // stmts (12x)
		57385: 61, // exprs (9x)
		57372: 62, // ELSE (4x)
		57389: 63, // opt_exprs (3x)
		57390: 64, // opt_nls (3x)
		57399: 65, // stmt (3x)
		57400: 66, // stmt_if (3x)
		57383: 67, // action (2x)
		57386: 68, // ident_args (2x)
		57388: 69, // opt_expr (2x)
		57366: 70, // IN (1x)
		57391: 71, // opt_stmt (1x)
		57394: 72, // pattern (1x)
		57395: 73, // program (1x)
		57396: 74, // rule (1x)
		57382: 75, // $default (0x)
		57380: 76, // CONCAT_OP (0x)
		57345: 77, // error (0x)
		57358: 78, // LEN (0x)
		57381: 79, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"IDENT",
		"REGEXP",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'}'",
		"'\\n'",
		"';'",
		"'{'",
		"$end",
		"BEGIN",
		"END",
		"')'",
		"','",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"'='",
		"expr",
		"simp_expr",
		"variable",
		"'['",
		"']'",
		"'~'",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"nls",
		"opt_term",
		"semi",
		"term",
		"opt_stmts",
		"stmts",
		"exprs",
		"ELSE",
		"opt_exprs",
		"opt_nls",
		"stmt",
		"stmt_if",
		"action",
		"ident_args",
		"opt_expr",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {73, 0},
		2:  {73, 2},
		3:  {74, 2},
		4:  {74, 2},
		5:  {74, 1},
		6:  {72, 5},
		7:  {72, 1},
		8:  {72, 1},
		9:  {72, 1},
		10: {72, 3},
		11: {67, 4},
		12: {59, 0},
		13: {59, 2},
		14: {60, 2},
		15: {60, 4},
		16: {65, 3},
		17: {65, 3},
		18: {65, 1},
		19: {65, 2},
		20: {65, 1},
		21: {65, 2},
		22: {65, 1},
		23: {65, 4},
		24: {65, 5},
		25: {65, 9},
		26: {65, 4},
		27: {65, 5},
		28: {65, 8},
		29: {65, 1},
		30: {65, 1},
		31: {65, 9},
		32: {65, 2},
		33: {66, 5},
		34: {66, 7},
		35: {66, 5},
		36: {63, 0},
		37: {63, 1},
		38: {61, 1},
		39: {61, 4},
		40: {36, 1},
		41: {36, 7},
		42: {36, 3},
		43: {36, 3},
		44: {36, 3},
		45: {36, 3},
		46: {36, 3},
		47: {36, 3},
		48: {36, 3},
		49: {36, 3},
		50: {36, 3},
		51: {36, 3},
		52: {36, 3},
		53: {36, 3},
		54: {37, 1},
		55: {37, 1},
		56: {37, 1},
		57: {37, 1},
		58: {37, 1},
		59: {37, 1},
		60: {37, 3},
		61: {37, 1},
		62: {37, 4},
		63: {37, 4},
		64: {37, 2},
		65: {37, 2},
		66: {37, 2},
		67: {37, 2},
		68: {37, 2},
		69: {37, 2},
		70: {37, 2},
		71: {37, 3},
		72: {37, 3},
		73: {37, 3},
		74: {37, 3},
		75: {37, 3},
		76: {37, 3},
		77: {38, 1},
		78: {38, 2},
		79: {38, 4},
		80: {68, 0},
		81: {68, 1},
		82: {68, 4},
		83: {71, 0},
		84: {71, 1},
		85: {69, 0},
		86: {69, 1},
		87: {56, 0},
		88: {56, 1},
		89: {58, 2},
		90: {58, 1},
		91: {58, 1},
		92: {57, 1},
		93: {64, 0},
		94: {64, 1},
		95: {55, 1},
		96: {55, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [197][]uint16{
		// 0
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 18: 96, 96, 96, 96, 73: 98},
		{121, 118, 119, 117, 116, 115, 106, 120, 122, 112, 102, 113, 110, 114, 111, 18: 107, 97, 103, 104, 36: 105, 108, 109, 67: 101, 72: 100, 74: 99},
		{95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 18: 95, 95, 95, 95},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16: 154, 179, 107, 10, 10, 10, 55: 178, 293, 177, 176, 67: 292},
		{92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 92, 18: 92, 92, 92, 92},
		// 5
		{165, 5: 288},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16: 90, 90, 90, 90, 90, 90},
		{89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 89, 16: 89, 89, 89, 89, 89, 89},
		{134, 137, 138, 136, 135, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 16: 88, 88, 88, 88, 88, 88, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 16: 36, 36, 36, 36, 36, 36, 23: 286, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 39: 36, 41: 36},
		// 10
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 283, 173},
		{57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 39: 279, 57, 278, 57, 57, 57, 57},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 39: 43, 43, 43, 262, 260, 261, 259},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 39: 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 39: 41, 41, 41, 41, 41, 41, 41},
		// 15
		{40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39: 40, 40, 40, 40, 40, 40, 40},
		{39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39: 39, 39, 39, 39, 39, 39, 39},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39: 38, 38, 38, 38, 38, 38, 38},
		{224, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 39: 20, 20, 20, 20, 20, 20, 20},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 277, 108, 109},
		// 20
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 276, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 275, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 274, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 273, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 221, 108, 109},
		// 25
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 124, 108, 109},
		{165},
		{134, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 39: 19, 19, 19, 19, 19, 19, 19},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 39: 36, 36, 36, 36, 36, 36, 36},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 164, 108, 109},
		// 30
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 163, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 162, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 161, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 160, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 159, 108, 109},
		// 35
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 158, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 157, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 22: 61, 36: 148, 108, 109, 61: 147, 63: 149},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39: 32, 32, 32, 32, 32, 32, 32},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 39: 30, 30, 30, 30, 30, 30, 30},
		// 40
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 146, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 145, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 144, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 143, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 142, 108, 109},
		// 45
		{134, 21, 21, 136, 135, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 39: 21, 21, 21, 21, 21, 21, 21},
		{134, 22, 22, 136, 135, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 39: 22, 22, 22, 22, 22, 22, 22},
		{134, 23, 23, 136, 135, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 39: 23, 23, 23, 23, 23, 23, 23},
		{134, 24, 24, 136, 135, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 141, 139, 140, 24, 24, 24, 24, 24, 24, 24, 24, 24, 39: 24, 24, 24, 24, 24, 24, 24},
		{134, 25, 25, 136, 135, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 141, 139, 140, 25, 25, 25, 25, 25, 25, 25, 25, 25, 39: 25, 25, 25, 25, 25, 25, 25},
		// 50
		{15: 60, 60, 60, 22: 60, 151},
		{134, 137, 138, 136, 135, 15: 59, 59, 59, 22: 59, 59, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 40: 59},
		{22: 150},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39: 34, 34, 34, 34, 34, 34, 34},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 16: 154, 55: 153, 64: 152},
		// 55
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 156, 108, 109},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 16: 155},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 18: 2, 2, 2, 2, 46: 2, 2, 2, 2, 2, 2, 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 18: 1, 1, 1, 1, 46: 1, 1, 1, 1, 1, 1, 1, 1, 1},
		{134, 137, 138, 136, 135, 15: 58, 58, 58, 22: 58, 58, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 58, 40: 58},
		// 60
		{134, 137, 138, 136, 135, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 141, 139, 140, 130, 128, 44, 126, 129, 131, 127, 44, 44, 39: 44, 44, 44, 44, 44, 44, 44},
		{134, 137, 138, 136, 135, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 45, 45, 39: 45, 45, 45, 45, 45, 45, 45},
		{134, 137, 138, 136, 135, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 141, 139, 140, 46, 46, 46, 46, 46, 46, 46, 46, 46, 39: 46, 46, 46, 46, 46, 46, 46},
		{134, 137, 138, 136, 135, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 141, 139, 140, 47, 47, 47, 47, 47, 47, 47, 47, 47, 39: 47, 47, 47, 47, 47, 47, 47},
		{134, 137, 138, 136, 135, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 141, 139, 140, 48, 48, 48, 48, 48, 48, 48, 48, 48, 39: 48, 48, 48, 48, 48, 48, 48},
		// 65
		{134, 137, 138, 136, 135, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 141, 139, 140, 49, 49, 49, 49, 49, 49, 49, 49, 49, 39: 49, 49, 49, 49, 49, 49, 49},
		{134, 137, 138, 136, 135, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 141, 139, 140, 130, 128, 50, 50, 129, 131, 50, 50, 50, 39: 50, 50, 50, 50, 50, 50, 50},
		{134, 137, 138, 136, 135, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 141, 139, 140, 130, 128, 51, 51, 129, 131, 51, 51, 51, 39: 51, 51, 51, 51, 51, 51, 51},
		{5: 167, 22: 17, 17, 68: 166},
		{22: 168, 169},
		// 70
		{22: 16, 16},
		{18: 172},
		{5: 4, 16: 154, 55: 153, 64: 170},
		{5: 171},
		{22: 15, 15},
		// 75
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 175, 173},
		{15: 10, 154, 179, 55: 178, 268, 269, 176},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 185, 108, 183, 46: 195, 190, 192, 193, 186, 191, 189, 187, 194, 61: 184, 65: 182, 188},
		{15: 181},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 18: 9, 9, 9, 9, 46: 9, 9, 9, 9, 9, 9, 9, 9, 9},
		// 80
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 16: 154, 18: 6, 6, 6, 6, 46: 6, 6, 6, 6, 6, 6, 6, 6, 6, 180},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 155, 18: 7, 7, 7, 7, 46: 7, 7, 7, 7, 7, 7, 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 18: 5, 5, 5, 5, 46: 5, 5, 5, 5, 5, 5, 5, 5, 5},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16: 155, 18: 8, 8, 8, 8, 46: 8, 8, 8, 8, 8, 8, 8, 8, 8},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 39: 56, 56, 56, 56, 56, 56, 56},
		// 85
		{15: 83, 83, 83},
		{43, 43, 43, 43, 43, 15: 43, 43, 43, 43, 23: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 258, 39: 43, 41: 43, 262, 260, 261, 259},
		{23: 151, 35: 256},
		{134, 137, 138, 136, 135, 15: 79, 79, 79, 23: 59, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 59},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 255, 108, 109},
		// 90
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 77, 77, 77, 36: 148, 108, 109, 61: 254},
		{15: 75, 75, 75, 62: 245},
		{218, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 17: 14, 216, 36: 215, 108, 183, 46: 195, 190, 192, 193, 186, 191, 189, 187, 194, 61: 184, 65: 219, 188, 71: 217},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 18: 208, 36: 209, 108, 109},
		{18: 201},
		// 95
		{15: 68, 68, 68},
		{15: 67, 67, 67},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 61, 61, 61, 36: 148, 108, 109, 61: 147, 63: 200},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 196, 108, 109},
		{134, 137, 138, 136, 135, 18: 197, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		// 100
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 198, 173},
		{15: 199},
		{15: 64, 64, 64, 62: 64},
		{15: 65, 65, 65},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 202, 173},
		// 105
		{15: 203},
		{47: 204},
		{205},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 206, 108, 109},
		{134, 137, 138, 136, 135, 22: 207, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		// 110
		{15: 69, 69, 69},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 213, 173},
		{134, 137, 138, 136, 135, 18: 210, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 211, 173},
		{15: 212},
		// 115
		{15: 70, 70, 70},
		{15: 214},
		{15: 71, 71, 71},
		{134, 137, 138, 136, 135, 17: 79, 242, 23: 59, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 59},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 240, 173},
		// 120
		{17: 232},
		{121, 118, 119, 117, 116, 220, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 221, 108, 109},
		{17: 13},
		{224, 20, 20, 20, 20, 22: 20, 24: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 39: 20, 41: 20, 20, 20, 20, 20, 70: 223},
		{134, 137, 138, 136, 135, 22: 222, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		// 125
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39: 26, 26, 26, 26, 26, 26, 26},
		{5: 227},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 22: 61, 36: 148, 108, 109, 61: 147, 63: 225},
		{22: 226},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 39: 35, 35, 35, 35, 35, 35, 35},
		// 130
		{22: 228},
		{18: 229},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 230, 173},
		{15: 231},
		{15: 66, 66, 66},
		// 135
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 17: 12, 36: 234, 108, 109, 69: 233},
		{17: 235},
		{134, 137, 138, 136, 135, 17: 11, 11, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 18: 12, 36: 234, 108, 109, 69: 236},
		{18: 237},
		// 140
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 238, 173},
		{15: 239},
		{15: 72, 72, 72},
		{15: 241},
		{15: 74, 74, 74},
		// 145
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 243, 173},
		{15: 244},
		{15: 73, 73, 73},
		{18: 247, 46: 246},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 250, 108, 109},
		// 150
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 248, 173},
		{15: 249},
		{15: 62, 62, 62, 62: 62},
		{134, 137, 138, 136, 135, 18: 251, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 85, 154, 179, 46: 10, 10, 10, 10, 10, 10, 10, 10, 10, 178, 174, 177, 176, 252, 173},
		// 155
		{15: 253},
		{15: 63, 63, 63, 62: 63},
		{15: 76, 76, 76, 23: 151},
		{134, 137, 138, 136, 135, 15: 78, 78, 78, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 148, 108, 109, 61: 257},
		// 160
		{15: 80, 80, 80, 23: 151},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 267, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 266, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 265, 108, 109},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 264, 108, 109},
		// 165
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 263, 108, 109},
		{134, 137, 138, 136, 135, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 52, 39: 52, 52, 52, 52, 52, 52, 52},
		{134, 137, 138, 136, 135, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 53, 39: 53, 53, 53, 53, 53, 53, 53},
		{134, 137, 138, 136, 135, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 54, 39: 54, 54, 54, 54, 54, 54, 54},
		{134, 137, 138, 136, 135, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132, 55, 39: 55, 55, 55, 55, 55, 55, 55},
		// 170
		{134, 137, 138, 136, 135, 15: 81, 81, 81, 24: 141, 139, 140, 130, 128, 133, 126, 129, 131, 127, 132},
		{15: 84},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 6, 154, 46: 4, 4, 4, 4, 4, 4, 4, 4, 4, 271, 64: 270},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 185, 108, 183, 46: 195, 190, 192, 193, 186, 191, 189, 187, 194, 61: 184, 65: 272, 188},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 8, 155, 46: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		// 175
		{15: 82, 82, 82},
		{134, 27, 27, 136, 135, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 39: 27, 27, 27, 27, 27, 27, 27},
		{134, 28, 28, 136, 135, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 39: 28, 28, 28, 28, 28, 28, 28},
		{134, 29, 29, 136, 135, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 39: 29, 29, 29, 29, 29, 29, 29},
		{134, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 39: 31, 31, 31, 31, 31, 31, 31},
		// 180
		{134, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 39: 33, 33, 33, 33, 33, 33, 33},
		{6: 282},
		{121, 118, 119, 117, 116, 115, 125, 120, 122, 112, 123, 113, 110, 114, 111, 36: 148, 108, 109, 61: 280},
		{23: 151, 40: 281},
		{18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 39: 18, 18, 18, 18, 18, 18, 18},
		// 185
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 39: 37, 37, 37, 37, 37, 37, 37},
		{15: 284},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 16: 154, 179, 10, 10, 10, 10, 55: 178, 285, 177, 176},
		{86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 18: 86, 86, 86, 86},
		{6: 287},
		// 190
		{87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 16: 87, 87, 87, 87, 87, 87},
		{289},
		{5: 167, 22: 17, 17, 68: 290},
		{22: 291, 169},
		{91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 16: 91, 91, 91, 91, 91, 91},
		// 195
		{94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 18: 94, 94, 94, 94},
		{93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 18: 93, 93, 93, 93},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 77

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-0].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-2].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 17:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 18:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 21:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 22:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 25:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 27:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 34:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 35:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 37:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 40:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 41:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 55:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 56:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 57:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 58:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 59:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 60:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 61:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 62:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 63:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 64:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 65:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 66:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 67:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 68:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 69:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 78:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 79:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 80:
		{
			yyVAL.ident_args = []string{}
		}
	case 81:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 82:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 83:
		{
			yyVAL.stmt = nil
		}
	case 84:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 85:
		{
			yyVAL.expr = nil
		}
	case 86:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
