// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys     int
	token   ast.Token
	rule    ast.Rule
	rules   []ast.Rule
	pattern ast.Pattern
	stmt    ast.Stmt
	stmts   []ast.Stmt
	stmt_if ast.Stmt
	expr    ast.Expr
	exprs   []ast.Expr
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57377
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57365
	BREAK      = 57372
	CONTINUE   = 57373
	DIVEQ      = 57364
	ELSE       = 57370
	END        = 57366
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57371
	FUNC       = 57374
	GE         = 57354
	IDENT      = 57346
	IF         = 57369
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57367
	REGEXP     = 57368
	RETURN     = 57375
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57376
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -64
)

var (
	yyPrec = map[int]int{
		'=':        0,
		OROR:       1,
		ANDAND:     2,
		IDENT:      3,
		EQEQ:       4,
		NEQ:        4,
		'>':        5,
		'<':        5,
		GE:         5,
		LE:         5,
		'+':        6,
		'-':        6,
		PLUSPLUS:   6,
		MINUSMINUS: 6,
		'*':        7,
		'/':        7,
		'%':        7,
		UNARY:      8,
		'$':        9,
		'(':        10,
		')':        10,
	}

	yyXLAT = map[int]int{
		43:    0,  // '+' (108x)
		45:    1,  // '-' (108x)
		33:    2,  // '!' (103x)
		36:    3,  // '$' (103x)
		40:    4,  // '(' (103x)
		57350: 5,  // FALSE (103x)
		57346: 6,  // IDENT (103x)
		57351: 7,  // NIL (103x)
		57347: 8,  // NUMBER (103x)
		57348: 9,  // STRING (103x)
		57349: 10, // TRUE (103x)
		57369: 11, // IF (67x)
		125:   12, // '}' (66x)
		57372: 13, // BREAK (66x)
		57373: 14, // CONTINUE (66x)
		57371: 15, // FOR (66x)
		57367: 16, // PRINT (66x)
		10:    17, // '\n' (56x)
		123:   18, // '{' (52x)
		59:    19, // ';' (48x)
		37:    20, // '%' (40x)
		42:    21, // '*' (40x)
		47:    22, // '/' (40x)
		60:    23, // '<' (40x)
		62:    24, // '>' (40x)
		57356: 25, // ANDAND (40x)
		57364: 26, // DIVEQ (40x)
		57352: 27, // EQEQ (40x)
		57354: 28, // GE (40x)
		57355: 29, // LE (40x)
		57362: 30, // MINUSEQ (40x)
		57360: 31, // MINUSMINUS (40x)
		57363: 32, // MULEQ (40x)
		57353: 33, // NEQ (40x)
		57357: 34, // OROR (40x)
		57361: 35, // PLUSEQ (40x)
		57359: 36, // PLUSPLUS (40x)
		44:    37, // ',' (38x)
		57379: 38, // expr (37x)
		61:    39, // '=' (34x)
		93:    40, // ']' (34x)
		41:    41, // ')' (32x)
		57344: 42, // $end (12x)
		57365: 43, // BEGIN (12x)
		57366: 44, // END (12x)
		57380: 45, // exprs (9x)
		57388: 46, // stmt (6x)
		57389: 47, // stmt_if (6x)
		57390: 48, // stmts (6x)
		57370: 49, // ELSE (4x)
		57381: 50, // nls (3x)
		57382: 51, // opt_nls (3x)
		57383: 52, // opt_semi (2x)
		57387: 53, // semi (2x)
		91:    54, // '[' (1x)
		57378: 55, // action (1x)
		57384: 56, // pattern (1x)
		57385: 57, // program (1x)
		57386: 58, // rule (1x)
		57377: 59, // $default (0x)
		57345: 60, // error (0x)
		57374: 61, // FUNC (0x)
		57358: 62, // LEN (0x)
		57368: 63, // REGEXP (0x)
		57375: 64, // RETURN (0x)
		57376: 65, // UNARY (0x)
	}

	yySymNames = []string{
		"'+'",
		"'-'",
		"'!'",
		"'$'",
		"'('",
		"FALSE",
		"IDENT",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"IF",
		"'}'",
		"BREAK",
		"CONTINUE",
		"FOR",
		"PRINT",
		"'\\n'",
		"'{'",
		"';'",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"ANDAND",
		"DIVEQ",
		"EQEQ",
		"GE",
		"LE",
		"MINUSEQ",
		"MINUSMINUS",
		"MULEQ",
		"NEQ",
		"OROR",
		"PLUSEQ",
		"PLUSPLUS",
		"','",
		"expr",
		"'='",
		"']'",
		"')'",
		"$end",
		"BEGIN",
		"END",
		"exprs",
		"stmt",
		"stmt_if",
		"stmts",
		"ELSE",
		"nls",
		"opt_nls",
		"opt_semi",
		"semi",
		"'['",
		"action",
		"pattern",
		"program",
		"rule",
		"$default",
		"error",
		"FUNC",
		"LEN",
		"REGEXP",
		"RETURN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {57, 0},
		2:  {57, 2},
		3:  {58, 2},
		4:  {56, 0},
		5:  {56, 1},
		6:  {56, 1},
		7:  {56, 1},
		8:  {55, 5},
		9:  {48, 0},
		10: {48, 4},
		11: {46, 3},
		12: {46, 3},
		13: {46, 1},
		14: {46, 1},
		15: {46, 2},
		16: {46, 1},
		17: {46, 4},
		18: {46, 5},
		19: {46, 1},
		20: {46, 1},
		21: {47, 5},
		22: {47, 7},
		23: {47, 5},
		24: {45, 1},
		25: {45, 4},
		26: {38, 1},
		27: {38, 1},
		28: {38, 1},
		29: {38, 1},
		30: {38, 1},
		31: {38, 2},
		32: {38, 1},
		33: {38, 4},
		34: {38, 2},
		35: {38, 2},
		36: {38, 2},
		37: {38, 2},
		38: {38, 2},
		39: {38, 3},
		40: {38, 3},
		41: {38, 3},
		42: {38, 3},
		43: {38, 3},
		44: {38, 3},
		45: {38, 3},
		46: {38, 3},
		47: {38, 3},
		48: {38, 3},
		49: {38, 3},
		50: {38, 3},
		51: {38, 3},
		52: {38, 3},
		53: {38, 3},
		54: {38, 3},
		55: {38, 3},
		56: {38, 3},
		57: {50, 1},
		58: {50, 2},
		59: {51, 0},
		60: {51, 1},
		61: {53, 1},
		62: {52, 0},
		63: {52, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [114][]uint16{
		// 0
		{63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 18: 63, 42: 63, 63, 63, 57: 65},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 18: 60, 38: 70, 42: 64, 68, 69, 56: 67, 58: 66},
		{62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 62, 18: 62, 42: 62, 62, 62},
		{18: 135, 55: 134},
		{18: 59},
		// 5
		{18: 58},
		{98, 99, 18: 57, 20: 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83},
		{38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39: 38, 38, 38, 54: 124},
		{37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 39: 37, 37, 37},
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 39: 36, 36, 36},
		// 10
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 39: 35, 35, 35},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 39: 34, 34, 34},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 123},
		{32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 39: 32, 32, 32},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 122},
		// 15
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 121},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 120},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 82},
		{98, 99, 20: 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 41: 97},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 39: 27, 27, 27},
		// 20
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 39: 26, 26, 26},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 119},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 118},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 117},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 116},
		// 25
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 115},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 114},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 113},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 112},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 111},
		// 30
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 110},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 109},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 108},
		{13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 39: 13, 13, 13},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 107},
		// 35
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 106},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 105},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 104},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 103},
		{8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 88, 8, 8, 8, 86, 8, 87, 8, 8, 85, 8, 8, 39: 8, 8, 8},
		// 40
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 88, 9, 9, 9, 86, 9, 87, 9, 9, 85, 9, 9, 39: 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 88, 10, 10, 10, 86, 10, 87, 10, 10, 85, 10, 10, 39: 10, 10, 10},
		{11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 102, 100, 101, 11, 11, 11, 88, 11, 11, 11, 86, 11, 87, 11, 11, 85, 11, 11, 39: 11, 11, 11},
		{12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 102, 100, 101, 12, 12, 12, 88, 12, 12, 12, 86, 12, 87, 12, 12, 85, 12, 12, 39: 12, 12, 12},
		{98, 99, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 102, 100, 101, 93, 91, 14, 88, 89, 92, 94, 86, 84, 87, 90, 14, 85, 83, 14, 39: 14, 14, 14},
		// 45
		{98, 99, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 15, 85, 83, 15, 39: 15, 15, 15},
		{98, 99, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 102, 100, 101, 16, 16, 16, 88, 16, 16, 16, 86, 84, 87, 16, 16, 85, 83, 16, 39: 16, 16, 16},
		{98, 99, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 102, 100, 101, 17, 17, 17, 88, 17, 17, 17, 86, 84, 87, 17, 17, 85, 83, 17, 39: 17, 17, 17},
		{98, 99, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 102, 100, 101, 18, 18, 18, 88, 18, 18, 18, 86, 84, 87, 18, 18, 85, 83, 18, 39: 18, 18, 18},
		{98, 99, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 102, 100, 101, 19, 19, 19, 88, 19, 19, 19, 86, 84, 87, 19, 19, 85, 83, 19, 39: 19, 19, 19},
		// 50
		{98, 99, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 102, 100, 101, 93, 91, 20, 88, 20, 92, 94, 86, 84, 87, 20, 20, 85, 83, 20, 39: 20, 20, 20},
		{98, 99, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 102, 100, 101, 93, 91, 21, 88, 21, 92, 94, 86, 84, 87, 21, 21, 85, 83, 21, 39: 21, 21, 21},
		{98, 99, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 22, 39: 22, 22, 22},
		{98, 99, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 23, 39: 23, 23, 23},
		{98, 99, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 24, 39: 24, 24, 24},
		// 55
		{98, 99, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 25, 39: 25, 25, 25},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 88, 28, 28, 28, 86, 28, 87, 28, 28, 85, 28, 28, 39: 28, 28, 28},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 88, 29, 29, 29, 86, 29, 87, 29, 29, 85, 29, 29, 39: 29, 29, 29},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 88, 30, 30, 30, 86, 30, 87, 30, 30, 85, 30, 30, 39: 30, 30, 30},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 88, 33, 33, 33, 86, 33, 87, 33, 33, 85, 33, 33, 39: 33, 33, 33},
		// 60
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 125, 45: 126},
		{98, 99, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 19: 40, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 40, 40: 40},
		{37: 127, 40: 128},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17: 130, 50: 131, 129},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 39: 31, 31, 31},
		// 65
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 133},
		{7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 42: 7, 7, 7},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 132, 4, 42: 4, 4, 4},
		{6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 42: 6, 6, 6},
		{98, 99, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 19: 39, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 39, 39: 39, 39},
		// 70
		{61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 18: 61, 42: 61, 61, 61},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 136},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 137, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 17: 2, 2, 173, 42: 2, 2, 2, 52: 176, 174},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 19: 173, 52: 172, 174},
		// 75
		{98, 99, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 19: 51, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83, 40, 39: 170},
		{37: 127, 39: 168},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 50, 50, 50, 50, 50, 50, 50, 19: 50, 38: 125, 45: 167},
		{48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 19: 48, 49: 158},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 18: 151, 38: 152},
		// 80
		{45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 19: 45},
		{44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 19: 44},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 147},
		{98, 99, 18: 148, 20: 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 149},
		// 85
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 150, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 19: 43, 49: 43},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 156},
		{98, 99, 18: 153, 20: 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 154},
		// 90
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 155, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 19: 46},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 157, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 19: 47},
		{11: 159, 18: 160},
		// 95
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 163},
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 161},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 162, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 19: 41, 49: 41},
		{98, 99, 18: 164, 20: 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83},
		// 100
		{55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 48: 165},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 146, 166, 144, 145, 143, 141, 38: 139, 45: 140, 138, 142},
		{42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 19: 42, 49: 42},
		{49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 19: 49, 37: 127},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 125, 45: 169},
		// 105
		{52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 19: 52, 37: 127},
		{78, 79, 80, 76, 81, 74, 71, 75, 72, 77, 73, 38: 171},
		{98, 99, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 19: 53, 102, 100, 101, 93, 91, 96, 88, 89, 92, 94, 86, 84, 87, 90, 95, 85, 83},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 130, 50: 131, 175},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 42: 3, 3, 3},
		// 110
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 42: 1, 1, 1},
		{54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 17: 130, 5, 42: 5, 5, 5, 50: 131, 177},
		{56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 56, 18: 56, 42: 56, 56, 56},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 60

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: yyS[yypt-0].stmts}
		}
	case 4:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 5:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 6:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 7:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 8:
		{
			yyVAL.stmts = yyS[yypt-3].stmts
		}
	case 9:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 10:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-2].stmt)
		}
	case 11:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 12:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 13:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 14:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 15:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 16:
		{
			yyVAL.stmt = yyS[yypt-0].stmt_if
		}
	case 17:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 18:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 20:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 21:
		{
			yyVAL.stmt_if = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 22:
		{
			yyVAL.stmt_if.(*ast.IfStmt).ElseIf = append(yyVAL.stmt_if.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 23:
		{
			if yyVAL.stmt_if.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt_if.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 24:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 25:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 26:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 27:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 28:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 29:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 30:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 31:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 32:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 33:
		{
			yyVAL.expr = &ast.ItemExpr{Literal: yyS[yypt-3].token.Literal, Index: yyS[yypt-1].exprs}
		}
	case 34:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 35:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 36:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 37:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++"}
		}
	case 38:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--"}
		}
	case 39:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 40:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
