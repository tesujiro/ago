// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57385
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57382
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	EXIT       = 57380
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NEXT       = 57381
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57384
	WHILE      = 57374
	yyErrCode  = 57345
	vars       = 57383

	yyMaxDepth = 200
	yyTabOfs   = -101
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		'?':        1,
		':':        1,
		OROR:       2,
		ANDAND:     3,
		',':        4,
		vars:       4,
		'~':        5,
		EQEQ:       6,
		NEQ:        6,
		'>':        7,
		'<':        7,
		GE:         7,
		LE:         7,
		CONCAT_OP:  8,
		STRING:     9,
		NUMBER:     9,
		'+':        10,
		'-':        10,
		'*':        11,
		'/':        11,
		'%':        11,
		'!':        12,
		UNARY:      12,
		PLUSPLUS:   13,
		MINUSMINUS: 13,
		'$':        14,
		'[':        15,
		'(':        16,
		')':        16,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (122x)
		57346: 1,  // IDENT (122x)
		33:    2,  // '!' (116x)
		43:    3,  // '+' (116x)
		45:    4,  // '-' (116x)
		57350: 5,  // FALSE (116x)
		57378: 6,  // FUNC (116x)
		57360: 7,  // MINUSMINUS (116x)
		57351: 8,  // NIL (116x)
		57347: 9,  // NUMBER (116x)
		57359: 10, // PLUSPLUS (116x)
		57348: 11, // STRING (116x)
		57349: 12, // TRUE (116x)
		59:    13, // ';' (115x)
		57370: 14, // REGEXP (115x)
		125:   15, // '}' (107x)
		123:   16, // '{' (80x)
		36:    17, // '$' (76x)
		41:    18, // ')' (63x)
		44:    19, // ',' (62x)
		63:    20, // '?' (62x)
		57356: 21, // ANDAND (62x)
		57357: 22, // OROR (62x)
		93:    23, // ']' (49x)
		57392: 24, // non_post_simp_expr (49x)
		57407: 25, // variable (49x)
		58:    26, // ':' (47x)
		57402: 27, // simp_expr (47x)
		37:    28, // '%' (40x)
		42:    29, // '*' (40x)
		47:    30, // '/' (40x)
		60:    31, // '<' (40x)
		62:    32, // '>' (40x)
		126:   33, // '~' (40x)
		57352: 34, // EQEQ (40x)
		57354: 35, // GE (40x)
		57355: 36, // LE (40x)
		57353: 37, // NEQ (40x)
		61:    38, // '=' (39x)
		91:    39, // '[' (39x)
		57364: 40, // DIVEQ (37x)
		57362: 41, // MINUSEQ (37x)
		57363: 42, // MULEQ (37x)
		57361: 43, // PLUSEQ (37x)
		57387: 44, // common_expr (30x)
		57388: 45, // expr (30x)
		57401: 46, // semi (22x)
		57371: 47, // IF (21x)
		57374: 48, // WHILE (21x)
		57376: 49, // BREAK (20x)
		57377: 50, // CONTINUE (20x)
		57365: 51, // DELETE (20x)
		57375: 52, // DO (20x)
		57380: 53, // EXIT (20x)
		57373: 54, // FOR (20x)
		57381: 55, // NEXT (20x)
		57369: 56, // PRINT (20x)
		57379: 57, // RETURN (20x)
		57406: 58, // term (20x)
		57397: 59, // opt_term (19x)
		57344: 60, // $end (13x)
		57367: 61, // BEGIN (13x)
		57368: 62, // END (13x)
		57396: 63, // opt_stmts (12x)
		57405: 64, // stmts (12x)
		57389: 65, // exprs (6x)
		57372: 66, // ELSE (4x)
		57391: 67, // multi_val_expr (3x)
		57393: 68, // opt_expr (3x)
		57394: 69, // opt_exprs (3x)
		57403: 70, // stmt (3x)
		57404: 71, // stmt_if (3x)
		57408: 72, // variables (3x)
		57386: 73, // action (2x)
		57390: 74, // ident_args (2x)
		57366: 75, // IN (1x)
		57395: 76, // opt_stmt (1x)
		57398: 77, // pattern (1x)
		57399: 78, // program (1x)
		57400: 79, // rule (1x)
		57385: 80, // $default (0x)
		57382: 81, // CONCAT_OP (0x)
		57345: 82, // error (0x)
		57358: 83, // LEN (0x)
		57384: 84, // UNARY (0x)
		57383: 85, // vars (0x)
	}

	yySymNames = []string{
		"'('",
		"IDENT",
		"'!'",
		"'+'",
		"'-'",
		"FALSE",
		"FUNC",
		"MINUSMINUS",
		"NIL",
		"NUMBER",
		"PLUSPLUS",
		"STRING",
		"TRUE",
		"';'",
		"REGEXP",
		"'}'",
		"'{'",
		"'$'",
		"')'",
		"','",
		"'?'",
		"ANDAND",
		"OROR",
		"']'",
		"non_post_simp_expr",
		"variable",
		"':'",
		"simp_expr",
		"'%'",
		"'*'",
		"'/'",
		"'<'",
		"'>'",
		"'~'",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"'='",
		"'['",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"common_expr",
		"expr",
		"semi",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"EXIT",
		"FOR",
		"NEXT",
		"PRINT",
		"RETURN",
		"term",
		"opt_term",
		"$end",
		"BEGIN",
		"END",
		"opt_stmts",
		"stmts",
		"exprs",
		"ELSE",
		"multi_val_expr",
		"opt_expr",
		"opt_exprs",
		"stmt",
		"stmt_if",
		"variables",
		"action",
		"ident_args",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
		"vars",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:   {0, 1},
		1:   {78, 0},
		2:   {78, 2},
		3:   {79, 3},
		4:   {79, 2},
		5:   {79, 2},
		6:   {77, 5},
		7:   {77, 1},
		8:   {77, 1},
		9:   {77, 1},
		10:  {77, 3},
		11:  {73, 3},
		12:  {63, 0},
		13:  {63, 2},
		14:  {64, 2},
		15:  {64, 4},
		16:  {70, 1},
		17:  {70, 1},
		18:  {70, 2},
		19:  {70, 1},
		20:  {70, 2},
		21:  {70, 1},
		22:  {70, 4},
		23:  {70, 5},
		24:  {70, 9},
		25:  {70, 4},
		26:  {70, 5},
		27:  {70, 8},
		28:  {70, 1},
		29:  {70, 1},
		30:  {70, 1},
		31:  {70, 9},
		32:  {70, 2},
		33:  {70, 2},
		34:  {71, 5},
		35:  {71, 7},
		36:  {71, 5},
		37:  {67, 3},
		38:  {69, 0},
		39:  {69, 1},
		40:  {65, 1},
		41:  {65, 4},
		42:  {45, 3},
		43:  {45, 3},
		44:  {45, 3},
		45:  {45, 3},
		46:  {45, 3},
		47:  {45, 5},
		48:  {45, 3},
		49:  {45, 3},
		50:  {45, 1},
		51:  {44, 1},
		52:  {44, 2},
		53:  {27, 1},
		54:  {27, 3},
		55:  {27, 3},
		56:  {27, 3},
		57:  {27, 3},
		58:  {27, 3},
		59:  {27, 3},
		60:  {27, 3},
		61:  {27, 3},
		62:  {27, 3},
		63:  {27, 3},
		64:  {27, 3},
		65:  {27, 3},
		66:  {27, 1},
		67:  {27, 2},
		68:  {27, 2},
		69:  {24, 2},
		70:  {24, 4},
		71:  {24, 4},
		72:  {24, 7},
		73:  {24, 3},
		74:  {24, 2},
		75:  {24, 2},
		76:  {24, 1},
		77:  {24, 1},
		78:  {24, 1},
		79:  {24, 1},
		80:  {24, 1},
		81:  {24, 1},
		82:  {24, 2},
		83:  {24, 2},
		84:  {72, 1},
		85:  {72, 4},
		86:  {25, 4},
		87:  {25, 1},
		88:  {25, 2},
		89:  {74, 0},
		90:  {74, 1},
		91:  {74, 4},
		92:  {76, 0},
		93:  {76, 1},
		94:  {68, 0},
		95:  {68, 1},
		96:  {59, 0},
		97:  {59, 1},
		98:  {58, 1},
		99:  {58, 2},
		100: {46, 1},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [209][]uint16{
		// 0
		{100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 14: 100, 16: 100, 100, 60: 100, 100, 100, 78: 102},
		{118, 117, 116, 126, 127, 123, 106, 120, 124, 121, 119, 125, 122, 14: 110, 16: 111, 128, 24: 115, 112, 27: 114, 44: 113, 109, 60: 101, 107, 108, 73: 105, 77: 104, 79: 103},
		{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 14: 99, 16: 99, 99, 60: 99, 99, 99},
		{13: 140, 16: 111, 46: 139, 58: 308, 73: 307},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 16: 5, 5, 46: 139, 58: 138, 306, 5, 5, 5},
		// 5
		{132, 302},
		{13: 94, 16: 94},
		{13: 93, 16: 93},
		{13: 92, 16: 92, 20: 172, 174, 173},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 16: 35, 19: 300, 35, 35, 35, 28: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		// 10
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 298, 144},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18: 20, 20, 20, 20, 20, 20, 26: 20, 28: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 166, 20, 170, 168, 169, 167},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 51, 165, 51, 51, 128, 51, 51, 51, 51, 51, 51, 115, 131, 51, 297},
		{50, 50, 50, 267, 268, 50, 50, 280, 50, 50, 279, 50, 50, 50, 50, 50, 50, 18: 50, 50, 50, 50, 50, 50, 26: 50, 28: 271, 269, 270, 276, 274, 278, 272, 275, 277, 273},
		{189, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 18: 48, 48, 48, 48, 48, 48, 26: 48, 28: 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 190, 48, 48, 48, 48},
		// 15
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 296},
		{231, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 18: 14, 14, 14, 14, 14, 14, 26: 14, 28: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 228},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 295},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 294},
		// 20
		{25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 18: 25, 25, 25, 25, 25, 25, 26: 25, 28: 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25},
		{24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 18: 24, 24, 24, 24, 24, 24, 26: 24, 28: 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24},
		{23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 18: 23, 23, 23, 23, 23, 23, 26: 23, 28: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23},
		{22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 18: 22, 22, 22, 22, 22, 22, 26: 22, 28: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22},
		{21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 18: 21, 21, 21, 21, 21, 21, 26: 21, 28: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21},
		// 25
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 293},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 266},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 17: 128, 24: 129, 131},
		{189, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 18: 13, 13, 13, 13, 13, 13, 26: 13, 28: 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 190, 13, 13, 13, 13},
		{132},
		// 30
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 18: 20, 20, 20, 20, 20, 20, 26: 20, 28: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
		{1: 134, 18: 12, 12, 74: 133},
		{18: 135, 136},
		{18: 11, 11},
		{16: 143},
		// 35
		{1: 5, 13: 140, 46: 139, 58: 138, 137},
		{1: 142},
		{4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 140, 4, 4, 4, 4, 46: 141, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 60: 4, 4, 4},
		{3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 16: 3, 3, 47: 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 60: 3, 3, 3},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 47: 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 60: 1, 1, 1},
		// 40
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 47: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 60: 2, 2, 2},
		{18: 10, 10},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 146, 144},
		{13: 140, 15: 5, 46: 263, 58: 138, 262},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 164, 27: 114, 44: 113, 149, 47: 162, 155, 157, 158, 151, 156, 161, 154, 159, 152, 160, 67: 150, 70: 148, 153, 163},
		// 45
		{15: 147},
		{29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 18: 29, 29, 29, 29, 29, 29, 26: 29, 28: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29},
		{13: 87, 15: 87},
		{13: 85, 15: 85, 20: 172, 174, 173},
		{13: 84, 15: 84},
		// 50
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 261},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 82, 165, 82, 17: 128, 24: 115, 112, 27: 114, 44: 113, 191, 65: 260},
		{13: 80, 15: 80, 66: 251},
		{225, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 9, 165, 16: 223, 128, 24: 115, 164, 27: 114, 44: 113, 222, 47: 162, 155, 157, 158, 151, 156, 161, 154, 159, 152, 160, 67: 150, 70: 226, 153, 163, 76: 224},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 16: 215, 128, 24: 115, 112, 27: 114, 44: 113, 216},
		// 55
		{16: 208},
		{13: 73, 15: 73},
		{13: 72, 15: 72},
		{13: 71, 15: 71},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 63, 165, 63, 17: 128, 24: 115, 112, 27: 114, 44: 113, 191, 65: 197, 69: 207},
		// 60
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 7, 165, 7, 17: 128, 24: 115, 112, 27: 114, 44: 113, 206, 68: 205},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 201},
		{19: 185, 38: 184},
		{20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 19: 17, 20, 20, 20, 28: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 166, 20, 170, 168, 169, 167},
		{35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 18: 35, 35, 35, 35, 35, 35, 26: 35, 28: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35},
		// 65
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 183},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 182},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 181},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 180},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 171},
		// 70
		{13: 55, 15: 55, 55, 18: 55, 55, 172, 174, 173, 55, 26: 55},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 177},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 176},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 175},
		{13: 52, 15: 52, 52, 18: 52, 52, 52, 52, 52, 52, 26: 52},
		// 75
		{13: 53, 15: 53, 53, 18: 53, 53, 53, 174, 53, 53, 26: 53},
		{20: 172, 174, 173, 26: 178},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 179},
		{13: 54, 15: 54, 54, 18: 54, 54, 172, 174, 173, 54, 26: 54},
		{13: 56, 15: 56, 56, 18: 56, 56, 172, 174, 173, 56, 26: 56},
		// 80
		{13: 57, 15: 57, 57, 18: 57, 57, 172, 174, 173, 57, 26: 57},
		{13: 58, 15: 58, 58, 18: 58, 58, 172, 174, 173, 58, 26: 58},
		{13: 59, 15: 59, 59, 18: 59, 59, 172, 174, 173, 59, 26: 59},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 191, 65: 200},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 17: 5, 46: 139, 58: 138, 186},
		// 85
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 17: 128, 24: 187, 188},
		{189, 39: 190},
		{20, 19: 16, 38: 16, 20},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 63, 24: 115, 112, 27: 114, 44: 113, 191, 65: 197, 69: 198},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 191, 65: 192},
		// 90
		{13: 61, 15: 61, 18: 61, 61, 172, 174, 173, 61},
		{19: 193, 23: 194},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 17: 5, 46: 139, 58: 138, 195},
		{15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 18: 15, 15, 15, 15, 15, 15, 26: 15, 28: 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 196},
		// 95
		{13: 60, 15: 60, 18: 60, 60, 172, 174, 173, 60},
		{13: 62, 15: 62, 18: 62, 193},
		{18: 199},
		{30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 18: 30, 30, 30, 30, 30, 30, 26: 30, 28: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30},
		{13: 64, 15: 64, 19: 193},
		// 100
		{16: 202, 20: 172, 174, 173},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 203, 144},
		{15: 204},
		{13: 67, 15: 67, 66: 67},
		{13: 68, 15: 68},
		// 105
		{13: 6, 15: 6, 6, 20: 172, 174, 173},
		{13: 69, 15: 69},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 209, 144},
		{15: 210},
		{48: 211},
		// 110
		{212},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 213},
		{18: 214, 20: 172, 174, 173},
		{13: 74, 15: 74},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 220, 144},
		// 115
		{16: 217, 20: 172, 174, 173},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 218, 144},
		{15: 219},
		{13: 75, 15: 75},
		{15: 221},
		// 120
		{13: 76, 15: 76},
		{13: 85, 16: 248, 20: 172, 174, 173},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 246, 144},
		{13: 239},
		{118, 227, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 228},
		// 125
		{13: 8},
		{231, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14: 14, 18: 14, 20: 14, 14, 14, 28: 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 75: 230},
		{18: 229, 20: 172, 174, 173},
		{28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 18: 28, 28, 28, 28, 28, 28, 26: 28, 28: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28},
		{1: 234},
		// 130
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 63, 24: 115, 112, 27: 114, 44: 113, 191, 65: 197, 69: 232},
		{18: 233},
		{31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 18: 31, 31, 31, 31, 31, 31, 26: 31, 28: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31},
		{18: 235},
		{16: 236},
		// 135
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 237, 144},
		{15: 238},
		{13: 70, 15: 70},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 7, 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 206, 68: 240},
		{13: 241},
		// 140
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 16: 7, 128, 24: 115, 112, 27: 114, 44: 113, 206, 68: 242},
		{16: 243},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 244, 144},
		{15: 245},
		{13: 77, 15: 77},
		// 145
		{15: 247},
		{13: 79, 15: 79},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 249, 144},
		{15: 250},
		{13: 78, 15: 78},
		// 150
		{16: 253, 47: 252},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 112, 27: 114, 44: 113, 256},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 254, 144},
		{15: 255},
		{13: 65, 15: 65, 66: 65},
		// 155
		{16: 257, 20: 172, 174, 173},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 89, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 145, 63: 258, 144},
		{15: 259},
		{13: 66, 15: 66, 66: 66},
		{13: 81, 15: 81, 19: 193},
		// 160
		{13: 83, 15: 83, 20: 172, 174, 173},
		{15: 88},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 3, 17: 5, 46: 139, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 138, 264},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 164, 27: 114, 44: 113, 149, 47: 162, 155, 157, 158, 151, 156, 161, 154, 159, 152, 160, 67: 150, 70: 265, 153, 163},
		{13: 86, 15: 86},
		// 165
		{18, 18, 18, 18, 18, 18, 18, 280, 18, 18, 279, 18, 18, 18, 18, 18, 18, 18: 18, 18, 18, 18, 18, 18, 26: 18, 28: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 292},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 291},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 290},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 289},
		// 170
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 288},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 287},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 286},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 285},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 284},
		// 175
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 283},
		{118, 117, 116, 126, 127, 123, 130, 120, 124, 121, 119, 125, 122, 14: 165, 17: 128, 24: 115, 131, 27: 282},
		{14: 281},
		{34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 18: 34, 34, 34, 34, 34, 34, 26: 34, 28: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34},
		{33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 18: 33, 33, 33, 33, 33, 33, 26: 33, 28: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33},
		// 180
		{36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 18: 36, 36, 36, 36, 36, 36, 26: 36, 28: 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36, 36},
		{37, 37, 37, 267, 268, 37, 37, 280, 37, 37, 279, 37, 37, 37, 37, 37, 37, 18: 37, 37, 37, 37, 37, 37, 26: 37, 28: 271, 269, 270, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37},
		{38, 38, 38, 267, 268, 38, 38, 280, 38, 38, 279, 38, 38, 38, 38, 38, 38, 18: 38, 38, 38, 38, 38, 38, 26: 38, 28: 271, 269, 270, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38},
		{39, 39, 39, 267, 268, 39, 39, 280, 39, 39, 279, 39, 39, 39, 39, 39, 39, 18: 39, 39, 39, 39, 39, 39, 26: 39, 28: 271, 269, 270, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39},
		{40, 40, 40, 267, 268, 40, 40, 280, 40, 40, 279, 40, 40, 40, 40, 40, 40, 18: 40, 40, 40, 40, 40, 40, 26: 40, 28: 271, 269, 270, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40},
		// 185
		{41, 41, 41, 267, 268, 41, 41, 280, 41, 41, 279, 41, 41, 41, 41, 41, 41, 18: 41, 41, 41, 41, 41, 41, 26: 41, 28: 271, 269, 270, 276, 274, 41, 41, 275, 277, 41, 41, 41, 41, 41, 41, 41},
		{42, 42, 42, 267, 268, 42, 42, 280, 42, 42, 279, 42, 42, 42, 42, 42, 42, 18: 42, 42, 42, 42, 42, 42, 26: 42, 28: 271, 269, 270, 276, 274, 42, 42, 275, 277, 42, 42, 42, 42, 42, 42, 42},
		{43, 43, 43, 43, 43, 43, 43, 280, 43, 43, 279, 43, 43, 43, 43, 43, 43, 18: 43, 43, 43, 43, 43, 43, 26: 43, 28: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43},
		{44, 44, 44, 44, 44, 44, 44, 280, 44, 44, 279, 44, 44, 44, 44, 44, 44, 18: 44, 44, 44, 44, 44, 44, 26: 44, 28: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44},
		{45, 45, 45, 45, 45, 45, 45, 280, 45, 45, 279, 45, 45, 45, 45, 45, 45, 18: 45, 45, 45, 45, 45, 45, 26: 45, 28: 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45, 45},
		// 190
		{46, 46, 46, 46, 46, 46, 46, 280, 46, 46, 279, 46, 46, 46, 46, 46, 46, 18: 46, 46, 46, 46, 46, 46, 26: 46, 28: 271, 269, 270, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46},
		{47, 47, 47, 47, 47, 47, 47, 280, 47, 47, 279, 47, 47, 47, 47, 47, 47, 18: 47, 47, 47, 47, 47, 47, 26: 47, 28: 271, 269, 270, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47},
		{19, 19, 19, 19, 19, 19, 19, 280, 19, 19, 279, 19, 19, 19, 19, 19, 19, 18: 19, 19, 19, 19, 19, 19, 26: 19, 28: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19},
		{26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 18: 26, 26, 26, 26, 26, 26, 26: 26, 28: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26},
		{27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 18: 27, 27, 27, 27, 27, 27, 26: 27, 28: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27},
		// 195
		{32, 32, 32, 32, 32, 32, 32, 280, 32, 32, 279, 32, 32, 32, 32, 32, 32, 18: 32, 32, 32, 32, 32, 32, 26: 32, 28: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32},
		{49, 49, 49, 267, 268, 49, 49, 280, 49, 49, 279, 49, 49, 49, 49, 49, 49, 18: 49, 49, 49, 49, 49, 49, 26: 49, 28: 271, 269, 270, 276, 274, 278, 272, 275, 277, 273},
		{15: 299},
		{90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16: 90, 90, 60: 90, 90, 90},
		{14: 301},
		// 200
		{13: 91, 16: 91},
		{303},
		{1: 134, 18: 12, 12, 74: 304},
		{18: 305, 136},
		{13: 95, 16: 95},
		// 205
		{96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 14: 96, 16: 96, 96, 60: 96, 96, 96},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 140, 5, 16: 5, 5, 46: 139, 58: 138, 309, 5, 5, 5},
		{97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 140, 97, 16: 97, 97, 46: 141, 60: 97, 97, 97},
		{98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 14: 98, 16: 98, 98, 60: 98, 98, 98},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 82

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: yyS[yypt-1].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.rule = ast.Rule{Pattern: &ast.ExprPattern{}, Action: yyS[yypt-1].stmts}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 17:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 18:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 21:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 22:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 24:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 25:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 27:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 29:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.NextStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.ExitStmt{Expr: yyS[yypt-0].expr}
		}
	case 34:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 35:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 36:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 37:
		{
			yyVAL.expr = &ast.AssExpr{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 39:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 40:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 41:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 42:
		{
			yyVAL.expr = &ast.AssExpr{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.TriOpExpr{Cond: yyS[yypt-4].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 51:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-1].expr, Operator: "CAT", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 54:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 55:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 56:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 57:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 58:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 59:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 60:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 61:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 62:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 64:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 65:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 66:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 67:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 68:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 69:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 71:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 72:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 73:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 75:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 76:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 77:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 78:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 79:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 80:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 81:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 82:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 83:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 84:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 85:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 86:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 87:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 88:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 89:
		{
			yyVAL.ident_args = []string{}
		}
	case 90:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 91:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 92:
		{
			yyVAL.stmt = nil
		}
	case 93:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 94:
		{
			yyVAL.expr = nil
		}
	case 95:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
