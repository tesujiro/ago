// Code generated by goyacc - DO NOT EDIT.

package parser

import __yyfmt__ "fmt"

import (
	//"fmt"
	"github.com/tesujiro/goa/ast"
)

var defaultExpr = ast.FieldExpr{Expr: &ast.NumExpr{Literal: "0"}}
var defaultExprs = []ast.Expr{&defaultExpr}

//var IN_REGEXP bool

type yySymType struct {
	yys        int
	token      ast.Token
	rule       ast.Rule
	rules      []ast.Rule
	pattern    ast.Pattern
	stmt       ast.Stmt
	stmts      []ast.Stmt
	expr       ast.Expr
	exprs      []ast.Expr
	ident_args []string
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57382
	yyEofCode  = 57344
	ANDAND     = 57356
	BEGIN      = 57367
	BREAK      = 57376
	CONCAT_OP  = 57380
	CONTINUE   = 57377
	DELETE     = 57365
	DIVEQ      = 57364
	DO         = 57375
	ELSE       = 57372
	END        = 57368
	EQEQ       = 57352
	FALSE      = 57350
	FOR        = 57373
	FUNC       = 57378
	GE         = 57354
	IDENT      = 57346
	IF         = 57371
	IN         = 57366
	LE         = 57355
	LEN        = 57358
	MINUSEQ    = 57362
	MINUSMINUS = 57360
	MULEQ      = 57363
	NEQ        = 57353
	NIL        = 57351
	NUMBER     = 57347
	OROR       = 57357
	PLUSEQ     = 57361
	PLUSPLUS   = 57359
	PRINT      = 57369
	REGEXP     = 57370
	RETURN     = 57379
	STRING     = 57348
	TRUE       = 57349
	UNARY      = 57381
	WHILE      = 57374
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -98
)

var (
	yyPrec = map[int]int{
		'=':        0,
		PLUSEQ:     0,
		MINUSEQ:    0,
		MULEQ:      0,
		DIVEQ:      0,
		'?':        1,
		':':        1,
		OROR:       2,
		ANDAND:     3,
		IDENT:      4,
		'~':        5,
		EQEQ:       6,
		NEQ:        6,
		'>':        7,
		'<':        7,
		GE:         7,
		LE:         7,
		CONCAT_OP:  8,
		'+':        9,
		'-':        9,
		'*':        10,
		'/':        10,
		'%':        10,
		'!':        11,
		UNARY:      11,
		PLUSPLUS:   12,
		MINUSMINUS: 12,
		'$':        13,
		'(':        14,
		')':        14,
	}

	yyXLAT = map[int]int{
		40:    0,  // '(' (137x)
		43:    1,  // '+' (133x)
		45:    2,  // '-' (133x)
		57360: 3,  // MINUSMINUS (133x)
		57359: 4,  // PLUSPLUS (133x)
		59:    5,  // ';' (109x)
		10:    6,  // '\n' (107x)
		125:   7,  // '}' (101x)
		57346: 8,  // IDENT (81x)
		57370: 9,  // REGEXP (77x)
		123:   10, // '{' (76x)
		33:    11, // '!' (75x)
		36:    12, // '$' (75x)
		57350: 13, // FALSE (75x)
		57378: 14, // FUNC (75x)
		57351: 15, // NIL (75x)
		57347: 16, // NUMBER (75x)
		57348: 17, // STRING (75x)
		57349: 18, // TRUE (75x)
		37:    19, // '%' (58x)
		41:    20, // ')' (58x)
		42:    21, // '*' (58x)
		44:    22, // ',' (58x)
		47:    23, // '/' (58x)
		60:    24, // '<' (58x)
		62:    25, // '>' (58x)
		63:    26, // '?' (58x)
		57356: 27, // ANDAND (58x)
		57352: 28, // EQEQ (58x)
		57354: 29, // GE (58x)
		57355: 30, // LE (58x)
		57353: 31, // NEQ (58x)
		57357: 32, // OROR (58x)
		61:    33, // '=' (46x)
		57384: 34, // expr (46x)
		57398: 35, // simp_expr (46x)
		57403: 36, // variable (46x)
		91:    37, // '[' (44x)
		93:    38, // ']' (44x)
		126:   39, // '~' (44x)
		57364: 40, // DIVEQ (43x)
		57362: 41, // MINUSEQ (43x)
		57363: 42, // MULEQ (43x)
		57361: 43, // PLUSEQ (43x)
		58:    44, // ':' (42x)
		57371: 45, // IF (25x)
		57374: 46, // WHILE (25x)
		57376: 47, // BREAK (24x)
		57377: 48, // CONTINUE (24x)
		57365: 49, // DELETE (24x)
		57375: 50, // DO (24x)
		57373: 51, // FOR (24x)
		57369: 52, // PRINT (24x)
		57379: 53, // RETURN (24x)
		57387: 54, // nls (19x)
		57397: 55, // semi (15x)
		57402: 56, // term (15x)
		57344: 57, // $end (14x)
		57367: 58, // BEGIN (14x)
		57368: 59, // END (14x)
		57393: 60, // opt_term (14x)
		57392: 61, // opt_stmts (12x)
		57401: 62, // stmts (12x)
		57385: 63, // exprs (9x)
		57372: 64, // ELSE (4x)
		57389: 65, // opt_exprs (3x)
		57390: 66, // opt_nls (3x)
		57399: 67, // stmt (3x)
		57400: 68, // stmt_if (3x)
		57386: 69, // ident_args (2x)
		57388: 70, // opt_expr (2x)
		57383: 71, // action (1x)
		57366: 72, // IN (1x)
		57391: 73, // opt_stmt (1x)
		57394: 74, // pattern (1x)
		57395: 75, // program (1x)
		57396: 76, // rule (1x)
		57382: 77, // $default (0x)
		57380: 78, // CONCAT_OP (0x)
		57345: 79, // error (0x)
		57358: 80, // LEN (0x)
		57381: 81, // UNARY (0x)
	}

	yySymNames = []string{
		"'('",
		"'+'",
		"'-'",
		"MINUSMINUS",
		"PLUSPLUS",
		"';'",
		"'\\n'",
		"'}'",
		"IDENT",
		"REGEXP",
		"'{'",
		"'!'",
		"'$'",
		"FALSE",
		"FUNC",
		"NIL",
		"NUMBER",
		"STRING",
		"TRUE",
		"'%'",
		"')'",
		"'*'",
		"','",
		"'/'",
		"'<'",
		"'>'",
		"'?'",
		"ANDAND",
		"EQEQ",
		"GE",
		"LE",
		"NEQ",
		"OROR",
		"'='",
		"expr",
		"simp_expr",
		"variable",
		"'['",
		"']'",
		"'~'",
		"DIVEQ",
		"MINUSEQ",
		"MULEQ",
		"PLUSEQ",
		"':'",
		"IF",
		"WHILE",
		"BREAK",
		"CONTINUE",
		"DELETE",
		"DO",
		"FOR",
		"PRINT",
		"RETURN",
		"nls",
		"semi",
		"term",
		"$end",
		"BEGIN",
		"END",
		"opt_term",
		"opt_stmts",
		"stmts",
		"exprs",
		"ELSE",
		"opt_exprs",
		"opt_nls",
		"stmt",
		"stmt_if",
		"ident_args",
		"opt_expr",
		"action",
		"IN",
		"opt_stmt",
		"pattern",
		"program",
		"rule",
		"$default",
		"CONCAT_OP",
		"error",
		"LEN",
		"UNARY",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {75, 0},
		2:  {75, 2},
		3:  {76, 3},
		4:  {76, 2},
		5:  {74, 0},
		6:  {74, 5},
		7:  {74, 1},
		8:  {74, 1},
		9:  {74, 1},
		10: {74, 3},
		11: {71, 3},
		12: {61, 0},
		13: {61, 2},
		14: {62, 2},
		15: {62, 4},
		16: {67, 3},
		17: {67, 3},
		18: {67, 1},
		19: {67, 2},
		20: {67, 1},
		21: {67, 2},
		22: {67, 1},
		23: {67, 4},
		24: {67, 5},
		25: {67, 9},
		26: {67, 4},
		27: {67, 5},
		28: {67, 8},
		29: {67, 1},
		30: {67, 1},
		31: {67, 9},
		32: {67, 2},
		33: {68, 5},
		34: {68, 7},
		35: {68, 5},
		36: {65, 0},
		37: {65, 1},
		38: {63, 1},
		39: {63, 4},
		40: {34, 1},
		41: {34, 7},
		42: {34, 3},
		43: {34, 3},
		44: {34, 3},
		45: {34, 3},
		46: {34, 3},
		47: {34, 3},
		48: {34, 3},
		49: {34, 3},
		50: {34, 3},
		51: {34, 3},
		52: {34, 3},
		53: {34, 3},
		54: {35, 1},
		55: {35, 1},
		56: {35, 1},
		57: {35, 1},
		58: {35, 1},
		59: {35, 1},
		60: {35, 3},
		61: {35, 1},
		62: {35, 5},
		63: {35, 4},
		64: {35, 4},
		65: {35, 2},
		66: {35, 2},
		67: {35, 2},
		68: {35, 2},
		69: {35, 2},
		70: {35, 2},
		71: {35, 2},
		72: {35, 3},
		73: {35, 3},
		74: {35, 3},
		75: {35, 3},
		76: {35, 3},
		77: {35, 3},
		78: {36, 1},
		79: {36, 2},
		80: {36, 4},
		81: {69, 0},
		82: {69, 1},
		83: {69, 4},
		84: {73, 0},
		85: {73, 1},
		86: {70, 0},
		87: {70, 1},
		88: {60, 0},
		89: {60, 1},
		90: {56, 2},
		91: {56, 1},
		92: {56, 1},
		93: {55, 1},
		94: {66, 0},
		95: {66, 1},
		96: {54, 1},
		97: {54, 2},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [200][]uint16{
		// 0
		{97, 97, 97, 97, 97, 97, 97, 8: 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 57: 97, 97, 97, 75: 99},
		{120, 117, 118, 116, 115, 93, 93, 8: 114, 106, 93, 119, 121, 111, 102, 112, 109, 113, 110, 34: 105, 107, 108, 57: 98, 103, 104, 74: 101, 76: 100},
		{96, 96, 96, 96, 96, 96, 96, 8: 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 57: 96, 96, 96},
		{5: 182, 154, 10: 294, 54: 181, 180, 293, 71: 292},
		{168, 8: 288},
		// 5
		{5: 91, 91, 10: 91},
		{5: 90, 90, 10: 90},
		{134, 137, 138, 136, 135, 89, 89, 10: 89, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{37, 37, 37, 37, 37, 37, 37, 10: 37, 19: 37, 21: 37, 286, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37: 37, 39: 37},
		{58, 58, 58, 58, 58, 58, 58, 58, 10: 58, 19: 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 58, 37: 282, 58, 281, 58, 58, 58, 58, 58},
		// 10
		{44, 44, 44, 44, 44, 44, 44, 44, 10: 44, 19: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 37: 44, 44, 44, 265, 263, 264, 262, 44},
		{43, 43, 43, 43, 43, 43, 43, 43, 10: 43, 19: 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 37: 43, 43, 43, 43, 43, 43, 43, 43},
		{42, 42, 42, 42, 42, 42, 42, 42, 10: 42, 19: 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 37: 42, 42, 42, 42, 42, 42, 42, 42},
		{41, 41, 41, 41, 41, 41, 41, 41, 10: 41, 19: 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 41, 37: 41, 41, 41, 41, 41, 41, 41, 41},
		{40, 40, 40, 40, 40, 40, 40, 40, 10: 40, 19: 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 37: 40, 40, 40, 40, 40, 40, 40, 40},
		// 15
		{39, 39, 39, 39, 39, 39, 39, 39, 10: 39, 19: 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 39, 37: 39, 39, 39, 39, 39, 39, 39, 39},
		{227, 20, 20, 20, 20, 20, 20, 20, 10: 20, 19: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 37: 20, 20, 20, 20, 20, 20, 20, 20},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 280, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 279, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 278, 107, 108},
		// 20
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 277, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 276, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 224, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 123, 107, 108},
		{168},
		// 25
		{134, 19, 19, 19, 19, 19, 19, 19, 10: 19, 19: 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 37: 19, 19, 19, 19, 19, 19, 19, 19},
		{37, 37, 37, 37, 37, 37, 37, 37, 10: 37, 19: 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37, 37: 37, 37, 37, 37, 37, 37, 37, 37},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 167, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 166, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 165, 107, 108},
		// 30
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 164, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 163, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 162, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 161, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 160, 107, 108},
		// 35
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 157, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 20: 62, 34: 148, 107, 108, 63: 147, 65: 149},
		{32, 32, 32, 32, 32, 32, 32, 32, 10: 32, 19: 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 37: 32, 32, 32, 32, 32, 32, 32, 32},
		{30, 30, 30, 30, 30, 30, 30, 30, 10: 30, 19: 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 37: 30, 30, 30, 30, 30, 30, 30, 30},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 146, 107, 108},
		// 40
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 145, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 144, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 143, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 142, 107, 108},
		{134, 21, 21, 136, 135, 21, 21, 21, 10: 21, 19: 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 37: 21, 21, 21, 21, 21, 21, 21, 21},
		// 45
		{134, 22, 22, 136, 135, 22, 22, 22, 10: 22, 19: 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 37: 22, 22, 22, 22, 22, 22, 22, 22},
		{134, 23, 23, 136, 135, 23, 23, 23, 10: 23, 19: 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 37: 23, 23, 23, 23, 23, 23, 23, 23},
		{134, 24, 24, 136, 135, 24, 24, 24, 10: 24, 19: 141, 24, 139, 24, 140, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 37: 24, 24, 24, 24, 24, 24, 24, 24},
		{134, 25, 25, 136, 135, 25, 25, 25, 10: 25, 19: 141, 25, 139, 25, 140, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 37: 25, 25, 25, 25, 25, 25, 25, 25},
		{5: 61, 61, 61, 20: 61, 22: 151},
		// 50
		{134, 137, 138, 136, 135, 60, 60, 60, 19: 141, 60, 139, 60, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 38: 60},
		{20: 150},
		{34, 34, 34, 34, 34, 34, 34, 34, 10: 34, 19: 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 37: 34, 34, 34, 34, 34, 34, 34, 34},
		{4, 4, 4, 4, 4, 6: 154, 8: 4, 4, 11: 4, 4, 4, 4, 4, 4, 4, 4, 54: 153, 66: 152},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 156, 107, 108},
		// 55
		{3, 3, 3, 3, 3, 6: 155, 8: 3, 3, 11: 3, 3, 3, 3, 3, 3, 3, 3},
		{2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 45: 2, 2, 2, 2, 2, 2, 2, 2, 2, 57: 2, 2, 2},
		{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 45: 1, 1, 1, 1, 1, 1, 1, 1, 1, 57: 1, 1, 1},
		{134, 137, 138, 136, 135, 59, 59, 59, 19: 141, 59, 139, 59, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 59, 38: 59},
		{134, 137, 138, 136, 135, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 44: 158},
		// 60
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 159, 107, 108},
		{134, 137, 138, 136, 135, 36, 36, 36, 10: 36, 19: 141, 36, 139, 36, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 36, 37: 36, 36, 36, 36, 36, 36, 36, 36},
		{134, 137, 138, 136, 135, 45, 45, 45, 10: 45, 19: 141, 45, 139, 45, 140, 129, 127, 45, 45, 125, 128, 130, 126, 45, 45, 37: 45, 45, 45, 45, 45, 45, 45, 45},
		{134, 137, 138, 136, 135, 46, 46, 46, 10: 46, 19: 141, 46, 139, 46, 140, 129, 127, 46, 132, 125, 128, 130, 126, 46, 46, 37: 46, 46, 46, 46, 46, 46, 46, 46},
		{134, 137, 138, 136, 135, 47, 47, 47, 10: 47, 19: 141, 47, 139, 47, 140, 47, 47, 47, 47, 47, 47, 47, 47, 47, 47, 37: 47, 47, 47, 47, 47, 47, 47, 47},
		// 65
		{134, 137, 138, 136, 135, 48, 48, 48, 10: 48, 19: 141, 48, 139, 48, 140, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 37: 48, 48, 48, 48, 48, 48, 48, 48},
		{134, 137, 138, 136, 135, 49, 49, 49, 10: 49, 19: 141, 49, 139, 49, 140, 49, 49, 49, 49, 49, 49, 49, 49, 49, 49, 37: 49, 49, 49, 49, 49, 49, 49, 49},
		{134, 137, 138, 136, 135, 50, 50, 50, 10: 50, 19: 141, 50, 139, 50, 140, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 37: 50, 50, 50, 50, 50, 50, 50, 50},
		{134, 137, 138, 136, 135, 51, 51, 51, 10: 51, 19: 141, 51, 139, 51, 140, 129, 127, 51, 51, 51, 128, 130, 51, 51, 51, 37: 51, 51, 51, 51, 51, 51, 51, 51},
		{134, 137, 138, 136, 135, 52, 52, 52, 10: 52, 19: 141, 52, 139, 52, 140, 129, 127, 52, 52, 52, 128, 130, 52, 52, 52, 37: 52, 52, 52, 52, 52, 52, 52, 52},
		// 70
		{8: 170, 20: 17, 22: 17, 69: 169},
		{20: 171, 22: 172},
		{20: 16, 22: 16},
		{10: 175},
		{6: 154, 8: 4, 54: 153, 66: 173},
		// 75
		{8: 174},
		{20: 15, 22: 15},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 178, 176},
		{5: 182, 154, 10, 54: 181, 272, 179, 60: 271},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 188, 107, 186, 45: 198, 193, 195, 196, 189, 194, 192, 190, 197, 63: 187, 67: 185, 191},
		// 80
		{7: 184},
		{9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 45: 9, 9, 9, 9, 9, 9, 9, 9, 9, 57: 9, 9, 9},
		{6, 6, 6, 6, 6, 6, 154, 8: 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 45: 6, 6, 6, 6, 6, 6, 6, 6, 6, 183, 57: 6, 6, 6},
		{7, 7, 7, 7, 7, 7, 155, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 45: 7, 7, 7, 7, 7, 7, 7, 7, 7, 57: 7, 7, 7},
		{5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 45: 5, 5, 5, 5, 5, 5, 5, 5, 5, 57: 5, 5, 5},
		// 85
		{8, 8, 8, 8, 8, 8, 155, 8: 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 45: 8, 8, 8, 8, 8, 8, 8, 8, 8, 57: 8, 8, 8},
		{57, 57, 57, 57, 57, 57, 57, 57, 10: 57, 19: 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 37: 57, 57, 57, 57, 57, 57, 57, 57},
		{5: 84, 84, 84},
		{44, 44, 44, 44, 44, 44, 44, 44, 10: 44, 19: 44, 21: 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 261, 37: 44, 39: 44, 265, 263, 264, 262},
		{22: 151, 33: 259},
		// 90
		{134, 137, 138, 136, 135, 80, 80, 80, 19: 141, 21: 139, 60, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 60},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 258, 107, 108},
		{120, 117, 118, 116, 115, 78, 78, 78, 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 148, 107, 108, 63: 257},
		{5: 76, 76, 76, 64: 248},
		{221, 117, 118, 116, 115, 14, 8: 114, 124, 219, 119, 121, 111, 122, 112, 109, 113, 110, 34: 218, 107, 186, 45: 198, 193, 195, 196, 189, 194, 192, 190, 197, 63: 187, 67: 222, 191, 73: 220},
		// 95
		{120, 117, 118, 116, 115, 8: 114, 124, 211, 119, 121, 111, 122, 112, 109, 113, 110, 34: 212, 107, 108},
		{10: 204},
		{5: 69, 69, 69},
		{5: 68, 68, 68},
		{120, 117, 118, 116, 115, 62, 62, 62, 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 148, 107, 108, 63: 147, 65: 203},
		// 100
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 199, 107, 108},
		{134, 137, 138, 136, 135, 10: 200, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 201, 176},
		{7: 202},
		{5: 65, 65, 65, 64: 65},
		// 105
		{5: 66, 66, 66},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 205, 176},
		{7: 206},
		{46: 207},
		{208},
		// 110
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 209, 107, 108},
		{134, 137, 138, 136, 135, 19: 141, 210, 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{5: 70, 70, 70},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 216, 176},
		{134, 137, 138, 136, 135, 10: 213, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		// 115
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 214, 176},
		{7: 215},
		{5: 71, 71, 71},
		{7: 217},
		{5: 72, 72, 72},
		// 120
		{134, 137, 138, 136, 135, 80, 10: 245, 19: 141, 21: 139, 60, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 60},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 243, 176},
		{5: 235},
		{120, 117, 118, 116, 115, 8: 223, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 224, 107, 108},
		{5: 13},
		// 125
		{227, 20, 20, 20, 20, 19: 20, 20, 20, 23: 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 37: 20, 39: 20, 20, 20, 20, 20, 72: 226},
		{134, 137, 138, 136, 135, 19: 141, 225, 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{26, 26, 26, 26, 26, 26, 26, 26, 10: 26, 19: 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 37: 26, 26, 26, 26, 26, 26, 26, 26},
		{8: 230},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 20: 62, 34: 148, 107, 108, 63: 147, 65: 228},
		// 130
		{20: 229},
		{35, 35, 35, 35, 35, 35, 35, 35, 10: 35, 19: 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 35, 37: 35, 35, 35, 35, 35, 35, 35, 35},
		{20: 231},
		{10: 232},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 233, 176},
		// 135
		{7: 234},
		{5: 67, 67, 67},
		{120, 117, 118, 116, 115, 12, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 237, 107, 108, 70: 236},
		{5: 238},
		{134, 137, 138, 136, 135, 11, 10: 11, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		// 140
		{120, 117, 118, 116, 115, 8: 114, 124, 12, 119, 121, 111, 122, 112, 109, 113, 110, 34: 237, 107, 108, 70: 239},
		{10: 240},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 241, 176},
		{7: 242},
		{5: 73, 73, 73},
		// 145
		{7: 244},
		{5: 75, 75, 75},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 246, 176},
		{7: 247},
		{5: 74, 74, 74},
		// 150
		{10: 250, 45: 249},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 253, 107, 108},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 251, 176},
		{7: 252},
		{5: 63, 63, 63, 64: 63},
		// 155
		{134, 137, 138, 136, 135, 10: 254, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 255, 176},
		{7: 256},
		{5: 64, 64, 64, 64: 64},
		{5: 77, 77, 77, 22: 151},
		// 160
		{134, 137, 138, 136, 135, 79, 79, 79, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 148, 107, 108, 63: 260},
		{5: 81, 81, 81, 22: 151},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 270, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 269, 107, 108},
		// 165
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 268, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 267, 107, 108},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 266, 107, 108},
		{134, 137, 138, 136, 135, 53, 53, 53, 10: 53, 19: 141, 53, 139, 53, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 53, 37: 53, 53, 53, 53, 53, 53, 53, 53},
		{134, 137, 138, 136, 135, 54, 54, 54, 10: 54, 19: 141, 54, 139, 54, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 54, 37: 54, 54, 54, 54, 54, 54, 54, 54},
		// 170
		{134, 137, 138, 136, 135, 55, 55, 55, 10: 55, 19: 141, 55, 139, 55, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 55, 37: 55, 55, 55, 55, 55, 55, 55, 55},
		{134, 137, 138, 136, 135, 56, 56, 56, 10: 56, 19: 141, 56, 139, 56, 140, 129, 127, 133, 132, 125, 128, 130, 126, 131, 56, 37: 56, 56, 56, 56, 56, 56, 56, 56},
		{134, 137, 138, 136, 135, 82, 82, 82, 19: 141, 21: 139, 23: 140, 129, 127, 133, 132, 125, 128, 130, 126, 131},
		{7: 85},
		{4, 4, 4, 4, 4, 6: 154, 6, 4, 4, 11: 4, 4, 4, 4, 4, 4, 4, 4, 45: 4, 4, 4, 4, 4, 4, 4, 4, 4, 274, 66: 273},
		// 175
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 188, 107, 186, 45: 198, 193, 195, 196, 189, 194, 192, 190, 197, 63: 187, 67: 275, 191},
		{3, 3, 3, 3, 3, 6: 155, 8, 3, 3, 11: 3, 3, 3, 3, 3, 3, 3, 3, 45: 3, 3, 3, 3, 3, 3, 3, 3, 3},
		{5: 83, 83, 83},
		{134, 27, 27, 136, 135, 27, 27, 27, 10: 27, 19: 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 37: 27, 27, 27, 27, 27, 27, 27, 27},
		{134, 28, 28, 136, 135, 28, 28, 28, 10: 28, 19: 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 37: 28, 28, 28, 28, 28, 28, 28, 28},
		// 180
		{134, 29, 29, 136, 135, 29, 29, 29, 10: 29, 19: 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 37: 29, 29, 29, 29, 29, 29, 29, 29},
		{134, 31, 31, 31, 31, 31, 31, 31, 10: 31, 19: 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 37: 31, 31, 31, 31, 31, 31, 31, 31},
		{134, 33, 33, 33, 33, 33, 33, 33, 10: 33, 19: 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 37: 33, 33, 33, 33, 33, 33, 33, 33},
		{9: 285},
		{120, 117, 118, 116, 115, 8: 114, 124, 11: 119, 121, 111, 122, 112, 109, 113, 110, 34: 148, 107, 108, 63: 283},
		// 185
		{22: 151, 38: 284},
		{18, 18, 18, 18, 18, 18, 18, 18, 10: 18, 19: 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 37: 18, 18, 18, 18, 18, 18, 18, 18},
		{38, 38, 38, 38, 38, 38, 38, 38, 10: 38, 19: 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 38, 37: 38, 38, 38, 38, 38, 38, 38, 38},
		{9: 287},
		{5: 88, 88, 10: 88},
		// 190
		{289},
		{8: 170, 20: 17, 22: 17, 69: 290},
		{20: 291, 22: 172},
		{5: 92, 92, 10: 92},
		{10, 10, 10, 10, 10, 182, 154, 8: 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 54: 181, 180, 179, 10, 10, 10, 297},
		// 195
		{94, 94, 94, 94, 94, 94, 94, 8: 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 94, 57: 94, 94, 94},
		{10, 10, 10, 10, 10, 182, 154, 86, 10, 10, 11: 10, 10, 10, 10, 10, 10, 10, 10, 45: 10, 10, 10, 10, 10, 10, 10, 10, 10, 181, 180, 179, 60: 177, 295, 176},
		{7: 296},
		{87, 87, 87, 87, 87, 87, 87, 8: 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 87, 57: 87, 87, 87},
		{95, 95, 95, 95, 95, 95, 95, 8: 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 57: 95, 95, 95},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 79

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			yyVAL.rules = []ast.Rule{}
		}
	case 2:
		{
			yyVAL.rules = append(yyS[yypt-1].rules, yyS[yypt-0].rule)
			yylex.(*Lexer).result = yyVAL.rules
		}
	case 3:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-2].pattern, Action: yyS[yypt-1].stmts}
		}
	case 4:
		{
			yyVAL.rule = ast.Rule{Pattern: yyS[yypt-1].pattern, Action: []ast.Stmt{&ast.PrintStmt{Exprs: defaultExprs}}}
		}
	case 5:
		{
			yyVAL.pattern = &ast.ExprPattern{}
		}
	case 6:
		{
			//fmt.Println("FUNC RULE")
			yyVAL.pattern = &ast.FuncPattern{Name: yyS[yypt-3].token.Literal, Args: yyS[yypt-1].ident_args}
		}
	case 7:
		{
			yyVAL.pattern = &ast.BeginPattern{}
		}
	case 8:
		{
			yyVAL.pattern = &ast.EndPattern{}
		}
	case 9:
		{
			yyVAL.pattern = &ast.ExprPattern{Expr: yyS[yypt-0].expr}
		}
	case 10:
		{
			yyVAL.pattern = &ast.StartStopPattern{
				Start: &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-2].token.Literal},
				Stop:  &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal},
			}
		}
	case 11:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 12:
		{
			yyVAL.stmts = []ast.Stmt{}
		}
	case 13:
		{
			yyVAL.stmts = yyS[yypt-1].stmts
		}
	case 14:
		{
			yyVAL.stmts = []ast.Stmt{yyS[yypt-0].stmt}
		}
	case 15:
		{
			yyVAL.stmts = append(yyS[yypt-3].stmts, yyS[yypt-0].stmt)
		}
	case 16:
		{
			yyVAL.stmt = &ast.AssStmt{Left: []ast.Expr{yyS[yypt-2].expr}, Right: []ast.Expr{yyS[yypt-0].expr}}
		}
	case 17:
		{
			yyVAL.stmt = &ast.AssStmt{Left: yyS[yypt-2].exprs, Right: yyS[yypt-0].exprs}
		}
	case 18:
		{
			yyVAL.stmt = &ast.ExprStmt{Expr: yyS[yypt-0].expr}
		}
	case 19:
		{
			yyVAL.stmt = &ast.DelStmt{Expr: yyS[yypt-0].expr}
		}
	case 20:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: defaultExprs}
		}
	case 21:
		{
			yyVAL.stmt = &ast.PrintStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 22:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 23:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 24:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 25:
		{
			yyVAL.stmt = &ast.CForLoopStmt{Stmt1: yyS[yypt-7].stmt, Expr2: yyS[yypt-5].expr, Expr3: yyS[yypt-3].expr, Stmts: yyS[yypt-1].stmts}
		}
	case 26:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts}
		}
	case 27:
		{
			yyVAL.stmt = &ast.LoopStmt{Stmts: yyS[yypt-1].stmts, Expr: yyS[yypt-3].expr}
		}
	case 28:
		{
			yyVAL.stmt = &ast.DoLoopStmt{Stmts: yyS[yypt-5].stmts, Expr: yyS[yypt-1].expr}
		}
	case 29:
		{
			yyVAL.stmt = &ast.BreakStmt{}
		}
	case 30:
		{
			yyVAL.stmt = &ast.ContinueStmt{}
		}
	case 31:
		{
			yyVAL.stmt = &ast.HashLoopStmt{Key: yyS[yypt-6].token.Literal, Hash: yyS[yypt-4].token.Literal, Stmts: yyS[yypt-1].stmts}
		}
	case 32:
		{
			yyVAL.stmt = &ast.ReturnStmt{Exprs: yyS[yypt-0].exprs}
		}
	case 33:
		{
			yyVAL.stmt = &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts, Else: nil}
		}
	case 34:
		{
			yyVAL.stmt.(*ast.IfStmt).ElseIf = append(yyVAL.stmt.(*ast.IfStmt).ElseIf, &ast.IfStmt{If: yyS[yypt-3].expr, Then: yyS[yypt-1].stmts})
		}
	case 35:
		{
			if yyVAL.stmt.(*ast.IfStmt).Else != nil {
				yylex.Error("multiple else statement")
			} else {
				//$$.(*ast.IfStmt).Else = append($$.(*ast.IfStmt).Else, $4...)
				yyVAL.stmt.(*ast.IfStmt).Else = yyS[yypt-1].stmts
			}
		}
	case 36:
		{
			yyVAL.exprs = []ast.Expr{}
		}
	case 37:
		{
			yyVAL.exprs = yyS[yypt-0].exprs
		}
	case 38:
		{
			yyVAL.exprs = []ast.Expr{yyS[yypt-0].expr}
		}
	case 39:
		{
			yyVAL.exprs = append(yyS[yypt-3].exprs, yyS[yypt-0].expr)
		}
	case 40:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 41:
		{
			yyVAL.expr = &ast.FuncExpr{Args: yyS[yypt-4].ident_args, Stmts: yyS[yypt-1].stmts}
		}
	case 42:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "+=", Right: yyS[yypt-0].expr}
		}
	case 43:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "-=", Right: yyS[yypt-0].expr}
		}
	case 44:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "*=", Right: yyS[yypt-0].expr}
		}
	case 45:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-2].expr, Operator: "/=", Right: yyS[yypt-0].expr}
		}
	case 46:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "==", Right: yyS[yypt-0].expr}
		}
	case 47:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "!=", Right: yyS[yypt-0].expr}
		}
	case 48:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">", Right: yyS[yypt-0].expr}
		}
	case 49:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: ">=", Right: yyS[yypt-0].expr}
		}
	case 50:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<", Right: yyS[yypt-0].expr}
		}
	case 51:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "<=", Right: yyS[yypt-0].expr}
		}
	case 52:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "||", Right: yyS[yypt-0].expr}
		}
	case 53:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "&&", Right: yyS[yypt-0].expr}
		}
	case 54:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}
	case 55:
		{
			yyVAL.expr = &ast.NumExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 56:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 57:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 58:
		{
			yyVAL.expr = &ast.ConstExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 59:
		{
			yyVAL.expr = &ast.StringExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 60:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: yyS[yypt-2].expr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 61:
		{
			yyVAL.expr = &ast.MatchExpr{Expr: &defaultExpr, RegExpr: yyS[yypt-0].token.Literal}
		}
	case 62:
		{
			yyVAL.expr = &ast.TriOpExpr{Cond: yyS[yypt-4].expr, Then: yyS[yypt-2].expr, Else: yyS[yypt-0].expr}
		}
	case 63:
		{
			yyVAL.expr = &ast.CallExpr{Name: yyS[yypt-3].token.Literal, SubExprs: yyS[yypt-1].exprs}
		}
	case 64:
		{
			yyVAL.expr = &ast.AnonymousCallExpr{Expr: yyS[yypt-3].expr, SubExprs: yyS[yypt-1].exprs}
		}
	case 65:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "++"}
		}
	case 66:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "++", After: true}
		}
	case 67:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-0].expr, Operator: "--"}
		}
	case 68:
		{
			yyVAL.expr = &ast.CompExpr{Left: yyS[yypt-1].expr, Operator: "--", After: true}
		}
	case 69:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "+", Expr: yyS[yypt-0].expr}
		}
	case 70:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "-", Expr: yyS[yypt-0].expr}
		}
	case 71:
		{
			yyVAL.expr = &ast.UnaryExpr{Operator: "!", Expr: yyS[yypt-0].expr}
		}
	case 72:
		{
			yyVAL.expr = &ast.ParentExpr{SubExpr: yyS[yypt-1].expr}
		}
	case 73:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "+", Right: yyS[yypt-0].expr}
		}
	case 74:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "-", Right: yyS[yypt-0].expr}
		}
	case 75:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "*", Right: yyS[yypt-0].expr}
		}
	case 76:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "/", Right: yyS[yypt-0].expr}
		}
	case 77:
		{
			yyVAL.expr = &ast.BinOpExpr{Left: yyS[yypt-2].expr, Operator: "%", Right: yyS[yypt-0].expr}
		}
	case 78:
		{
			yyVAL.expr = &ast.IdentExpr{Literal: yyS[yypt-0].token.Literal}
		}
	case 79:
		{
			yyVAL.expr = &ast.FieldExpr{Expr: yyS[yypt-0].expr}
		}
	case 80:
		{
			yyVAL.expr = &ast.ItemExpr{Expr: yyS[yypt-3].expr, Index: yyS[yypt-1].exprs}
		}
	case 81:
		{
			yyVAL.ident_args = []string{}
		}
	case 82:
		{
			yyVAL.ident_args = []string{yyS[yypt-0].token.Literal}
		}
	case 83:
		{
			yyVAL.ident_args = append(yyS[yypt-3].ident_args, yyS[yypt-0].token.Literal)
		}
	case 84:
		{
			yyVAL.stmt = nil
		}
	case 85:
		{
			yyVAL.stmt = yyS[yypt-0].stmt
		}
	case 86:
		{
			yyVAL.expr = nil
		}
	case 87:
		{
			yyVAL.expr = yyS[yypt-0].expr
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}
